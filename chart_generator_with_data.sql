-- phpMyAdmin SQL Dump
-- version 4.8.5
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1
-- Generation Time: Jun 10, 2019 at 09:01 PM
-- Server version: 10.1.38-MariaDB
-- PHP Version: 7.1.27

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `chart_generator`
--

-- --------------------------------------------------------

--
-- Table structure for table `category`
--

CREATE TABLE `category` (
  `category_id` int(11) NOT NULL,
  `category_name` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `category`
--

INSERT INTO `category` (`category_id`, `category_name`) VALUES
(1, 'Домашно'),
(2, 'Реферат'),
(3, 'Проект');

-- --------------------------------------------------------

--
-- Table structure for table `chart`
--

CREATE TABLE `chart` (
  `chart_id` int(11) NOT NULL,
  `img` mediumtext NOT NULL,
  `is_visible` int(11) NOT NULL DEFAULT '1',
  `is_deleted` int(11) NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- --------------------------------------------------------

--
-- Table structure for table `gender`
--

CREATE TABLE `gender` (
  `gender_id` int(11) NOT NULL,
  `gender` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `gender`
--

INSERT INTO `gender` (`gender_id`, `gender`) VALUES
(1, 'Мъж'),
(2, 'Жена');

-- --------------------------------------------------------

--
-- Table structure for table `mark`
--

CREATE TABLE `mark` (
  `mark_id` int(11) NOT NULL,
  `student_id` int(11) NOT NULL,
  `category_id` int(11) NOT NULL,
  `stage` int(11) NOT NULL,
  `mark_value` decimal(10,2) NOT NULL,
  `author` varchar(255) NOT NULL,
  `comment` longtext,
  `time_stamp` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `mark`
--

INSERT INTO `mark` (`mark_id`, `student_id`, `category_id`, `stage`, `mark_value`, `author`, `comment`, `time_stamp`) VALUES
(1, 117, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично.', '2019-06-10 21:59:46'),
(2, 64, 1, 1, '95.00', 'KB', 'В html5 принципно `<meta charset=\"UTF-8\">` е по default, но все пак е добре да се пише.\nТагове като `br` за първото домашно са ок, но след като учим css ще препоръчваме да ги избягвате.', '2019-06-10 21:59:46'),
(3, 62, 1, 1, '90.00', 'KB', 'Meta-тагът се пише в head - структурата на html е html > (head + body), а на head > (meta + title).\nЗа да се отвори линк в нов таб се използва `target=\"_blank\"` - други стойности (в твоя случай \"blank\") също работят, но не се препоръчват (ако има iframe с такова id ще се отворят в него). Тук има повече инфо: https://superuser.com/questions/707522/html-historical-or-technical-reason-for-target-blank-with-underscore\nБраво за lang=\"bg\".', '2019-06-10 21:59:46'),
(4, 3, 1, 1, '95.00', 'KB', 'Индентацията можеше да е по-добре (aко ползваш VSCode - Alt+Shift+F).\nВ html5 принципно `<meta charset=\"UTF-8\">` е по default, но все пак е добре да се пише.\nВместо един параграф, разделен с br, по-коректно е да бъдат два параграфа.\nБраво за lang=\"bg\" и за черния колан :Д.', '2019-06-10 21:59:46'),
(5, 66, 1, 1, '95.00', 'KB', 'Липсва title в head - това е заглавието на таба и е добра практика да го има.\nБраво за noopener noreferrer', '2019-06-10 21:59:46'),
(6, 107, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично, че и отгоре. Браво за lang=\"bg\",  viewport метата и семантичните (html5) тагове. \nДобра практика е мета таговете да са подредени един след друг.', '2019-06-10 21:59:46'),
(7, 21, 1, 1, '70.00', 'KB', 'Енкодингът на файла е windows1251 - препоръчва се да се използва UTF-8 (когато го отворих, кирилицата беше заменена с въпросителни).\nВ html5 принципно `<meta charset=\"UTF-8\">` е по default, но все пак е добре да се пише.\nЛипсва title в head - това е заглавието на таба и е добра практика да го има.', '2019-06-10 21:59:46'),
(8, 97, 1, 1, '95.00', 'KB', 'Индентацията можеше да е по-добре (aко ползваш VSCode - Alt+Shift+F).\nТагове като `br` за първото домашно са ок, но след като учим css ще препоръчваме да ги избягвате.', '2019-06-10 21:59:46'),
(9, 26, 1, 1, '70.00', 'KB', 'Индентацията можеше да е по-добре (aко ползваш VSCode - Alt+Shift+F).\nЗа да се отвори линк в нов таб се използва `target=\"_blank\"`\nИмаш няколко (излишни?) нови реда преди html кода - не е проблем но това е излишен payload.\nСтруктурата на html е html > (head + body), а пък head > (meta + title). В head се слага всичко от което се интересува браузъра - стилове, чарсет, заглавие на таба (title), а пък в body слагаш всичко, което ще се визуализира в самата страница - h1, p etc.', '2019-06-10 21:59:46'),
(10, 115, 1, 1, '80.00', 'KB', 'Структурата на html е html > (head + body), а пък head > (meta + title). В head се слага всичко от което се интересува браузъра - стилове, чарсет, заглавие на таба (title), а пък в body слагаш всичко, което ще се визуализира в самата страница - h1, p etc.\nЗа да се отвори линк в нов таб се използва `target=\"_blank\"`\nТова не го взимам предвид, тъй като не сме взимали css, но вместо да се дублира еднакъв стил \"font-size:24px\", по-добре е да се създаде клас с него.', '2019-06-10 21:59:46'),
(11, 121, 1, 1, '100.00', 'KB', 'Стойността на атрибута lang - \"en\" не е правилна стойност, считайки че content-a е на български, но другите неща са изпълнени отлично.', '2019-06-10 21:59:46'),
(12, 44, 1, 1, '100.00', 'KB', 'Браво за lang=\"bg\". В html5 дефинираме чарсета с <meta charset=\"UTF-8\">. Твоят начин не е грешен, но е излишно дълъг и outdated.', '2019-06-10 21:59:46'),
(13, 33, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично. Кодът е идентиран добре с изключение на линка.', '2019-06-10 21:59:46'),
(14, 22, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично. Кодът е идентиран добре с изключение на линка.', '2019-06-10 21:59:46'),
(15, 125, 1, 1, '100.00', 'KB', 'Браво за lang=\"bg\". Условието на домашното е изпълнено отлично.', '2019-06-10 21:59:46'),
(16, 14, 1, 1, '100.00', 'KB', 'Браво за lang=\"bg\". Условието на домашното е изпълнено отлично.', '2019-06-10 21:59:46'),
(17, 23, 1, 1, '85.00', 'KB', 'Индентацията можеше да е по-добре (aко ползваш VSCode - Alt+Shift+F).\nВ html5 принципно `<meta charset=\"UTF-8\">` е по default, но все пак е добре да се пише.\nЗа да се отвори линк в нов таб се използва `target=\"_blank\"`', '2019-06-10 21:59:46'),
(18, 114, 1, 1, '95.00', 'KB', 'За да се отвори линк в нов таб се използва `target=\"_blank\"`', '2019-06-10 21:59:46'),
(19, 59, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично.', '2019-06-10 21:59:46'),
(20, 6, 1, 1, '90.00', 'KB', 'Индентацията можеше да е по-добре (aко ползваш VSCode - Alt+Shift+F).\nВ html5 принципно `<meta charset=\"UTF-8\">` е по default, но все пак е добре да се пише.\nЛипсва doctype в началото на файла.\nБраво за noopener noreferrer.', '2019-06-10 21:59:46'),
(21, 31, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично.', '2019-06-10 21:59:46'),
(22, 120, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично.', '2019-06-10 21:59:46'),
(23, 32, 1, 1, '95.00', 'KB', 'Условието на домашното е изпълнено много добре. Браво за правилното използване на семантични тагове. \nЗа да се отвори линк в нов таб се използва `target=\"_blank\"` - други стойности (в твоя случай \"blank\") също работят, но не се препоръчват (ако има iframe с такова id ще се отворят в него). Тук има повече инфо: https://superuser.com/questions/707522/html-historical-or-technical-reason-for-target-blank-with-underscore\nСтойността на атрибута lang - \"en\" не е правилна стойност, считайки че content-a е на български', '2019-06-10 21:59:46'),
(24, 70, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично.', '2019-06-10 21:59:46'),
(25, 16, 1, 1, '90.00', 'KB', 'За да се отвори линк в нов таб се използва `target=\"_blank\"`\nВ html5 принципно `<meta charset=\"UTF-8\">` е по default, но все пак е добре да се пише.', '2019-06-10 21:59:46'),
(26, 79, 1, 1, '95.00', 'KB', 'В html5 принципно `<meta charset=\"UTF-8\">` е по default, но все пак е добре да се пише.\nЗабравил си кавичките на href - не е проблем в случая, но липсата им може да доведе до бъгове', '2019-06-10 21:59:46'),
(27, 24, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично. Браво за lang=\"bg\"', '2019-06-10 21:59:46'),
(28, 39, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично.', '2019-06-10 21:59:46'),
(29, 65, 1, 1, '100.00', 'KB', 'Стойността на атрибута lang - \"en\" не е правилна стойност, считайки че content-a е на български иначе останалите неща са ок.', '2019-06-10 21:59:46'),
(30, 45, 1, 1, '100.00', 'KB', 'Браво за obfuscate функцията - готино се е получило :)). Също и за lang=\"bg\" въпреки typo-то. Изпуснал си `target=\"_blank\"` на линка.', '2019-06-10 21:59:46'),
(31, 61, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично. Браво за lang=\"bg\" и viewport метата.', '2019-06-10 21:59:46'),
(32, 93, 1, 1, '85.00', 'KB', 'За да се отвори линк в нов таб се използва `target=\"_blank\"`\nВ html5 дефинираме чарсета с <meta charset=\"UTF-8\">. Твоят начин не е грешен, но е излишно дълъг и outdated.\nСъщото важи и за doctype - достатъчно е само <!DOCTYPE html>\nИзлишен style таг в head-a, както и линкове към несъществуващи скриптове и стилове.', '2019-06-10 21:59:46'),
(33, 54, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично', '2019-06-10 21:59:46'),
(34, 119, 1, 1, '90.00', 'KB', 'В html5 принципно `<meta charset=\"UTF-8\">` е по default, но все пак е добре да се пише.\nЗа да се отвори линк в нов таб се използва `target=\"_blank\"` - други стойности също работят, но не се препоръчват (ако има iframe с такова id ще се отворят в него). Тук има повече инфо: https://superuser.com/questions/707522/html-historical-or-technical-reason-for-target-blank-with-underscore', '2019-06-10 21:59:46'),
(35, 7, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично. \nВ html5 принципно `<meta charset=\"UTF-8\">` е по default, но все пак е добре да се пише.', '2019-06-10 21:59:46'),
(36, 30, 1, 1, '100.00', 'KB', 'Тагове като `br` за първото домашно са ок, но след като учим css ще препоръчваме да ги избягвате.\nИндентацията можеше да е по-добре (aко ползваш VSCode - Alt+Shift+F).', '2019-06-10 21:59:46'),
(37, 103, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично. ', '2019-06-10 21:59:46'),
(38, 51, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично. Браво за lang=\"bg\" и използването на семантични (html5) тагове.', '2019-06-10 21:59:46'),
(39, 105, 1, 1, '100.00', 'KB', 'Индентацията можеше да е по-добре (aко ползваш VSCode - Alt+Shift+F) иначе останалото е супер.', '2019-06-10 21:59:46'),
(40, 88, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично. ', '2019-06-10 21:59:46'),
(41, 56, 1, 1, '99.00', 'KB', 'Индентацията можеше да е по-добре (aко ползваш VSCode - Alt+Shift+F) иначе останалото е супер.\nВ html5 принципно `<meta charset=\"UTF-8\">` е по default, но все пак е добре да се пише.', '2019-06-10 21:59:46'),
(42, 110, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично. ', '2019-06-10 21:59:46'),
(43, 13, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично. ', '2019-06-10 21:59:46'),
(44, 55, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично.', '2019-06-10 21:59:46'),
(45, 12, 1, 1, '40.00', 'KB', 'Енкодингът на файла е windows1251 - препоръчва се да се използва UTF-8 (когато го отворих, кирилицата беше заменена с въпросителни).\nВ html5 принципно `<meta charset=\"UTF-8\">` е по default, но все пак е добре да се пише.\nЛипсва title в head - това е заглавието на таба и е добра практика да го има.\nСтруктурата на html е html > (head + body), а пък head > (meta + title). В head се слага всичко от което се интересува браузъра - стилове, чарсет, заглавие на таба (title), а пък в body слагаш всичко, което ще се визуализира в самата страница - h1, p etc.', '2019-06-10 21:59:46'),
(46, 83, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично. Браво за lang атрибута, но в случая стойността му е грешна - съдържанието е на български.', '2019-06-10 21:59:46'),
(47, 69, 1, 1, '95.00', 'KB', 'Липсва doctype в началото на файла. Останалото е супер.', '2019-06-10 21:59:46'),
(48, 109, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично. Браво за lang=\"bg\"', '2019-06-10 21:59:46'),
(49, 80, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично.', '2019-06-10 21:59:46'),
(50, 100, 1, 1, '75.00', 'KB', 'По условие съдържанието трябваше да е на български.\nВ html5 принципно `<meta charset=\"UTF-8\">` е по default, но все пак е добре да се пише.\nЛипсва doctype в началото на файла.\nПо условие списъкът трябва да е номериран, т.е. трябва да се използва ol.', '2019-06-10 21:59:46'),
(51, 87, 1, 1, '85.00', 'KB', 'В html5 принципно `<meta charset=\"UTF-8\">` е по default, но все пак е добре да се пише.\nЛипсва doctype в началото на файла.\nЗа да се отвори линк в нов таб се използва `target=\"_blank\"`.', '2019-06-10 21:59:46'),
(52, 27, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично.', '2019-06-10 21:59:46'),
(53, 78, 1, 1, '100.00', 'KB', 'Индентацията можеше да е по-добре (aко ползваш VSCode - Alt+Shift+F) иначе останалото е супер.', '2019-06-10 21:59:46'),
(54, 118, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично.', '2019-06-10 21:59:46'),
(55, 15, 1, 1, '90.00', 'KB', 'В html5 принципно `<meta charset=\"UTF-8\">` е по default, но все пак е добре да се пише.\nЗа да се отвори линк в нов таб се използва `target=\"_blank\"`.\nБраво за lang=\"bg\"', '2019-06-10 21:59:46'),
(56, 60, 1, 1, '100.00', 'KB', 'За да се отвори линк в нов таб се използва `target=\"_blank\"`.', '2019-06-10 21:59:46'),
(57, 75, 1, 1, '80.00', 'KB', 'Енкодингът на файла е windows1251 - препоръчва се да се използва UTF-8 (когато го отворих, кирилицата беше заменена с въпросителни).\nВ html5 принципно `<meta charset=\"UTF-8\">` е по default, но все пак е добре да се пише.\nЛипсва doctype в началото на файла.', '2019-06-10 21:59:46'),
(58, 85, 1, 1, '95.00', 'KB', 'За да се отвори линк в нов таб се използва `target=\"_blank\"`.\nВ html5 принципно `<meta charset=\"UTF-8\">` е по default, но все пак е добре да се пише.', '2019-06-10 21:59:46'),
(59, 68, 1, 1, '95.00', 'KB', 'Липсва doctype в началото на файла. Останалото е супер.', '2019-06-10 21:59:46'),
(60, 124, 1, 1, '95.00', 'KB', 'За да се отвори линк в нов таб се използва `target=\"_blank\"`.', '2019-06-10 21:59:46'),
(61, 4, 1, 1, '90.00', 'KB', 'Meta-тагът се пише в head - структурата на html е html > (head + body), а на head > (meta + title). \nИмаш таг title, но той е празен - добра практика е да има стойност.', '2019-06-10 21:59:46'),
(62, 91, 1, 1, '95.00', 'KB', 'За да се отвори линк в нов таб се използва `target=\"_blank\"`. Останалото е супер.  ', '2019-06-10 21:59:46'),
(63, 48, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично. Разбирам те за футбола, но си пази нервите :Д', '2019-06-10 21:59:46'),
(64, 71, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично.', '2019-06-10 21:59:46'),
(65, 86, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично.', '2019-06-10 21:59:46'),
(66, 11, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично. Браво за lang=\"bg\".', '2019-06-10 21:59:46'),
(67, 9, 1, 1, '100.00', 'KB', 'В html5 принципно `<meta charset=\"UTF-8\">` е по default, но все пак е добре да се пише.\nУсловието на домашното е изпълнено отлично.', '2019-06-10 21:59:46'),
(68, 77, 1, 1, '90.00', 'KB', 'Индентацията можеше да е по-добре (aко ползваш VSCode - Alt+Shift+F).\nПо условие списъкът трябва да е номериран, т.е. трябва да се използва ol.', '2019-06-10 21:59:46'),
(69, 35, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично.', '2019-06-10 21:59:46'),
(70, 46, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично.', '2019-06-10 21:59:46'),
(71, 122, 1, 1, '85.00', 'KB', 'В html5 принципно `<meta charset=\"UTF-8\">` е по default, но все пак е добре да се пише.\nИндентацията можеше да е по-добре (aко ползваш VSCode - Alt+Shift+F). Title е празен, а това е стойността, която се показва в tab-a.', '2019-06-10 21:59:46'),
(72, 20, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично. Браво за lang=\"bg\".', '2019-06-10 21:59:46'),
(73, 17, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично.', '2019-06-10 21:59:46'),
(74, 63, 1, 1, '70.00', 'KB', 'Енкодингът на файла е windows1251 - препоръчва се да се използва UTF-8 (когато го отворих, кирилицата беше заменена с въпросителни).\nВ html5 принципно `<meta charset=\"UTF-8\">` е по default, но все пак е добре да се пише. Индентацията можеше да е по-добре (aко ползваш VSCode - Alt+Shift+F).', '2019-06-10 21:59:46'),
(75, 89, 1, 1, '95.00', 'KB', 'По условие съдържанието трябваше да е на български.', '2019-06-10 21:59:46'),
(76, 41, 1, 1, '95.00', 'KB', 'По условие съдържанието трябваше да е на български. Браво за lang=\"en\" и за noreferrer.', '2019-06-10 21:59:46'),
(77, 58, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично. Браво за lang=\"bg\" и за коментарите.', '2019-06-10 21:59:46'),
(78, 18, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично.', '2019-06-10 21:59:46'),
(79, 10, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично. Браво за lang=\"bg\".', '2019-06-10 21:59:46'),
(80, 8, 1, 1, '95.00', 'KB', 'В html5 принципно `<meta charset=\"UTF-8\">` е по default, но все пак е добре да се пише. Липсва doctype в началото на файла.', '2019-06-10 21:59:46'),
(81, 43, 1, 1, '95.00', 'KB', 'Условието на домашното е изпълнено.\nВ html5 принципно `<meta charset=\"UTF-8\">` е по default, но все пак е добре да се пише.', '2019-06-10 21:59:46'),
(82, 95, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично.', '2019-06-10 21:59:46'),
(83, 108, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично. #congrats ', '2019-06-10 21:59:46'),
(84, 104, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично.', '2019-06-10 21:59:46'),
(85, 90, 1, 1, '99.00', 'KB', 'Индентацията можеше да е по-добре (aко ползваш VSCode - Alt+Shift+F) иначе останалото е супер.', '2019-06-10 21:59:46'),
(86, 37, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично. Браво за семантичните тагове.', '2019-06-10 21:59:46'),
(87, 34, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично.', '2019-06-10 21:59:46'),
(88, 111, 1, 1, '95.00', 'KB', 'В html5 принципно `<meta charset=\"UTF-8\">` е по default, но все пак е добре да се пише.', '2019-06-10 21:59:46'),
(89, 92, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично.', '2019-06-10 21:59:46'),
(90, 38, 1, 1, '99.00', 'KB', 'Индентацията можеше да е по-добре (aко ползваш VSCode - Alt+Shift+F) иначе останалото е супер.', '2019-06-10 21:59:46'),
(91, 116, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично.', '2019-06-10 21:59:46'),
(92, 106, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично.', '2019-06-10 21:59:46'),
(93, 102, 1, 1, '50.00', 'KB', 'Енкодингът на файла е windows1251 - препоръчва се да се използва UTF-8 (когато го отворих, кирилицата беше заменена с въпросителни). \nВ html5 принципно `<meta charset=\"UTF-8\">` е по default, но все пак е добре да се пише. \nИндентацията можеше да е по-добре (aко ползваш VSCode - Alt+Shift+F).\nЗа да се отвори линк в нов таб се използва `target=\"_blank\"`.', '2019-06-10 21:59:46'),
(94, 112, 1, 1, '95.00', 'KB', 'Условието на домашното е изпълнено. В html5 принципно `<meta charset=\"UTF-8\">` е по default, но все пак е добре да се пише.', '2019-06-10 21:59:46'),
(95, 98, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично.', '2019-06-10 21:59:46'),
(96, 29, 1, 1, '95.00', 'KB', 'Тагове като `b`, `i` и `br` за първото домашно са ок, но след като учим css ще препоръчваме да ги избягвате.\nИндентацията можеше да е по-добре (aко ползваш VSCode - Alt+Shift+F) иначе останалото е супер.', '2019-06-10 21:59:46'),
(97, 36, 1, 1, '90.00', 'KB', 'В кода има референции към липсващи файлове main.css, main.js.', '2019-06-10 21:59:46'),
(98, 101, 1, 1, '99.00', 'KB', 'Тагове като `b`, `i` и `br` за първото домашно са ок, но след като учим css ще препоръчваме да ги избягвате. В конкретния случай по-коректно е да се използва strong вместо b.\nАтрибутът lang Е добра практика, защото показва на браузърите, screen reader-ите и търсачките какъв е езикът на съдържанието в дадения елемент. \nКогато искаме в html-a ни да има кирилица най-добрият вариант е да използваме UTF-8 ', '2019-06-10 21:59:46'),
(99, 47, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично.', '2019-06-10 21:59:46'),
(100, 57, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично.', '2019-06-10 21:59:46'),
(101, 67, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично.', '2019-06-10 21:59:46'),
(102, 81, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично.', '2019-06-10 21:59:46'),
(103, 42, 1, 1, '100.00', 'KB', 'Условието на домашното е изпълнено отлично.', '2019-06-10 21:59:46'),
(104, 25, 1, 1, '65.00', 'KB', 'В html5 принципно `<meta charset=\"UTF-8\">` е по default, но все пак е добре да се пише.\nИндентацията можеше да е по-добре (aко ползваш VSCode - Alt+Shift+F). \nTitle е празен, а това е текстът, която се показва в заглавието на tab-a.\nПо условие, линкът трябваше да се отваря в нов таб. За да се отвори линк в нов таб се използва `target=\"_blank\"`.', '2019-06-10 21:59:46'),
(105, 73, 1, 1, '95.00', 'KB', 'По условие, линкът трябваше да се отваря в нов таб. За да се отвори линк в нов таб се използва `target=\"_blank\"`.', '2019-06-10 21:59:46'),
(106, 96, 1, 1, '85.00', 'KB', 'В курсът разглеждаме html 5, за да покажем това използваме <!DOCTYPE html>\nИзползвал си lang=\"en\", а съдържанието на файла е на български. Атрибутът lang Е добра практика, защото показва на браузърите, screen reader-ите и търсачките какъв е езикът на съдържанието в дадения елемент. \nЗа да се отвори линк в нов таб се използва `target=\"_blank\"` - други стойности също работят, но не се препоръчват (ако има iframe с такова id ще се отворят в него).', '2019-06-10 21:59:46'),
(107, 3, 1, 2, '100.00', 'IY', 'Визуално е супер - браво. Единственото, което се различава е border-a - ако погледнеш в дизайна той е само отдолу и отстрани. HTML: Мета таговете са добре, но не знам дали знаеш какво правят всички от тях. div#ref-header е излишен. @uppercase CSS: h3 - vertical-align е излишно - ако не знаеш как работи - попитай в часа. Сложил си .form-elem клас на бутона, така че не е нужно да го изброяваш със запетая. font-size-ът е еднакъв и на бутона и на другите елементи, така че не е нужно да го дефинираш пак за бутона. Вместо padding: 5px и padding-left: 10px можеше да напишеш padding: 5px 10px (top/bottom left/right). Интересен трик си направил с min-width за бутона - в момента всъщност input-ите са 340 + 10 (left) + 5 (right) + 2 + 2 (borders) = 359. @boxmodel', '2019-06-10 21:59:57'),
(108, 4, 1, 2, '40.00', 'IY', '[ 61878, 62031 ] Визуално е супер - следващия път обаче работете сами. HTML: Заглавието можеше да е в заглавен таг (h1-h3). @green Има прекалено много класове и id-та за такава проста задача. fill-form съвпада с window-element навсякъде. @inputClose CSS: Стиловете на body са излишни. #wrapper - просто margin: auto е достатъчно за хоризонтално центриране - position, left, transform, z-index могат да се махнат. Слагайки клас center реално слагаш стиловете в html-a, също така не виждам защо center дава line-height ако все пак искаш да имаш подобни класове. .box-title - можеш да използваш нещо като font: bold 14px Verdana, sans-serif. .window-element + .fill-form - избягвай стойности като 303px, не задавай height ако не се налага, text-align: left e излишно понеже е по default, а е зададено 2 пъти в рамките на 7 реда за един селектор. На половината елементи задаваш Arial, на другите Verdana - избери си едното и бъди консистентен, също така е добре да имаш fallback до sans-serif. @placeholderColor #window-button - height е излишно, vertical-align - също, padding: auto не е валидна стойност. :active - стилът е интересен, макар и не особено нужен.', '2019-06-10 21:59:57'),
(109, 75, 1, 2, '80.00', 'IY', 'Визуално е много добре. Border-ът е малко по-светъл в дизайна и има малки разлики в разстоянията, но иначе браво. HTML: @doctype @charset div.header е излишен (използвай h1), div.form-wrap също (използвай form). CSS: Когато имаш css file - в него се пише само css код без <style> таг. Поради тази причина първият ти стил не работи, понеже за него селекторът е \"<style> *\". Една табулация за самите стойности е достатъчна (ти слагаш 3). @height Също така ако нещо не работи - провери в inspector-a защо е така, а недей да пишеш още стилове да го скрият. @containerHeight В момента ако добавя още един елемент (например checkbox за terms and conditions) - съдържанието ще излезе от контейнера си. За input използваш box-sizing: border-box - браво - при това положение можеш да го използваш и за form-wrap, за да нямаш стойности като 338px. Можеш да кажеш border: 1px solid #000 и след това border-top: none. @placeholderColor', '2019-06-10 21:59:57'),
(110, 6, 1, 2, '50.00', 'IY', '[ 61928, 62105 ] Имам съмнение, че може да сте работили заедно, но кодът ви се различава, така че няма проблем. Визуално сте далеч. @sizeColors @border Бутонът е с различен размер от останалите елементи. HTML: @indent @title @charsetShort @email Вместо да стилизираш body - може да имаш main/section/div елемент, който да играе роля на контейнер на формата - например може да има максимална ширина 400 пиксела. CSS: Стиловете на body можеха да са сложени на този контейнер. @h1Reset Смесваш проценти и пиксели - резултатът не изглежда добре на по-малки екрани (за които изглежда, че си акцентирал съдейки по 100% ширина и meta тага). @inputTypes @boxmodel @dib', '2019-06-10 21:59:57'),
(111, 100, 1, 2, '70.00', 'IY', 'Визуално - разстоянията между елементите можеха да са малко по-големи, но нищо. @uppercase HTML: @doctype Липсват head, title, meta[charset] тагове. @email Фамилия не трябва да е forename - name е добре да е уникално за формата. CSS: .registration-form - padding и display са излишни. .registration-fieldset - width е излишно. legend - float, position, top, left могат да се премахнат. @important Ако искаш padding-a да зависи от font-size може и margin-а да е така - в момента на един елемент имаш %, em, px и calc за оправяне на неща - не е нужен толкова сложен css за това домашно. Ако искаш да работиш в em - бъди по-консистентен. Като цяло в случая padding-a можеше да е в пиксели, а вместо height можеш да зададеш line-height, което както искаш работи спрямо font-size-a. margin: 6px auto щеше да свърши по-добра работа - ще е центрирано и не си играеш да имаш различни разстояния отгоре и отдолу. border: line не е валиден стил. @inputBg .registerbtn:hover ме кара да мисля, че сте работили заедно с 61928 (Върбан) и просто не си променил името впоследствие. @dib', '2019-06-10 21:59:57'),
(112, 77, 1, 2, '70.00', 'IY', '@sizeColors border-ите на input-ите също не са solid. HTML: @indent По-долу си написал думата правилно, но в заглавието си написал registrashion. nav таговете се очаква да съдържат линкове за навигация - при теб имаш заглавие и съдържание на форма. container[12] не са добри имена. @email @inputClose CSS: @percentWidth Имаш повторение в кода на двата контейнера - може би имаш нужда от истински контейнер, който да съдържа цялата форма със заглавието. @inputTypes border: soft не е валиден стил. @dib', '2019-06-10 21:59:57'),
(113, 7, 1, 2, '70.00', 'IY', 'Визуално е супер. @sans HTML: @doctype @title @charset div.header можеше да е header или h[123] таг. formWrapper в момента може да се замени от самата форма. CSS: Вместо body можеше да имаш истински wrapper и да стилизираш него. header има много излишни стилове - margin-right, width, background (2рия път), height (при положение че имаш line-height), border, width (всички останали пъти), vertical-align. @va Вместо сложни сметки - можеше елемента да е 100% широк (default на div) и да няма border - може би като си zoom-нала много ти се е сторило че има такъв, но всъщност няма. calc вече има сравнително добър support - префиксите имат смисъл за много малка част от браузърите caniuse.com/#search=calc - без префикс на 92.33%, със префикс на 92.48% - за 0.15% не си струва да загрозяваш кода толкова - не забравяй, че на 7% въобще няма да работи. Като една добра алтернатива иначе - виж box-sizing: border-box стила - ще ти свърши добра работа и ще елиминира подобни сметки. За form input и form button - помисли дали няма алтернативно решение без да използваш calc (помисли за стилове на родителя вместо на детето).', '2019-06-10 21:59:57'),
(114, 54, 1, 2, '90.00', 'IY', 'Виждам малко проява на креативност тук. Зеленото и сивото са различни, но се е получило ок. hover стилът е интересен. @sans HTML: @uppercase @closeCons По-добре ще е ако няма btn-container елемент. CSS: Имаш container елемент, но не го използваш адекватно - в момента той просто отмества съдържанието 20 пиксела надолу, но не решава проблема, че имаш дуплицирана логика - каквато е идеята на контейнерите. Можеш да зададеш размерите на него веднъж, а пък всичкото съдържание в него да заема 100% от ширината. В момента имаш стойности като height: 368px, width: 437px, width: 425px - в идеалният случай трябва да мога да ти кажа - намали дизайна със 100 пиксела в ширината и ти да промениш една стойност. @containerHeight Вместо input:first-of-type и btn-container margin-и със различни стойности - можеш да сложиш padding на родителя. @dib @bb', '2019-06-10 21:59:57'),
(115, 78, 1, 2, '75.00', 'IY', 'Отвори страницата на 800px ширина екран или по-малко и виж какво става. Искаме когато правим дизайн той да изглежда добре на повече от 1 резолюция - в момента и на малки резолюции и на големи резолюции това ще изглежда зле. @percentWidth HTML: @indent Добре е да сложиш заглавието и формата в един общ елемент, за да не трябва да стилизираш body - в случая header-a може да е в main. CSS: В момента някои неща се променят при един хоризонтален resize, други при вертикален - резултатът е, а трети си стоят еднакви винаги - каквото и да решиш да правиш - бъди консистентен. В момента формата е сплескана на по-малки ширини, а пък ако си отвориш inspector-а отдолу и намалиш височината - заглавието си намалява размера, но останалите неща - не. Като за начало бих предложил да работиш в пиксели и чак когато се чувстваш комфортно със css да почнеш да експериментираш с други мерни единици. Също така има мерна единица vmin която може да ти хареса или да оставиш всичко във vw. В опит да стилизираш placeholder цвета си стилизирал истинския текст - напиши нещо във полетата и ще видиш колко е бледо.', '2019-06-10 21:59:57'),
(116, 8, 1, 2, '30.00', 'IY', '[ 61978, 62101 ] Работили сте заедно. @sizeColors @sans HTML: @doctype @linkIn Вместо div.inputs можеше да използваш form тага на това място. За някои класове използваш тире, за други underscore - избери си едното и бъди консистентен - същото важи и за съкращенията. @br CSS: Неща като max-content не са нужни тук и също така не са особено добре поддържани (не работи дори на модерен firefox) - вместо това може да използваш display: inline-block. .register-text - можеше да зададеш размер на шрифта и margin-и (стойности). .inputs - можеше да зададеш padding: 10px или нещо подобно, за да е по-близо до дизайна. margin: center (както и margin: left) не е валидна стойност - ако искаш да центрираш контейнера - можеше да зададаеш margin: auto на .reg_container. Бутонът ти има border, който не си премахнал.', '2019-06-10 21:59:57'),
(117, 29, 1, 2, '90.00', 'IY', 'Визуално е супер. @sans HTML: @uppercase @closeCons div.registration-form е объркващо като име, понеже не съдържа формата и също така можеше да е header или h[123] таг. CSS: @height @containerHeight @container @dib input и button имат доста общи стилове - можеш да напишеш \"input, button\" и да изброиш общите стилове, за да не се повтаряш.', '2019-06-10 21:59:57'),
(118, 30, 1, 2, '70.00', 'IY', 'Дори и без да resize-вам не изглежда добре на моя екран - регистрация е по-широко от самата форма. @percentWidth @sans HTML: @indent @br Fieldset в момента не е много популярно, но ако го ползваш - заглавието може да е в legend вместо в параграф - иначе го сложи в h[123] таг. Интересен регулярен израз - браво. butRegistration не е най-доброто име. CSS: На много места слагаш интервали между стойността и мерната единица (px) - това не е валиден синтаксис - всички редове с такива интервали можеш да ги премахнеш, понеже не работят. Стилизирането на p тага по този начин не е добра идея. Също така - когато използваш position: absolute (ненужно тук) - можеш да дадеш position: relative на родителя, спрямо когото искаш да бъде позиционирането. Недей да задаваш height: 100% освен ако не знаеш защо го правиш - в повечето случаи няма да прави нищо, а в малкото в които прави нещо може би няма да го искаш като поведение. text-align: left е излишно на input, понеже е default стойността. border-ът на бутона не е премахнат отново поради интервала при стойността - за по-просто можеш да напишеш border: none.', '2019-06-10 21:59:57'),
(119, 55, 1, 2, '70.00', 'IY', 'Визуално е супер. HTML: В html се слага отделен таг за всеки вид метаинформация - това значи 1 за viewport и 1 за charset. Като цяло най-добре използвай utf-8, а не ansi - особено когато имаш текст на кирилица. @uppercase @email @hr Също така hr е самозатваряш се таг - там където се опитваш да го затвориш се игнорира от браузъра. div.container е единствено дете на form - може би нямаш нужда от него тогава (можеш да сложиш .container класа на самата форма). CSS: text-align: center на body е излишно - ако искаш да центрираш съдържанието - можеш да дадеш margin: auto на контейнера, а за центрирания текст да го зададеш на съответните елементи. @containerHeight @dib @inputTypes @borderShorthand @negativeMargins', '2019-06-10 21:59:57'),
(120, 31, 1, 2, '90.00', 'IY', 'Размерите на полетата и на текста са малко дребни, но иначе визуално е супер. HTML: @uppercase article тагът не е адекватен - той е за съдържание, което би имало смисъл извън страницата (както статия би имала) - празна форма не се вписва в това описание. @noTextLabel @br CSS: Стилизирането на html по този начин е лоша идея - вместо това можеш да стилизираш section тага си. @container @height @negativeMargins @fontShorthand Името на шрифта е Arial (не Ariel). @borderShorthand Като цяло имаш много width и height стойности - задачата може да се реши с 1 width (без да броим 100%) и 0 height декларации - тогава ще бъде доста по-флексибилно решението.', '2019-06-10 21:59:57'),
(121, 32, 1, 2, '90.00', 'IY', 'Визуално е супер - border-ът беше сив, а ен черен, но нищо. HTML: @langEn div.fields е единствено дете на form - така че може би може и без него. CSS: Стиловете на body са излишни - можеш само margin-top да оставиш. За ширина можеш да имаш специален контейнер, който да съдържа всичко и да стилизираш него. @containerHeight @borderShorthand @dib input - можеш да сложиш margin: 8px auto, за да бъде центриран вместо да задаваш неравни стойности отляво и отдясно - по този начин също ще бъде коректно центриран дори и контейнера да си промени размера. @emailStyles @duplicate', '2019-06-10 21:59:57'),
(122, 33, 1, 2, '80.00', 'IY', '@border Иначе е супер визуално. HTML: Стойността е <!DOCTYPE html>. Имаш 2 пъти затварящ </head> таг - втория се игнорира и заглавието ти е извън head-a. CSS: @indent @container @duplicate @height @fontShorthand Бутонът е в проценти, а всичко останало - в пиксели - гледай да бъдеш консистентен. Ако имаш проблеми с ширината - можеш или да зададеш 100% ширина на децата, а родителя да има padding: 20px или да погледнеш box-sizing property-то.', '2019-06-10 21:59:57'),
(123, 9, 1, 2, '90.00', 'IY', 'Визуално - много добре. border-ът трябваше да е сив и разстоянията можеха да са малко по-добре, но нищо. HTML: @uppercase div#header може да е header таг, а пък span > b да е h1. @green CSS: @fontShorthand @height @dib @borderShorthand @boxmodel', '2019-06-10 21:59:57'),
(124, 34, 1, 2, '90.00', 'IY', 'Визуално - супер. @inputColor HTML: @closeCons section тагът е бил добре - не е трябвало да го коментираш. div-овете за всеки input са излишни - може да зададеш display: block на самите input-и вместо това. CSS: Можеш да включиш bold в краткия запис font: bold 15px Arial. @height @containerHeight @borderShorthand input - избягвай части от пиксели като мерни единици, когато имаш 2 по 2 еднакви стойности можеш да напишеш само 2те стойности без да ги повтаряш. Също така ако можеш да използваш auto, за да се центрира съдържанието- margin: 8px auto. Вместо да стилизираш margin на email и submit - можеш да сложиш padding на родителя - така няма да се счупи дизайна ако разменя имената и email-а.', '2019-06-10 21:59:57'),
(125, 35, 1, 2, '100.00', 'IY', 'Визуално е супер - само border-ът трябваше да е сив (малко по-трудно когато го искаме само отдолу и отстрани). HTML: Нямам забележки - браво. CSS: Всичките ти селектори започват с main - можеш да го премахнеш и ще станат една идея по-прости. @negativeMargins Виждам какво се опитваш да направиш, но все пак е по-сигурно ако просто сложиш padding-a на form-ата вместо на main PHP: Предала си празен файл, но не сме учили php, така че не е проблем - в задачата очаквахме само html + css така или иначе.', '2019-06-10 21:59:57'),
(126, 101, 1, 2, '100.00', 'IY', 'Визуално - супер. @border Бутонът също има непремахнат border. HTML: head и body могат да се идентират едно ниво навътре, могат и да останат най-наляво - и двете са приети, но е важно да са по еднакъв начин. CSS: Размерът на самата форма е малко по-малко заради бялото разстояние, но не е проблем - не очакваме pixel perfect имплементация - важното е да прилича и да изглежда добре. @fontShorthand Ок е да има fallback, но е добре да е от същия тип като оригиналния - в случая sans-serif. font-weight трябваше да е bold на заглавието. @borderShorthand font-weight: normal не е нужно на бутона понеже е така по default. Стилизирането на placeholder-a не е от такова значение, така че и да не го беше стилизирал или да го беше стилизирал само по standard начина (без префиксите) - пак щеше да е ок.', '2019-06-10 21:59:57'),
(127, 36, 1, 2, '45.00', 'IY', '[ 61989, 62010 ] Добро решение, но сте работили заедно. Placeholder-ите са нечетими и бутонът е по-широк от останалите елементи, иначе е изглежда ок. HTML: Изглежда добре. JS: Можеш да закачиш логиката към бутона чрез js. Другият път ще разгледаме как работи this в js. @sq В случая е разбираемо заради единичната кавичка в текста, но все пак - няма проблем просто да я escape-неш. Често този текст е \"Passwords must match\". Ако ти е интересно помисли как би било решението с тернарен оператор. CSS: 1px border беше достатъчно, но нищо. Обикновено е добре да се започва със стила на контейнера - в случая може би част от стиловете на form (като ширина) биха били по-добре на контейнера. Ако зададеш ширина няма да имаш нужда от всички останали стилове, които си задал - display: inline-block също би свършило работа. Можеш да зададеш padding на самия form таг, за да бъде margin-a на първия елемент до края на формата, а не до заглавието (ако в даден момент си имал бяло разстояние между заглавието и формата - това е причината). @fontShorthand @height Бутонът и input-ите имат различна ширина - може да погледнеш box-sizing property-то.', '2019-06-10 21:59:57'),
(128, 102, 1, 2, '60.00', 'IY', '@border input-ите също нямат border. @sans HTML: @doctype @indent link тагът трябва да се намира в head-a. @charset @uppercase Клас \'a\' е от най-неописателните възможно, а \'forma\' е на български - в имената на променливите (за html/css това са id/class) не трябва да има неща на български - ако отидеш в немска компания с такава практика ще разбереш защо. @spacing CSS: @fontShorthand @container @mixedIndent @shorthand За submit бутона имаш 3 реда за margin-ите му. @duplicate Частта за различните видове полета е copy-paste-ната - сложи общ селектоп като input (така или иначе и бутона има почти същите стилове) или им сложи някакъв клас. Също така cursor: pointer на нормален input е лоша идея - изглежда объркващо.', '2019-06-10 21:59:57'),
(129, 79, 1, 2, '80.00', 'IY', '@border Липсва индентация/padding на полетата. Иначе е супер визуално. HTML: @charset @uppercase div тагът ти е по-добре като form таг - все пак задачата беше да предадете форма. name атрибутите на input-ите са препоръчителни за тази задача, понеже не сме обръщали особено внимание на форми засега, но в бъдеще гледай да имат такива. CSS: @fontShorthand @height @container На input-a можеш да напишеш margin: 18px auto като кратък запис. padding на input-ите би било добра идея.', '2019-06-10 21:59:57'),
(130, 103, 1, 2, '100.00', 'IY', '@inputColor Иначе е супер визуално. HTML: div#reg_form е излишно имайки предвид, че е единствено дете. id-тата на всички полета също не са нужни засега - ако искаш можеш да ги смениш на name (атрибутът от който се интересува самата форма при предаване). CSS: @fontShorthand Можеш да премахнеш box-sizing и width на .reg_fields и ще получиш същия ефект (default-ното поведение на block елемент без ширина).', '2019-06-10 21:59:57'),
(131, 56, 1, 2, '40.00', 'IY', 'Това е една страшна форма. Визуално няма нищо общо със задачата, но поне си поекспериментирал. Текстът трябваше да е на български. Също така думата е registrAtion. @sans HTML: @doctype @indent @title @charset @inputClose @br id-та като elem[123] не искаме да виждаме както най-вероятно не пишеш int[123] като имена на променливи. @uppercase @email @password CSS: @borderShorthand groove border-a изглежда странно в днешни дни. Не забравяй мерните единици на font-size нищо, че работи и без тях. @container @duplicate Също така пробвай бутона, полетата и може би заглавието да са с еднакви ширини - в момента ако смениш текста на registration ще се смени и ширината.', '2019-06-10 21:59:57'),
(132, 10, 1, 2, '95.00', 'IY', 'Цветовете ти се различават от дизайна (макар и да са по-приятни имат по-лош контраст между текста и фона). HTML: div-ът ти може би трябва да е h[123] или header. fieldset-a е излишен (единствено дете). @spacing SubmitInput е единственото id започващо с главна буква - бъди консистентен. Иначе засега не са наложителни id-тата - ако искаш можеш да сложиш name атрибути вместо тях. CSS: @height @container @fontShorthand fieldset > е излишно от селекторите. @bbPrefix @shorthand padding: 5px 10px е по-просто и също подсигурява, че не си написал padding-left 2 пъти без да искаш.', '2019-06-10 21:59:57'),
(133, 11, 1, 2, '90.00', 'IY', 'Не си обновила html-a след промяната на името на css file-a. HTML: link-а е извън head-a. div-a можеше да е section. @email CSS: Имаш div като най-външен контейнер, но не го използваш подобаващо. Можеш да зададеш ширината на него, а да оставиш form и h1 да се адаптират сами. @borderShorthand submit бутонът ти има ширина в проценти без причина. Също така border-style + border-width могат да се сменят от border: none.', '2019-06-10 21:59:57'),
(134, 57, 1, 2, '85.00', 'IY', '@border HTML: Имаш излишен интервал в html тага. @indent .regitstration и .wrapper-title не правят много смисъл заедно - избери си едно нещо и бъди консистентна. .registration може да е section, а .wrapper-title - header таг. @uppercase @br @brClose CSS: Добре си задала шинира на контейнера, но след това си я задала и на други неща - не е нужно, остави ги да си заемат 100% сами. Формата има border и отгоре. wrapper-title не е нужно да е position: absolute - явно си имала празно бяло пространство заради default-ния margin на h1 - можеше просто да го занулиш и нямаше да имаш проблеми. margin-top-a на първото дете е 15% - това всъщност е 15% от ширината - ако се промени тя, но и тези елементи ще се преместят нагоре-надолу - ако използваш position: absolute - знай височината на заглавието в пиксели и сложи толкова пиксела padding-top на .regitstration елемента. @height JS: Мисля, че не е нужно за това домашно да има alert(\"Not implemented\") като js file.', '2019-06-10 21:59:57'),
(135, 37, 1, 2, '90.00', 'IY', 'Визуално е много добре. HTML: @charsetShort За main и section мога да се съглася, но article не му е мястото тук. div.fancy-form можеше да е самия section таг. div.header може да е header тяг, а път strong - h1 таг. input-ите не са индентирани по-навътре от формата. Също така този вид подреждане на атрибути не е особено добре прието особено за толкова проста ситуация - това е ок ако пишеш на react и имаш дълги и сложни props-ове, но не и за статичен html. confirmPasswordpassword може би има една парола в повече. CSS: Селекторите ти са много сложни - вместо .fancy-form > form > input[type=\"text\"], .fancy-form > form > input[type=\"email\"], .fancy-form > form > input[type=\"password\"] можеш да напишеш просто .fancy-form input. Когато пишеш стилове искаш те да бъдат флексибилни - а не ако ти кажа - от утре във формата се добавя телефон да трябва да променяш стиловете заради това. padding: auto не е валидна стойност - това е само за margin за центриране. Вместо width: 100%, padding: 10px 0 10px 0 можеше да напишеш просто padding: 10px и щеше да имаш същия визуален ефект. margin: 7px auto на input-ите щеше да има аналогичен ефект на сегашния стил, но шеше да работи и при resize на контейнера. submit бутона има друга ширина в кода - погледни box-sizing property-то.', '2019-06-10 21:59:57'),
(136, 12, 1, 2, '60.00', 'IY', '@cssFile Размерите драстично се различават от дизайна. HTML: @title @charset @uppercase @hr @noTextLabel @labelFor CSS: background-color: none е излишно на body. width на * е абсурдно - всеки елемент на страницата да е с ширина 500px не е добра идея. high подозирам, че си искал да бъде height, но то също би било немислимо като стил. На h1 можеш да сложиш padding: някаква стойност, margin: 0 (без мерна единица и повтаряне) и да премахнеш width и height. Имаш само един контейнер, така че коментарът е странен. Също така сигурно искаш solid а не ridge стил на border-a. @borderShorthand @dib Стиловете на hr са излишни - да слагаш линия, на която махаш линията - ако искаш margin-и - просто ги задай на съществуващите елементи.', '2019-06-10 21:59:57'),
(137, 38, 1, 2, '85.00', 'IY', '@border @sans @uppercase \"Регирстрация\". Заглавието стърчи наляво. input-ите нямат padding/indent. @renamedCss HTML: autofocus е хубава добавка. CSS: legend-a има непремахнат padding (не пречи), но fieldset-a има margin (пречи). бутонът е по-малък от полетата - досетил си се за 2та пиксела border, но има и 2 пиксела padding. @boxmodel', '2019-06-10 21:59:57'),
(138, 104, 1, 2, '40.00', 'IY', 'Визуално си далеч - може би опитваш някакъв нов \"метро\" дизайн, но не изглежда особено добре в текущия си вид. @sans @sizeColors Бутонът за регистрация е по-широк от полетата, а поллетата пък не са центрирани. HTML: div.clearreg е излишен и бутона може да отиде в контейнера. Ако това стане, то и самия div.container става излишен. Ако искаш по-добро разделение - може контейнерът да има всичко, а формата да бъде само с полетата и бутона. @uppercase @email type=\"name\" няма - това е текст - а има email понеже тогава може да излезе клавиатура със кльомба или с .com на телефоните. CSS: @border @borderShorthand @percentWidth @inputTypes Част от този код ми изглежда познат, промененото input[type=name] обаче не е стилизирано когато влезе на фокус - мисля, че разбираш защо е лоша идея подобно изброяване. @dib Стилизираш hr таг въпреки, че не използваш такъв. Явно става ясно откъде идва името clearreg, но в случая не си използвала float никъде, така че няма нужда да го чистиш. За размерите на input-ите - погледни box-sizing property-то. @boxmodel', '2019-06-10 21:59:57'),
(139, 58, 1, 2, '100.00', 'IY', 'Placeholder-ите са малко бледи, но иначе изглежда добре. @uppercase Бутонът може би не трябва да има border. HTML: Коментарите в html-a не са нужни. От друга страна може би .inputs-container можеше наистина да се казва form-fields - колкото по-консистентна си - толкова по-добре. CSS: Ако искаш да оставяш нещата по default-ния начин - може би default-ния placeholder би било добра идея. Добре си се сетила за min-width. inputs-container - box-sizing и width тук са излишни.', '2019-06-10 21:59:57'),
(140, 59, 1, 2, '40.00', 'IY', '@renamedCss Визуално си много далеч. @sizeColors @border @sans Липсва margin между input-ите. HTML: p.first[align=\"center\"] можеше да е h[123] таг. first и unfirst са лоши имена за класове - поне използвай last. Освен това css има селектори за тези неща, а и може да се реши задачата и без да се задават специални стилове на първия и последния елемент. Самата форма е закоментирана. .text не е добро име. @email @password CSS: @percentWidth @duplicate height: auto е излишно, text-align: left също е по default. Причината бутонът да е по-малък от полетата е box-sizing property-то. @boxmodel', '2019-06-10 21:59:57'),
(141, 60, 1, 2, '85.00', 'IY', 'Визуално е супер - приятно е за гледане. @sans HTML: @uppercase @inputClose Може би класовете можеха да са малко по-добри, понеже text и menu не са много ясни, но нищо. CSS: Можеше да зададеш ширина на form тага, а да оставиш другите да се адаптират до 100%. @height @containerHeight @dib @duplicate Никога недей да си copy-paste-ваш кода ако можеш да измислиш по-елегантно решение. Ако сега добавя input[type=date] не искам да се увеличава css-а. Също така стилизирането на email-а не е добра идея - може да сложа името на първо място - помисли за решение, което е по-устойчиво на промени. @boxmodel', '2019-06-10 21:59:57'),
(142, 105, 1, 2, '85.00', 'IY', '@scale Може би има някакви разминавания в разстоянието между паролата и бутона, но нищо. HTML: p.regTitle трябва да е h[123] таг, regForm и regBlock могат да се обединят. @uppercase @closeCons CSS: @absolute За хоризонтално центриране може просто да сложиш margin: auto - translate има смисъл само за вертикално центриране. z-index: -1 е ненужно. Можеше да зададеш ширина на wrapper, а останалите да се адаптират до 100%. @negativeMargins Може би си искал да скриеш горния border - просто задай border-top: none - по-добре да го няма отколкото да го криеш с припокриване на елементи. Дефинирай font-family на wrapper и не се повтаряй.', '2019-06-10 21:59:57'),
(143, 106, 1, 2, '80.00', 'IY', 'Визуално е добре. @sans Само бутона за регистрация е изключително малък font-size-a. border-ът също можеше да е по-светъл. HTML: @langEn @uppercase @email dt (definition term) е ок само като дете на dl (definition list) - тук е напълно излишно. Можеш да сложиш display: block на input ако имаш проблеми с новите редове. @spacing #ibutton не е добро име освен ако не е нов продукт на apple. CSS: @dib border-radius е 0 по default. @duplicate text-decoration е излишно когато не става въпрос за линкове (бутоните нямат подчертаване така или иначе). @borderBg @containerHeight', '2019-06-10 21:59:57'),
(144, 80, 1, 2, '40.00', 'IY', '[ 62008, 62088 ] Повече не работете в екип за домашни и проекти по този предмет. Визуално - на определен екран сигурно е добре, но на по-малък става прекалено дребно.  В твоето домашно заглавието не е bold. HTML: @title div#form-title може би трябва да е h[123]. CSS: @percentWidth @height @va @emailStyles За по-сигурно/ясно сложи border: none вместо inherit. @boxmodel', '2019-06-10 21:59:57');
INSERT INTO `mark` (`mark_id`, `student_id`, `category_id`, `stage`, `mark_value`, `author`, `comment`, `time_stamp`) VALUES
(145, 61, 1, 2, '100.00', 'IY', 'Бутонът е сравнително малък font-size-a, но иначе е добре. HTML: Предполагам знаеш какво правят всички meta тагове, които си написала - ако не - провери ги. В тази страница е ок main да се намира на това място, но като цяло не е много съдържанието в него. registration-container можеше да е section. CSS: @vars Обикновено редът на shorthand e border: width style color - не е задължително, но почти навсякъде се пише в този ред. @inputColor width е излишно на submit, понеже е дефиниран за input. @quotes', '2019-06-10 21:59:57'),
(146, 39, 1, 2, '45.00', 'IY', '[ 61989, 62010 ] Добро решение, но сте работили заедно. За повече информация виж ревюто на Стилян. HTML: @quotes Също така language и type на скрипта не са нужни. rf-wrapper-a може да е section, rf-title-a може да е h1. JS: Коментарът може би не е нужен.', '2019-06-10 21:59:57'),
(147, 107, 1, 2, '90.00', 'IY', 'Ако погледнеш решението си на малко по-малък екран ще забележиш проблем. @percentWidth HTML: @metaHope form-main може да е section, form-head - header, form-body - самата форма. Казахме, че за булевите атрибути не искаме да виждаме неща като required=\"true\" - не знам дали знаеш какво ще стане ако го промениш на required=\"false\". Ако искаш погледни пак в презентацията какво пише. Иначе доста атрибути си сложил - id-тата засега не ги ползваме, но другите стойности са добре. CSS: Не слагай интервали между стойностите и мерните единици (px) - това прави стойността невалидна и браузърите я игнорират. Също така - 0 е 0 във всяка мерна единица, така че можеш да я пропуснеш. display: block и width: 100% на form-title също могат да се пропуснат. За padding може да се напише padding: 1em 0 или просто 1em. form-body - display: block и margin: 0 са по default за div елемент. @borderShorthand На input-a може да се зададе margin: 1em auto, за да е центрирано винаги. 93% също така е странна стойност - може да я преобмислиш. #submit-button - margin има същата стойност като тази на input - може да я махнеш.', '2019-06-10 21:59:57'),
(148, 108, 1, 2, '90.00', 'IY', 'Визуално е добре - border-ите не са със същите цветове, но иначе е наред. HTML: По-добре избягвай коментари извън html тага. xmlns не е нужно за html5 - ако се опитваш кодът ти да е xml compatible - това значи че не искаш да имаш коментари извън root елемента (в момента имаш), всички самозатварящи се тагове да имат /> (това е ок) и искаш всички атрибути да имат стойности в двойни кавички (required атрибута ти не отговаря на това условие). Също така не мисля, че в днешно време някой ще иска това от теб, но ако твърдо искаш да е възможно - тогава гледай да спазваш по-стриктните правила. rf-title може да е h[123], form-content може да се обедини с reg-form (единствено дете). Като цяло измисли си някакви конвинции за имената - имаш content, reg-form-title, registration-form, form-content etc. div-овете не са нужни - ползвай display: block на input-ите. CSS: Браво - точно това е смисъла на контейнерите - задаваш размера веднъж и останалата част от кода ти е чист от ширини. Вместо margin: 5px 5% може да използваш 5px auto или просто auto - така е центрирано хоризонтално и колкото по-просто - толкова по-добре. form - width, height са излишни. @pxFraction input - cursor: text е излишно. @height @duplicate Пробвай да премахнеш width: 100% където можеш. @fontShorthand @placeholderColor', '2019-06-10 21:59:57'),
(149, 81, 1, 2, '100.00', 'IY', 'Визуално е супер. @border HTML: @closeCons register-container може да е section, а register-header - header или h[123]. CSS: Задаване текста да е бял без да задаваш фон е рисково откъм ново съдържание. @height Пробвай да опростиш селекторите си малко - от .register-container form .register-btn можеш спокойно да махнеш form, а може би и .register-container. Няма причина да имаш една ширина (320px) на input и друга (100%) на button - имаш box-sizing: border-box зададено, така че не трябва да имаш проблеми. Можеш да зададеш и двете да имат 100% ширина - тя ще включва и border-a на input-a. @outline', '2019-06-10 21:59:57'),
(150, 82, 1, 2, '95.00', 'IY', 'Визуално е добре - само placeholder-ите са малко трудни за четене. border-a също можеше да е 1 пиксел вместо 2. HTML: @doctype span тагът е излишен, също така си избери - затвори го на същия ред или сложи съдържанието на нов. @uppercase @br CSS: @borderShorthand В момента имаш form таг, който съдържа долните елементи - можеш да зададеш на него border отдоли и отстрани - така няма да има нужда да правиш трикове с h1 за да скриеш border-a. @dib padding-a на span-а може да бъде на самия h1 таг. @duplicate @ffInherit @removedDoctype @outline @placeholderColor @height cursor: pointer не е задължително (не сме го показвали), но е приятно на бутона.', '2019-06-10 21:59:57'),
(151, 83, 1, 2, '85.00', 'IY', 'Визуално има какво да се иска - заглавието е по-широко, border-ът е по-тъмен, няма padding/margin на input-ите. @sans @percentWidth HTML: Не е нужно да се слага условието като коментар. @langEn @metaHope @closeCons @fieldset @uppercase formBorder и formContent би трябвало да са един елемент - html трябва да е съдържанието, а не да се интересува дали в текущия дизайн има border или не. А вътрешните inputField класове може би могат да са на самите input field-ове. CSS: @height Оставила си default-ни margin и padding на някои fieldset-ове - най-външния има margin: 2px и затова заглавието стърчи. Вместо width: 102% можеш да погледнеш box-sizing: border-box property-то - с него елементите ще бъдат 100% от ширината включвайки padding + border. Очевидно вече го използваш на други места, но не си открила причината за проблема там (#title). JS: Можеш да пробваш да решиш проблема и без jQuery (нищо, че ще е малко по-трудно). `$(document).ready(function () {` може да се смени от просто `$(function() {` - двете са еквивалентни от много години. Може да погледнеш различните toggle методи на jQuery - може също да се окажат полезни. pass и confirmpass се използват точно веднъж - помисли дали няма по-елегантно решение. На последно място - може да помислиш дали да не използваш setCustomValidity метода на полетата за задаването на грешката - ако в момента започнеш да пишеш в долното поле chrome validation-a скрива твоята грешка докато не се стигне до 6 символа.', '2019-06-10 21:59:57'),
(152, 109, 1, 2, '95.00', 'IY', 'Визуално - супер. Само border-a можеше да е сив, а бутона да няма border. Също така е малко по-голяма формата отколкото в дизайна но нищо. HTML: @closeCons div.registerForm може да е section, а formHeading - header или h[123]. @reqShorthand id-тата на полетата също не са нужни на този етап. @uppercase CSS: @height @containerHeight Имаш ширини зададени на много места - може да зададеш само на registerForm, а на останалите места - да оставиш браузъра да допълни до 100% където може. position: relative е излишно освен ако няма да правиш някакви отмествания, припокривания или position: absolute вътре в елемента. Щом слагаш white-space: nowrap - може би ще искаш и неща като overflow: hidden, text-overflow: ellipsis. width, height, position, box-sizing са излишни на формата. Стиловете могат да се докарат като в дизайна и без специално внимание на (first|last)-child елементите.', '2019-06-10 21:59:57'),
(153, 62, 1, 2, '85.00', 'IY', '@border @sans Не си премахнал border-a на бутона. HTML: charset-a трябва да е в head тага. .reg-form може да е section, .reg-form-title - header, strong - h1. @br CSS: В случая бих казал, че е по-добре text-align: center да е на релевантните елементи (поне на reg-form), а не на цялата страница - представи си, че имаш и друго съдържание. Добро използване на max-width на reg-form. За reg-form-title - border и max-width са излишни, а пък padding можеше да е 8px 0 или просто 8px. reg-input - няма причина да няма padding отдясно. @duplicate Погледни box-sizing: border-box property-то може да ти помогне за различните размери на бутона и полетата.', '2019-06-10 21:59:57'),
(154, 110, 1, 2, '80.00', 'IY', 'Бутонът за регистрация е изключително малък. Като цяло дизайнът е малко по-голям, но нищо. Формата е много отместена надясно - може би е могло да я центрираш вместо да я отместваш с 520 пиксела надясно (margin: auto и си готова - без position, без проблеми - margin: 100px auto 0 ако искаш 100 пиксела отгоре). HTML: @indent div-ът е отместен надясно, макар и да не се намира в h1 тага (което също щеше да е лошо). На мястото на form можеше да има section, на мястото на div - form, а пък вместо label-ите - просто input-ите директно. CSS: @minified form - може да оставиш само width и background - другите стилове ги махни. h1 - @fontShorthand div - @borderShorthand label - display и margin могат да отидат на input-ите след като label-ите се махнат. @shorthand Бутонът и input-ите имат различни размери откъм код - ако това не ти харесва можеш да ползваш box-sizing: border-box и да станат еднакви. @boxmodel', '2019-06-10 21:59:57'),
(155, 63, 1, 2, '65.00', 'IY', 'Визуално е близо. Може размерите да се увеличат малко, а border-ът да се осветли. Вместо де се опитваш да скриеш горния border (на моя екран си личи леко) - просто го премахни (border-top: none). HTML: @indent @charset link-ът е извън head-a. @spacing @inline @uppercase div.header можеше да е header таг или h[123]. CSS: Имаш доста position, top, left, transform стойности - за центрирането на екрана е ок, но за заглавието е излишно - помисли за по-просто решение, може би малко по-добра структура ще помогне. Няма нужда .header да е fixed - може да е absolute ако ще правиш подобни неща. box-sizing е излишно за елементи без border и padding. Избягвай части от пикселите - това е нещо, което ще варира между браузъри и екрани. Отместването 145 пиксела наляво и надясно също е излишно - целия translate може да се махне ако просто сложиш top: -30px.', '2019-06-10 21:59:57'),
(156, 40, 1, 2, '85.00', 'IY', '@dsStore Визуално е ок като изключим, че центриращият код не работи много добре. @uppercase HTML: div.container може да е section, .registerTitle - header или h[123]. registerContainer е малко объркващо като име тук - също така може да го обединиш с form тага. form тага имаш излишен интервал в class и липсващ интервал преди id. @email pattern-ът ти не включва главни букви - за hostname-a няма значение, но е възможно да има email, където username частта да има главни букви.  @br CSS: position: relative на body е излишно. За хоризонтално центриране - margin: auto върши перфектна работа. За вертикално - position: absolute + top: 50% + transform: translateY(-50%) би трябвало да е достатъчно - всички други \"центриращи\" стилове можеш спокойно да ги махнеш. Когато учим flex ще видиш в новите браузъри колко по-лесно е това. .register - display: block е по default, а align-items не работи без flex/grid. @outline @inputTypes JS: Логиката щеше да е по-проста ако validateForm беше просто checkForm и връщаше bool без да има alert - какво става когато не е валидно можеш да кажеш в else statement долу. async, crypto, arrow functions се поддържат само от нови браузъри - имай го предвид. Като стигнем до JS2 ще разгледаме как да накараме някои от тези неща да работят и на по-стари браузъри. На 4 реда имаш точка и запетая - на всички останали - не - избери едното и бъди консистентен. Когато arrow function има само един аргумент - можеш да пропуснеш скобите - направил си го на 1/3 места. Пробвай да си опростиш кода - имаш ли нужда от толкова променливи навсякъде, имаш ли нужда от IIFE. Помисли дали някога формата ще се изпрати, дали може да влезе в някакъв loop. Ако искаш браузър с crypto и arrows - със сигурност ще има и setCustomValidity на input-ите.', '2019-06-10 21:59:57'),
(157, 13, 1, 2, '40.00', 'IY', '[ 61878, 62031 ] Виж ревюто на Лъчезар. Единствената допълнителна забележка е - избягвай стойности като половин пиксел когато можеш - на различните браузъри и екрани ще се визуализира различно.', '2019-06-10 21:59:57'),
(158, 14, 1, 2, '85.00', 'IY', 'Визуално - супер. HTML: @uppercase @semtags @email CSS: @height @containerHeight @dib @borderShorthand @boxmodel', '2019-06-10 21:59:57'),
(159, 84, 1, 2, '75.00', 'IY', 'Визуално - супер. HTML: @doctype @charset @title @uppercase CSS: Нямаш нужда от width-350 клас - пробвай да го зададеш само на един елемент, а остави децата да се оправят. .email, .first-name, .last-name, .password, .password-repeat - не е добре да изброяваш така всички input-и - ако утре ти дам форма с 20 полета какво ще правиш - затова е измислен css, селекторите и класовете. Добре си задал opacity на placeholder-a за firefox.', '2019-06-10 21:59:57'),
(160, 64, 1, 2, '100.00', 'IY', 'Визуално е добре - само placeholder-ите са малко бледи. HTML: @charsetShort @semtags form и .reg-form-body могат да се обединят. @email CSS: @container @height padding: 15px 0 щеше да е по-добре вместо да нагласяш padding и height да изглеждат добре. @shorthand @borderShorthand @inputTypes @placeholderColor @bb @boxmodel', '2019-06-10 21:59:57'),
(161, 41, 1, 2, '95.00', 'IY', 'Визуално е горе-долу добре. Заглавието е по-ниско, а бутонът с по-голям шрифт. @sans HTML: dir=\"ltr\" (direction left to right) е излишно, понеже е така по default - едва ли на повечето хора ще им се наложи да пишат този атрибут освен ако няма съдържание, което да е rtl. @uppercase .registration-container можеше да е section. CSS: @vars Имаш излишно -- накрая на стиловете на root. Коментарът за padding-top на form е излишен. На input, button след като свикне човек със css ще се досети веднага какво правят и коментарите стават излишни. Между другото може да се бъркаш как работи този селектор - .registration-container input, button влючва всички input-и в контейнера и всички бутони в цялата страница - може би си искал да ограничиш и двете. .registration input е единственото място, където използваш .registration (без container) - избери си едното като префикс и бъди консистентен. Същото важи и за #registration-header - контейнера и останалите неща са класове, но само това е с id. padding: 5px дефинираш и на input и на button - може да го преместиш при общите стилове. @bb @boxmodel', '2019-06-10 21:59:57'),
(162, 85, 1, 2, '85.00', 'IY', 'Решението ти се различава от дизайна, но изглежда доста добре (като модерна форма), така че е ок. HTML: @charset Не си затворил кавичките на form[method] - в някои редактори това би проличало от различно оцветяване или на текущия или на следващия елемент. @indent @fieldset div-ът за регистрация е излишен. @uppercase CSS: Имаш прост reset и основни стилове на body - браво. Контейнерът е супер - така работи и на на малки и големи екрани - само position: relative е излишно (когато нямаш абсолютно позиционирани деца като close button например). Обикновено отрицателни margin-и са лошо нещо, но в този случай е ок - само вместо добавяне на padding-bottom можеше да махнеш долния margin (-25px -25px (2)5px щеше да свърши същата работа). width: 100 без мерна единица не прави нищо, но както виждаш явно този ред не е бил нужен. width, border, margin на h3 са излишни (затова е 2ката в предишния margin) - като цяло тези 2 елемента казахме, че трябва да са един. @important border: none щеше да свърши същата работа. Отново си разделил margin-a между няколко елемента (input, button, fieldset). Можеш да премахнеш margin, padding, width, min-width спокойно и да оставиш само border: none на fieldset-a. Алтернативно - да оставиш margin-а, но да премахнеш тези на бутона и полетата. Когато слагаш transition го слагай на самия елемент, а не на hover, focus или друг state - в момента при hover има transition, но при mouseexit няма - ако го сложиш на самия елемент ще имаш ефекта и в двете посоки. Също така при такава малка анимация (малка разлика и време) - няма да има особена разлика между ease (default easing) и ease-in-out. Като цяло има неща, които да се подобрят, но има и много неща които са супер - браво.', '2019-06-10 21:59:57'),
(163, 15, 1, 2, '80.00', 'IY', 'Визуално си много близо - браво. HTML: @spacing @charset @indent part1 - когато няма part2 е странно, legend е има на таг, но иначе не е добро като клас, cont нямам представа какво е, а butt значи нещо друго. В css има селектор за :first-child, така че .firstelem е излишно, а освен това задачата може да се реши и без специална first и last child логика. @br Задачата беше да предадете форма, но такава не виждам в html-a. Също така бутона би трябвало да е type=\"submit\" след като добавиш формата. CSS: @pxFraction Никъде не си стилизирал part1 - смисълът на контейнер е да задава размерите, а вътрешните елементи да се адаптират - в момента задаваш ширини на cont и h2 - по-добре задай на part1. Също така няма смисъл от класа legend ако не го използваш. @mixedIndent Помисли дали не може да зададеш някакъв стил на cont вместо да слагаш margins на firstelem и butt.', '2019-06-10 21:59:57'),
(164, 42, 1, 2, '100.00', 'IY', '@sans @border Иначе изглежда добре. HTML: @semtags @reqShorthand target е излишно на формата. @uppercase CSS: Можеш да напишеш border: 1px solid gray и след това border-top: none - може би е малко по лесно за четене. Формата се адаптира на малки екрани - браво за max-width. @container @containerHeight @mixedIndent', '2019-06-10 21:59:57'),
(165, 16, 1, 2, '65.00', 'IY', '@sans HTML: @charset @spacing Имаш 2 различни конвенции - dashed-case (registration-form) и lowercase (innerform) - избери си едната. Неща като txtbox повече не искаме да виждаме. @password Неща като last_name, confirmation_password могат да са стойности на name атрибута - името на полето, type е видът на полето - text, email, password. В момента name, last_name, confirmation_password не се разползнават от браузъра и fallback-ват до text - за паролата това е много лошо. @uppercase CSS: @shorthand @pxFraction @comments Селекторите могат да се опростят леко. @bb @boxmodel @placeholderColor Също така в случая си сложил прекалено много нули - някъде може и да си видял 8 цифри 16тичен запис на цвят - chrome и firefox го поддържат, но не е общоприет - по-добре го избягвай. Също така имай предвид, че последните 2 цифри са 00-ff, а не до 99 - така че 50 е доста бледо (като 0.2 opacity).', '2019-06-10 21:59:57'),
(166, 17, 1, 2, '90.00', 'IY', '@sizeColors @placeholderPale HTML: @semtags div.formtitle може да е или header или да го премахнеш. CSS: @percentWidth @borderShorthand Предполагам си сложила .formtitle с padding: 1px за да избегнеш празно пространство между заглавието и формата (margin на h1) - вместо това може просто да премахнеш margin-a на h1 и да го смениш с padding, като можеш да сложиш и фона на h1 - така няма да имаш нужда от .formtitle въобще. margin: auto също е излишно на .formtitle в момента, понеже заема 100% от ширината - центрирано или не - винаги ще има разстояние 0 от двете страни. За центриране на самия текст провилно си използвала text-align: center. @placeholderColor @bb @boxmodel', '2019-06-10 21:59:57'),
(167, 86, 1, 2, '95.00', 'IY', 'Визуално е супер. @border @sans HTML: @semtags @uppercase @email @br div.form-register и form#reg-form1003 могат да се обединят в един таг. Също така се очаква id-тата да имат някакъв смисъл - 1003 не е очевидно какво представлява - това са id-та, които играят роля на променливи - едва ли имаш int1003 като променлива в кода си. CSS: h4 има изключително сложни стилове - можеш да премахнеш всички и да оставиш просто margin: 0, text-align: center, line-height: 40px. Част от стиловете на register-header също биха станали ненужни при това положение. @borderShorthand @bbPrefix @height Имаш стилове за placeholders на edge/IE, но страницата не изглежда толкова добре при тях - отвори на IE 11 и виж защо задаване на height може да създава проблеми.', '2019-06-10 21:59:57'),
(168, 87, 1, 2, '85.00', 'IY', '@scale HTML: @doctype @charset Интересен action атрибут - знам какво ще слушам през останалите 50 домашни (autoplay). @uppercase @hr @email form и .container могат да се обединят. CSS: Очаквахме да има общ елемент отдолу, който да се стилизира, но в случая и решението ти с margin: -1px върши работа. @fontShorthand @dib За центриране можеш да използваш margin: 5px auto 15px. Може би ако махнеш hr тага ще можеш да го опростиш на margin: 10px auto. @inputTypes @removedDoctype За font-family - по-добре бъде консистентен и си избери една стойност - няма проблем тя да има и fallback тоест font-family: Calibri, sans-serif - а на деца с default-ни стойности можеш да дадеш font-family: inherit.', '2019-06-10 21:59:57'),
(169, 66, 1, 2, '75.00', 'IY', '@border @percentWidth @buttonBorder HTML: @quotes email type-ът по-добре да остане lowercase. formId не е добро id. #formId може да се обедини с .box. legend се очаква да е дете на fieldset - ако нямаш fieldset може да използваш просто h[123].  CSS: @mixedIndent Заглавието не е направено font-weight: bold. @height width на #formId е излишно. Можеш да сложиш .box стиловете най-отгоре. margin: 3% auto 0 е по-кратко и задава да е в центъра дори и да решиш да промениш ширината от 30% на нещо друго. За form-input сигурно нещо като margin: 2% 5% ще свърши подобна работа.', '2019-06-10 21:59:57'),
(170, 67, 1, 2, '30.00', 'IY', '[ 62047, 62079 ] @sans Текстът в input-ите не се чете (ако въведеш нещо). Бутонът има странен border и текстът е прекалено голям и не е центриран. HTML: @charset @title .form-head е излишно - ако го искаш поне го направи header таг. @uppercase @noTextLabel @labelFor fam и psw не са добри имена. type=\"subbmit\" също не е валидно (пише се с едно b). CSS: Добро използване на max-width. Вместо margin: 0 0 0 0 може да напишеш само 1 нула. input, button - height: auto е по default а и 7 реда по-долу го предефинираш с нова стойност - която също е излишна. @height border: none също е override-нато 10тина реда по-надолу. @borderShorthand Дефинираш стилове на fieldset макар и да не използваш такъв. button - font-style е излишно, margin-bottom: 1px не се забелязва, border-ът е излишен (none е добра стойност). Вместо да задаваш различни padding-и опитвайки се да компенсираш height от горната декларация - просто премахни height и сложи line-height: 40px или padding: 10px или подобно - колкото по-просто толкова по-добре - в момента се бориш със собствените си стилове. @container', '2019-06-10 21:59:57'),
(171, 43, 1, 2, '90.00', 'IY', 'Не е като в дизайна, но е горе-долу добре. @border @buttonBorder На input-ите също може да имаш border: 1px solid. Отдолу също може да добавиш padding-bottom на контейнера или margin-bottom на бутона, за да не е толкова близо до края. Заглавието е доста силно bold-нато - bold на обикновен шрифт би свършил достатъен ефект (font-weight: bold, font-family: sans-serif). HTML: @spacing @email Най-външния div е излишен. CSS: Поиграл си си с центрирането - за хоризонтално можеше просто да сложиш margin: auto, за вертикалното имай предвид, че в момента на по-малки екрани ще бъде отрязана горната и долната част. width: 0 на fieldset е излишно. можеше да сложиш border-top: none. @container @height @shorthand За border на input-a - border: 1px solid rgb(212, 200, 200) би свършило работа. button - можеш да махнеш position. @bb @boxmodel', '2019-06-10 21:59:57'),
(172, 68, 1, 2, '90.00', 'IY', '@uppercase Като изключим това - изглежда супер. HTML: #container и regForm могат да се обединят. @semtags b тагове не искаме да виждаме. @email divInputs не звучи добре, regInputs не звучи като един input, а (top|middle|bottom)Input не знам за какво ти трябват, но определено не трябва да съществуват. @email userSirName може би трябва да е userSurname (фамилия вместо sir име). Смесваш много конвенции - имаш regForm (camelCase) за id, email_error (snake_case), re-password (dashed-case) - избери си едно от трите. Вътрешните параграфи за грешките са излишни - можеш да сложиш id-тата на родителските span-ове, а пък на тях да им дадеш display: block и margin ако се искаш. CSS: Имаш празен блок за regForm - мисля, че си личи защо не е нужен втори контейнер. @borderShorthand За грешките - можеш да ги изброиш със запетая щом имат еднакви стилове, или по-добре - просто да сложиш display: none на .error по default. На input-ите можеш да сложиш просто margin: 5px auto или 10px auto - излишно е да си играеш за различните да е по различен начин. Също така в момента покрай грешките - когато е празна формата разстоянията не са равни, но идеята не е да ги наместваш ръчно, а просто да се направят по начин, който е скалируем и лесен за промяна. Ако искаш питай асистента си за по-лесни алтернативи. @bb @boxmodel JS: @sq @lcc Неконсистентността от html навлиза и в js-a ти - докато за html можеш да кажеш \"това не е програмен код\" - в JS не искаме да виждаме подобни случки. @mixedIndent Казахме, че предпочитаме dot нотацията - така че очакваме form.userName.value и тн. На редове 3-6 сигурно си искал запетая (можеш да изброиш var a = _, b = _, c = _) - в момента като си сложил точка и запетая - променливите userSirName и надолу не са били обявени за функцията validate и са станали глобални по default - внимавай много за такива неща. Вместо да подаваш 5 аргумента на isValidForm - можеш да направиш request обекта предварително и да го подадеш него като единствен аргумент. Ако го нямаше alert-a можеше просто да имаш return isValidForm(request). Също така тази форма е малка, но ако имаш малко по-голяма - можеш да помислиш за по-добър начин за предаването на стойностите - в момента 2-20 ред могат да се изчистят. isValid(Email|Name) не правят почти нищо - можеш да имаш просто (name|email)Regex променливи и просто да пишеш name.match(nameRegex) за проверка, но ок ако така ти е по ясно - няма проблем. Имаш глобална променлива ValidUserName, а пък променливата ValidNames я задаваш, но никъде не я използваш. Логиката за показване на грешките е много разпръсната и се повтаря - помисли за по-чиста алтернатива. Вместо да имаш регулярен израз и отделно да проверяваш дължината с други ограничения - просто обнови regex-a да е до 10 символа - тогава директно можеш да премахнеш testNames. isValidForm - вместо да имаш if (!a || !b) validNames = false - просто направи var validNames = a && b - същото важи и за останалите променливи (които също така не трябва да започват с главни букви). В случая задачата е за html & css - така че оценката е базирана на тях - похвално е, че си пробвал и js валидацията, но има още какво да се иска.', '2019-06-10 21:59:57'),
(173, 44, 1, 2, '95.00', 'IY', 'Визуално има какво да се иска - твоята форма е по-голяма* (или по-малка - зависи от екрана), но като цяло изглежда подобно. @uppercase @buttonBorder border-right на долния елемент стърчи спрямо заглавието. input-ите нямат страничен padding/indent. Бутонът е малко по-малък от другите полета. Имаш media queries - не беше задължително - браво за опита. Визуално не изглежда особено добре обаче - по-добре измисли начин (или стойности), по който формата да се оразмерява в правилната посока (смалява при намаляване и увеличава при разширение на екрана). HTML: Браво за meta[viewport] - щом искаш да изглежда добре на малки екрани това е важно. Аз бих раменил местата на form и section - добре е всяка секция да има заглавие. @closeCons id-тата може би не са ти нужни засега. За submit-a също можеш да избереш само едното class или id. CSS: Излишно си индентирал началните стилове. display: block е излишно на form - така е по default. Ако искаш да работиш с em като мерна единица - можеш да пробваш да сложиш повече неща да я използват и после да промениш само font-size-a на даден елемент. Смесването на em с проценти в момента работи, но по-лесно ще бъде ако си консистентен. @pxFraction Можеш да премахнеш width на section и ще се оправи проблема със стърченето на border-a. @boxmodel Затова бутонът ти е малко по-малък. Също така избягвай да пишеш неща като margin-left: 5%, 10% etc - вместо това може да дадеш margin: auto и то ще се центрира автоматично - ще упрости значително кода. Същото важи и за media query-тата ти - width: 90%, margin: 10% auto 0 е достатъчно - за всички долни - просто обновяваш само width. Също така може да погледнеш min-width и max-width property-тата на самата форма - могат да са доста полезни - width: 30%, min-width: 300px, max-width: 500px могат да се дефинират от самото начало и ще премахнат нуждата от всички тези media query-та - ще изглежда доста по-естествено от текущото прескачане при resize. Също така това, което правиш с (min|max)-width като условия за query-тата не е особено добре - избери си едното и направи да работи с него - в случая стиловете за max 600 могат да са default-ните и да оставиш само min-width queries. Иначе в момента на някои екрани в следствие на някакви resolution/zoom стойности - chrome може да твърди - viewport-ът ми е 600.33 или нещо подобно - виждал съм сайтове, където имат подобен проблем (обикновено 1024-1025px).', '2019-06-10 21:59:57'),
(174, 18, 1, 2, '90.00', 'IY', 'Визуално е добре. Размерите на двете регистрации са различни от дизайна - първото е по-голямо, а второто - по-малко и bold. @borderColor В получената страница виждам знак за по-голямо - явно някой html таг не е бил отворен или затворен като хората. HTML: Имаш излишен нов ред в началото на файла. Има излишен интервал в link тага. @title @uppercase @noTextLabel Бутонът за регистрация е действие, а не заглавие - можеш да махнеш h2 тага от там. CSS: Виждам width: 99% - това рядко е нещо, което се иска - вместо да замазваш проблема - потърси го и го оправи - в случая проблемът е default-ен 2px margin на fieldset-a. Вместо margin: auto можеш да дадеш margin: 0 на h1 (това е поведението което искаш). @fontShorthand @pxFraction Имаш 2 декларации на border-top: none - първата е override-ната от border: 1.5px solid #727172 - следващия път можеш просто да преместиш border-top отдолу вместо да го копираш. @inputColor box-align: center не знам къде си го видяла, но е deprecated и не е  част от стандарта - също така може би е бил придружен от display: box или нещо подобно. За хоризонтално центриране - margin: auto ти е свършило работа, а за вертикално - просто задаване на padding или line-height би ти свършило работа (това важи и за бутона). Можеш да напишеш padding: 5px вместо да повтаряш 2 пъти стойността. @bb Ти си задала border-box на input-ите, така че спокойно можеш да сложиш една и съща ширина, а не 310px и 97.5% (311px).', '2019-06-10 21:59:57'),
(175, 45, 1, 2, '90.00', 'IY', 'Визуално е добре, но не е на български. Бутонът е по-малък от другите полета. HTML: lang=\"bg\" е добре ако имаш текст на български - в момента това не е така. main тага може би е излишен, иначе браво за семантичния html - заглавието би могло и да е в h1. @uppercase @br Формата е за регистрация, не за login, така че бутонът е объркващ. CSS: Кодът ти е много прост и чист - браво. @boxmodel @quotes PHP: Браво за register.php. Ако искаш вместо <?php echo X ?> можеш да напишеш <?= X ?> (не забравяй равното).', '2019-06-10 21:59:57'),
(176, 111, 1, 2, '80.00', 'IY', '@sans Фонът нещо може би е прекалено червен, но иначе е добре. HTML: @linkIn @closeCons @email @br Да слагаш по две последователни br-та на css домашно е немислимо. CSS: @pxFraction margin: 0 е излишно на div, който няма default-ен margin. @height @containerHeight Също така можеш да дефинираш размери на формата (контейнера) и да оставиш заглавието и div-а да се адаптират сами. @quotes @inputTypes @dib @duplicate', '2019-06-10 21:59:57'),
(177, 89, 1, 2, '65.00', 'IY', 'Визуално си далеч. @border @sans @uppercase HTML: fieldset-а в момента е излишен. registerLegend също е странно id за h1. @br CSS: По-добре ако искаш формата да е на някакво разстояние - по-добре е да зададеш margin на най-външния елемент (form). @borderShorthand float: top не съществува. Имаш 2 двуеточия при font-family-то, така че се игнорира. @height @quotes Вместо да слажаш border с цвят на фона - просто сложи border: none. @boxmodel', '2019-06-10 21:59:57'),
(178, 69, 1, 2, '90.00', 'IY', '@borderColor @placeholderPale @buttonBorder HTML: @doctype @closeCons @semtags @uppercase Думата е surname, не sirname. CSS: @placeholderColor @bb @boxmodel @borderShorthand', '2019-06-10 21:59:57'),
(179, 90, 1, 2, '85.00', 'IY', 'На твоят екран може да изглежда добре, но на всякакви по-малки резолюции - това не е така. @sans @borderColor HTML: div.form-header > span може би трябва да е header > h1. @email Празните value-та са излишни. CSS: @vars @percentWidth Смяната на цвета текста без да сменяш фона е рисково - може да доведе до бял текст на бял фон ако не се внимава. Избягвай стилове като height: 100% освен ако не знаеш какво правиш. @borderShorthand @fg Селекторите и стойностите ти са сложни - пробвай да работиш само с цели проценти, а за селекторите - опитай просто да не стилизираш първото и последното дете, а да решиш проблема по друг начин.', '2019-06-10 21:59:57'),
(180, 46, 1, 2, '85.00', 'IY', '@scale Може би в мудъл си го видял намалено - в презентацията можеш да видиш оригинала (или open in new tab от мудъл). За проектите натам - не прави толкова дребни неща - това само на телефон може да е ок, а дори и там би било по-добре да е малко по-голям шрифта на текста. HTML: @metaHope p#register > b може да е header > h1. pattern-ът ти за email в момента е ок със \'@\' без други символи - сложи да има поне по един символ от двете страни (в днешно време повечето браузъри така или иначе имат default-ен pattern, който също е ок). CSS: @shorthand Можеш да напишеш margin: 10% auto 0. @pxFraction 0 е нула във всяка мерна единица - така че не е нужно да я слагаш. Също така може би избягвай ch - някои браузъри може да не го поддържат. #email - няма логика да се стилизира по специален начин email-a - ако разменя email-a и името дизайнът ти ще се счупи. @height #email, #name, #familyName, #password, #password2 както и ::placeholder вариантите им - ако добавя още 5 полета не искаш да трябва да добавяш още css - двете трябва да са възможно независими - можеш да сложиш клас на полетата или на самата форма и да ползваш .register input или просто .field (или подобно). Няма причина padding-a да бъде само за placeholder-a - сложи го на самите елементи. button - излишно е да задаваш цвят на border-a когато не искаш такъв - border: none е по-просто. @bb @boxmodel', '2019-06-10 21:59:57'),
(181, 70, 1, 2, '90.00', 'IY', 'Визално е добре. @borderColor Open Sans е малко по-игрив от шрифта в дизайна, но не очакваме да познавате такива неща - щом е sans-serif-ен - всичко е ок. HTML: @structure @closeCons @indent @br @uppercase Много javascript код имаш в html-a - ако искаш да сложиш валидация - премахни body[onload] и button[onclick] и сложи form[onsubmit] - така ще работи и ако се опитам да изпратя формата с enter. CSS: Казахме да не ползвате flex/grid, но тъй като го ползваш само за центриране на резултата, а не за решението на задачата - ок. section#form звучи странно, padding-top е излишно. Във form_title си дефинирал margin-top 2 пъти в рамките на 5 реда. @shorthand margin: -1px -1px 15px и няма да се повтаряш. @ffInherit @duplicate @bbPrefix JS: email, [fl]name, (confirm_)pass, i са станали глобални променливи, понеже нямаш var/let/const декларации за тях. @lcc Вместо да слушаш за enter и да натискаш бутона - просто слушай за submit на формата. @indent Щом ползваш let - можеш да ползваш и array#ForEach на 64-68 [\'email\', __].forEach(registerSubmitListener). Помисли и validate_form дали не може да се оптимизира. Можеш и да ползваш field.setCustomValidity вместо да имаш толкова много alerts. Регулярните изрази можеш и да ги сложиш като pattern атрибут в html-a.', '2019-06-10 21:59:57'),
(182, 113, 1, 2, '60.00', 'IY', 'Визуално има какво да се иска. @sizeColors @border @sans Заглавието е по-тясно от input-ите. HTML: @langEn @title @semtags Имаш много излишни div-ове и класове. .mr-auto, .pad-tb-10, .text-center - тези класове са все едно сте ги написали inline (като style атрибут). За някои компании такъв подход работи, но по този предмет искаме да видим, че можете да пишете стиловете по класическия начин. Задачата е проста - този код е далеч от прост и чист. id-тата също засега не ти трябват. @uppercase Също така - повечето id-та са camlCase, но други са dashed-case, класовете също са dashed - избери си едно и бъди консистентен. CSS: Не си махнал margin-а на h3-то, добавил си още padding отгоре. input-ите и бутоните са по-широки от родителя си - това не е добре. Вместо да премахнеш border-a на бутона си го направил да е със същия цвят като фона. @container @bb @boxmodel', '2019-06-10 21:59:57'),
(183, 91, 1, 2, '40.00', 'IY', '[ 62070, 62073 ] Визуално сте близо. @border @buttonBorder HTML: @closeCons @semtags @uppercase @br CSS: @containerHeight На header-a може да сложиш margin: 0 и line-height: 3em - вместо да задаваш стойностите една по една и да събираш height с padding и да нацелваш центъра. По-добре ще изглежда ако самите input-и имат padding вместо само placeholder-ите. @boxmodel Затова бутонът в момента е малко по-малък. Решението е добро, но работете сами.', '2019-06-10 21:59:57'),
(184, 47, 1, 2, '100.00', 'IY', 'Визуално е супер. Бутонът ти е с 1 пиксел по-широк от полетата, но повечето хора не биха забелязали. HTML: @uppercase Като изключим това - нямам забележки ком html-a. Можеше да се сложат name атрибути на полетата на формата, но докато не се добавя функционалност не е задължително. CSS: @mixedIndent Браво за max-width, но max-height не е добре. @containerHeight @fontShorthand @ffInherit. h1 - border, box-sizing могат да се махнат спокойно. .registration-form също няма нужда от margin и box-sizing - ако искаш попитай асистента си за поведението на block елементите когато нямат зададени размери. @inputBg letter-spacing не беше нужно, но явно си искала да си максимално близо до картинката - браво за старанието. @bb @boxmodel Ти си задала border-box на бутона, който така или иначе го е имал, но си забравила да го сложиш на input-ите откъдето идва проблема.', '2019-06-10 21:59:57'),
(185, 20, 1, 2, '100.00', 'IY', 'Визуално е супер. @placeholderPale HTML: @closeCons Вътрешните div-ове са излишни. input_fld не е особено добро име и не го използваш в css-a - можеш просто да сложиш display: block на input-ите. @email CSS: @containerHeight @shorthand padding: 12px 0 и margin: -1px -1px 0 са еквивалентни на текущите стойности. Браво за стиловете на input - това се очаква - да може да кажа - намали контейнера на 360 пиксела и да промениш само 1 ред css. @inputTypes @placeholderColor @quotes', '2019-06-10 21:59:57'),
(186, 114, 1, 2, '40.00', 'IY', '[ 62070, 62073 ] Виж ревюто на Любослав. HTML: Оригинално id-тата и класовете бяха само dashed-case - ако ги променяш на camelCase - промени ги навсякъде. submit-button е по-ясно от btn-success. CSS: font-family на h3 е излишно, понеже си го дефинирала по-долу общо за бутона и заглавието. Добре си сложила border-a на долния елемент, но не си премахнала горния border. Останалите коментари виж в другото ревю.', '2019-06-10 21:59:57'),
(187, 92, 1, 2, '90.00', 'IY', 'Визуално си близо. @space HTML: @doctype @title @semtags @uppercase CSS: @manySizes @containerHeight В момента височината всъщност не играе роля, понеже не е зададено overflow property - реално съдържанието излиза от form тага ако го погледнеш в инспектора. Задаване на подобни стилове на div не е добра идея - той е таг, който често се използва на много места - по-скоро можеш да го промениш на нещо като h1. Вместо margin: auto може би искаш margin: 0, padding можеш да зададеш padding: 7px 0, а width можеш да премахнеш. fieldset - @borderShorthand Също така разчиташ на default padding-а на fieldset - може да зададеш стойност по-близка до дизайна. @dib @removedDoctype', '2019-06-10 21:59:57'),
(188, 71, 1, 2, '80.00', 'IY', 'Визуално се различава от дизайна основно по размерите, но иначе е ок. HTML: @semtags .registration > .head не се вписват като класове - другите са form-something. submitButton пък дори е camelCase. @uppercase @email CSS: @dib @shorthand Няма смисъл да повтаряш 2 еднакви стойности. @fontShorthand width: 100% е излишно на .head. @inputTypes @outline Всички други колеги, които са стилизирали :focus по някаква причина харесват #ddd като цвят - при теб той е бял, но това е по default - ефективно си премахнала всякакви стилове за фокус. @ffInherit @bb @boxmodel', '2019-06-10 21:59:57'),
(189, 115, 1, 2, '75.00', 'IY', 'Визуално си далеч (поне на повечето резолюции). @sizeColors @border @buttonBorder HTML: @title Някои елементи са camelCase, други lowecase, имената пък имат dashed-case и snake_case - направи избор и бъди консистентен. .regContainer и form тага могат да се обединят. @email Бутонът има #submitbutton, но и опит за 2 класа - inputField и registerbtn - и двата класа съм виждал и в други домашни - ако копираш нещо провери какво е то. Иначе ако все пак си искал и двете (малко вероятно, понеже второто не го ползваш) - можеш да ги изброиш с интервал в атрибута class=\"inputField registerbtn\".  CSS: @percentWidth position: relative има смисъл само ако използваш някоя от top, right, bottom, left, z-index стойностите или ако имаш абсолютно позициониран наследник. #inputs - можеш да използваш margin: 5% auto, за да е центирано винаги (макар, че и сега е ок). Имай предвид, че вертикалните margin-и използват проценти от ширината. width: 100% е излишно на #regheader. Можеш да не повтаряш стойностите - padding: 2% 0 е същото като твоето. @dib color: blue изглежда странно в днешни дни. background: #ghostwhite не е валидно - # е само за 16тичния запис - не се пише за имената. Също така за цветове като #339966 - можеш да напишеш само #396 - това работи на всички браузъри и е еквивалентно.', '2019-06-10 21:59:58'),
(190, 48, 1, 2, '65.00', 'IY', 'Макар и да няма разлика за браузъра - от години никой не ползва htm - използва се html. Визуално може да си близо, но на точно определена резолюция. border-ът не е solid. @buttonBorder font-size-ът на заглавието също се различава. HTML: @title @uppercase @indent Нямаш нужда и от fieldset и от div вътре - остави едното. @noTextLabel @labelFor @br Очакваме padding/indent чрез css на самия input, а не интервали във placeholder атрибута. @email CSS: Кодът за центриране (html, body etc) е излишен, но нищо - поупражнил си се. @percentWidth fieldset - можеше да сложиж border: 1px solid gray и след това border-top: none. @fontShorthand height и vertical-align са излишни на header. @va @shorthand button - margin: 5px auto 20px би било по-добре. @placeholderColor @bb @boxmodel', '2019-06-10 21:59:58'),
(191, 93, 1, 2, '30.00', 'IY', '[ 62047, 62079 ] Погледни ревюто на Тодор. CSS: За разлика от max-width - max-height е излишно - просто намали долния padding така, че да изглежда добре. @containerHeight Първо си задала border-width, но после си го override-нала с border: solid 1px - обърни двата реда, остави само border-style: solid или напиши просто border-top: none отдолу.', '2019-06-10 21:59:58'),
(192, 49, 1, 2, '60.00', 'IY', '1 ден закъснение. Предала си и нулевото домашно в зипа. HTML0: @charset За това домашно не беше нужно, но може като имаш толкова div-ове - някои от тях можеха да са section. Храни - чийзкейк (не чийзкейс), виното не знам дали се брои, но е с caps lock, така че явно е важно. Линкът не е нужно да е в h2. Браво за noreferrer - може да добавиш и noopener. Структурата на html е html > head + body - това е различно от header + _ + footer - всичкото съдържание, което искаш да се покаже в страницата трябва да е в body (footer е след него при теб). Реферираш стилове в горна папка, но явно искаш файла от същата папка - за домашните гледайте да са отделно стиловете - в момента в styles имаш и за двете домашни - сега е ясно кое за какво е, но е важен принципът. Иначе принципно първото домашно се проверява от друг асистент - ще видя дали той ще е ок с толкова късно предаване - може би просто ще имаш намалени точки заради закъснението. VIEW: Визуално си сравнително далеч, но може би още се учиш. Можеш да помолиш асистента да ти покаже как да пуснеш eye dropper-a (color picker-a) на браузъра и да си вземеш цветовете от дизайна. @border @sans При теб имаш и отгоре и отстрани на заглавието. HTML: legend се очаква да е дете на fieldset. @uppercase JS: Принципно дали полето е празно - ако махнеш своята валидация - браузъра принципно сам проверява. @sq Не слагай интервали между името на функцията и аргументите, които я извикваш (alert и отварящата скоба). @lcc CSS: @percentWidth @height @shorthand margin: 13px auto е по-четимо от 3 отделни стойности. @quotes Вместо antiquewhite можеше да използваш истинско бяло. @bb @boxmodel', '2019-06-10 21:59:58'),
(193, 21, 1, 2, '65.00', 'IY', 'Визуално е горе-долу добре. Може би разстоянията можеха да са малко по-близки до дизайна, но нищо. HTML: @indent @charset @title Отворила си линк таг, но няма въобще затваряща > - това директно е невалиден html - просто браузърите са умни. @br @brClose @email @password CSS: @shorthand padding: 10px 5px е по-лесно за четене от 4 реда. @borderShorthand @containerHeight .head-reg - @fontShorthand @bb @boxmodel', '2019-06-10 21:59:58'),
(194, 116, 1, 2, '85.00', 'IY', 'Визуално е много добре. @placeholderPale @borderColor @buttonBorder HTML: @indent @semtags В текущия си вид - .box и form могат да се обединят - алтернативно можеш да направиш box да съдържа и заглавието. div.heading може или да е header или да изчезне. CSS: @container @shorthand margin: 0 auto, padding: 2px 0 са по-прости. @h1Reset Тогава шеше да изчезне и нуждата за .heading. @fontShorthand @borderShorthand @placeholderColor', '2019-06-10 21:59:58'),
(195, 22, 1, 2, '85.00', 'IY', 'Визуално е ок (на правилната резолюция). @borderColor @buttonBorder HTML: @closeCons #form-head > span може да е header > h1. CSS: @percentWidth @fontShorthand @fg Ако не е ясно как да се реши без тях - питай асистента си.', '2019-06-10 21:59:58'),
(196, 95, 1, 2, '30.00', 'IY', '[ 62008, 62088 ] Виж ревюто на Йоанна. HTML: @indent @spacing size=\"35\" няма смисъл на submit бутона - размера трябва да се определи от css. CSS: font-weight: bold на заглавието е добре. Развалената индентация - зле. cursor: pointer - пак добре.', '2019-06-10 21:59:58'),
(197, 96, 1, 2, '50.00', 'IY', '@renamedCss @sans @borderColor HTML: Няма да получиш екстра точки за използване на html4 - на упражнения преподаваме html5 и очакваме него като домашни и проекти. Също така използваш let, boxShadow, които не са били налични по времето на html4. @langEn @charsetShort @closeCons @title \"Title goes here\" не се признава. @quotes @semtags @uppercase Задачата беше да предадете форма - но не виждам form таг в html-a. JS: задачата може да се реши и с ES5 (без let). Няма нужда password да е на толкова външно ниво. Използваш addEventListener на едно място, така че можеш да го ползваш и за change и click event-ите. Слагай интервали около операторите в кода. Кодът за boxShadow се повтаря 3 пъти - измисли по-добро решение. Точка и запетаите - или ги слагай навсякъде или никъде. Когато имаш форма можеш да се закачиш за submit event-a вместо за клик на бутона - може някой да изпрати формата и натискайки enter. Имаш глобална променлива password, но само и задаваш стойността - никъде не я четеш. Накрая след толкова логика няма сравнение на 2те пароли. CSS: @fg Ползваш flex, имаш контейнери, но все пак накрая бутонът е по-малък от полетата. Погледни box-sizing property-то и си опрости кода - използваш го в p (макар и там да не е нужно). @va Не са премахнати default margins на p - margin: 0, line-height: 40px може да смени почти всичките ти стилове за него. Дефинираш padding-top 2 пъти в рамките на 3 реда - първата стойност щеше да е override-ната даже и да беше валидна (margin: auto е валидно, но padding няма такава стойност).', '2019-06-10 21:59:58'),
(198, 117, 1, 2, '40.00', 'IY', 'Визуално си много далеч. @sizeColors @border Нямаш добър контраст между цвета на формата и на фона. Не се виждат placeholder-ите. HTML: @indent form-wrap съдържа само формата - може би нямаш нужда от него. CSS: @minified Ако ти си писал кода - най-вероятно лесно си могъл да направиш нещо близо до pixel perfect. Бял текст на бял фон за placeholder-ите не е особено добра идея - в момента няма label-и, които да кажат кое поле какво е - не знам как би очаквал потребител да има идея.', '2019-06-10 21:59:58'),
(199, 72, 1, 2, '85.00', 'IY', 'Визуално е добре. @borderColor Размерът на заглавието може би също може да се подобри. @uppercase HTML: @quotes Не слагай запетаи между атрибутите. .formTitle можеше да е h[123] таг или header. CSS: @containerHeight @height Имай предвид и че когато задаваш размери в проценти - те могат да бъдат част от ширината - затова най-добре в случая остави form(Title|Fields) да се адаптират сами - сложи им просто някакъв padding. @ffInherit Имаш общи стилове между submit и останалите полета - пробвай да не се повтаряш. position: relative и left са излишни - просто сложи margin: auto и ще се центрират. Като цяло ако не се чувстваш комфортно със css - по-добре работи с пиксели, а не с проценти.', '2019-06-10 21:59:58'),
(200, 50, 1, 2, '95.00', 'IY', 'Визуално е супер. Arial Black може би е прекалено дебел, но нищо. @borderColor HTML: @closeCons @uppercase fieldset > div може би няма нужда от двете. Шаблонът ти изисква email-ът да завършва на .com - има много валидни пощи, които няма да минат yahoo.de например. Нямаш интервал преди първия required атрибут. CSS: Не е нужно да центрираш формата, но ок. В случая height е нужно за центрирането, но иначе не е добра идея - ако добавя още полета ще трябва да променяш css-a. @va @height display: table на input и .button е излишно - вместо това просто намали margin-ите. @boxmodel В момента input-ите са малко по-големи заради border-a. @outline', '2019-06-10 21:59:58');
INSERT INTO `mark` (`mark_id`, `student_id`, `category_id`, `stage`, `mark_value`, `author`, `comment`, `time_stamp`) VALUES
(201, 118, 1, 2, '40.00', 'IY', '@cssFile Визуално си далеч. Винаги има хоризонтален скролбар независимо от резолюцията. @sizeColors @border @buttonBorder HTML: @indent @title @charset @spacing @email @password div.wrapper е странно да съдържа само бутона. CSS: Имаш празна декларация на *. Стилизираш пароли, въпреки че нямаш такива - ще приема, че е било копирано от друг човек. @dib @bb @boxmodel По същата причина и имаш скролбар - input-ите са 100% широки, но имат по още 19 пиксела от всяка страна - следвайки в 38 пиксела за скролиране винаги.', '2019-06-10 21:59:58'),
(202, 23, 1, 2, '60.00', 'IY', '1 ден закъснение. Визуално има какво да се иска. @sans @space @borderColor @buttonBorder HTML: Имаш излишен интервал в <html>. @charset @br CSS: @dib @height На 2 места слагаш align-content: center на input-ите - не прави нищо. @container В момента заглавието е по-широко от долния елемент. Вместо #ok можеше да използваш input:first-child margin-top или по-добре - просто padding-top на div-а, който играе роля на контейнер на полетата. Вместо да нагласяш бутона да е широк колкото default-ен input - задай размер и на двете според дизайна. Може да сложиш малко padding на полетата. Като цяло разгледай малко информация за boxmodel-а, понеже не виждам никъде padding.', '2019-06-10 21:59:58'),
(203, 119, 1, 2, '70.00', 'IY', 'Визуално си далеч. HTML: @indent @uppercase Няма нужда от definition list - просто сложи display: block на input-ите. CSS: @dib @duplicate @inputTypes По-добре стилизирай container div-а, а не body тага. @shorthand dl - padding: 2.5% 5% е една идея по-просто. @borderShorthand Добро използване на max-width.', '2019-06-10 21:59:58'),
(204, 51, 1, 2, '85.00', 'IY', '@buttonBorder Текстът е труден за четене - иначе дизайнът е добре. HTML: @langEn @closeCons Вътрешния section е излишен (добре е всеки section да си има заглавие). position=\"relative\" - явно е било опит за стил във html-a - това става като напишеш style=\"position: relative;\", но не го прави. CSS: position: relative е излишно - то има смисъл само ако имаш дете с position: absolute (ти имаш, но и него не трябва да го има за това домашно). letter-spacing-ът поне при мен не изглежда добре. font-weight: 5000 не е валидна стойност - те са от 100-900, но най-добре просто използвай думи - normal, bold etc. @inputTypes Ти всъщност дори имаш и email - ако добавя телефон, дата и тн - не мисля, че ще искаш кодът ти да расте. @bb @boxmodel 700 13px Courier New с намален letter spacing е напълно нечетим за мен - 14px sans-serif мисля, че ще е по-четим.', '2019-06-10 21:59:58'),
(205, 120, 1, 2, '30.00', 'IY', '[ 61978, 62101 ] Работили сте заедно - погледни ревюто на Радослав.', '2019-06-10 21:59:58'),
(206, 24, 1, 2, '85.00', 'IY', 'Визуално може и по-добре и по-зле. @sans @uppercase @border @buttonBorder HTML: @doctype @charset @title @noTextLabel Нямаш интервал преди type=\"submit\". @indent CSS: Вместо text-indent можеше да използваш padding - така можеш да дадеш разстояние от всички страни. @container Вместо да използваш label-ите като съдържание между блокови елементи (действащо като празен нов ред) - просто задай margin на input-ите. .reg - не забравяй мерните единици когато пишеш размери (освен ако не са 0). Бутонът няма border: none, но header-ът (който принципно няма border) - има. Сложил си ширина на header 470px въпреки, че родителят е 300 пиксела. Вместо да задаваш width, height, display: table-cell, vertical-align - можеш просто да задеш line-height: 50px или padding: 15px.', '2019-06-10 21:59:58'),
(207, 121, 1, 2, '60.00', 'IY', '[ 61928, 62105 ] Имам съмнение, че може да сте работили заедно, но кодът ви се различава, така че няма проблем. Визуално сте доста далеч. @sizeColors @border @uppercase HTML: xmlns не е нужно за html5 - кодат ти не е xml compatible така или иначе в момента - имаш незатворени самозатварящи се тагове, както и атрибути без стойности. @closeCons @indent form и div.container могат да се обединят, а div.title може да е header таг. @email CSS: Добри базови стилове на body и *. width: 100% и border: none са излишни на .title. @inputTypes @dib', '2019-06-10 21:59:58'),
(208, 97, 1, 2, '90.00', 'IY', 'Визуално е супер - някои разстояния и цветът на border-a можеха да са по-близки до дизайна, но нищо. HTML: @closeCons @green Също така - не си го използвал на бутона, където също се очаква да го искаш. div > span > b може да е header > h1 или просто h[123]. @email @password CSS: Ако имаш клас green - остави само релевантни стилове като color, background и може би text-align и/или margin - другите ги премести. Дефинираш uppercase на 2 места. @height В момента правиш трикове като височина на един елемент, падинг, както и margin на вътрешен елемент - всичко това можеше да е един таг и просто да има line-height: 40px и margin: 0. @dib text-indent, height (2те декларации), дуплицираните margin-и могат да се премахнат от бутона. @shorthand Когато имаш една кратка декларация се очаква да я обновиш, а не да пишеш още отдолу - margin: 10px auto е това, което ти е трябвало. @bb @boxmodel', '2019-06-10 21:59:58'),
(209, 25, 1, 2, '100.00', 'IY', 'Визуално е супер - някои пропорции можеха да са малко по-различни (по-тесни и по-високи), но нищо. HTML: @title @indent @spacing @email CSS: Имаш код, стилизиращ input - на две места. Браво за shorthand стойностите. Реално единствените ми забележки са към html-a - css-ът е супер.', '2019-06-10 21:59:58'),
(210, 98, 1, 2, '70.00', 'IY', 'Интересно - има още един Стефан Николов (62064) в курса - замалко да ти открадне оценката - добре, че файлът ти е с правилното име. Визуално си далеч. @sizeColors border-ът не трябваше да стига до горе. @buttonBorder И бутона и заглавието не са вертикално центрирани. HTML: @semtags div > span > strong можеше да е h1 или header > h1. Оставяш много празни редове. CSS: Всичко е индентирано 2 или 3 нива вместо 0 и 1. @va @containerHeight @borderShorthand @inputTypes @shorthand Можеш да напишеш margin: 1.9% 2.9% и ще е еквивалентно на твоето - също така гледай да работиш с повече цели стойности. width: auto е излишно, понеже е по default. div - просто можеш да сложиш line-height: 40px вместо да казваш 10% - помисли ако добавя още 5 полета би ли искал заглавието да стане 2 пъти по-високо. display: static не съществува - position: static е по default и не е нужно да го пишеш. @duplicate @bb @boxmodel', '2019-06-10 21:59:58'),
(211, 122, 1, 2, '50.00', 'IY', 'За 100% ширина на някой таблет ще изглежда добре - за съжаление не отговаря на дизайна обаче - неслучайно снимката включваше и бяло пространство отстрани. Очевидно в този дизайн border-ът липсва. Текстът на бутона изглежда малък на фона на останалите елементи. HTML: @doctype Липсват html, head, charset, title, body. Очевидно link не е в head, а останалото не е в body. @indent @uppercase @email name атрибутите ти са email, име, фамилия, pass и pass - остави всичко на английски и може би промени втората парола. CSS: Интересно - \"Add padding to containers\" е много чест коментар, почти няма хора обаче, които са писали други коментари освен него. Не виждам да имаш втори контейнер също така. @inputTypes Обикновено стиловете, които играят роля на reset (като head, body) се слагат в началото. И тук индентацията е зле.', '2019-06-10 21:59:58'),
(212, 73, 1, 2, '80.00', 'IY', 'Визуално има какво още да се подобри по отношение на размерите. HTML: Имаш излишен интервал в <html> и <form>.  @indent @reqShorthand Ако искаш можеш да смениш името на втората парола. @closeCons .in и #top са излишни - за второто има first-child (или padding на родителя), а първото е ок стига да има по-смислено име. @uppercase Имаш референция към js файл, но не си го предал - или го предай или просто не го реферирай. CSS: @indent @container @fontShorthand @height Ако просто зададеш само padding или line-height на h3 - няма да има нужда да нацелваш пикселите, за да стане по средата. Във hover стиловете задаваш 3 стойности еднакви на оригиналните и сменяш само 1 стойност - остави само нея, другите ги махни. Както споменахме - вместо margin-top на #top можеш просто да сложиш padding-top на form тага. padding-inline-end е излишен - в момента той просто override-ва padding-right на 50px вместо 5px - едва ли ще имаш rtl (right to left) текст или ветрикален, така че това е безсмислено. Също така няма логика отдясно да има толкова padding - ако искаш елемента да е по-голям - просто му задай width. Също така в момента бутонът е по-широк. Ако си бил задал еднакви ширини, а са изглеждали различно - погледни box-sizing: border-box. @boxmodel', '2019-06-10 21:59:58'),
(213, 26, 1, 2, '50.00', 'IY', 'Визуално си много далеч. @sizeColors @border На малко по-малък екран - съдържанието се скрива - и вертикално и хоризонтално няма скролбар и просто става недостъпно. Няма причина заглавието отгоре да има cursor: pointer. HTML: @doctype @indent @structure За имената - използвай camelCase, dashed-case, snake_case или нещо подобно - просто lowercase не е добре. span.registrationlabel можеше да е h[123] таг или legend в случая. @uppercase С тази индентация е трудно да се ориентирам - имаш отворен fieldset и в него div, след това затваряш fieldset-а и след това div-а - влагането не работи така представи си го като отваряне и затваряне на скоби - не пишеш ([)]. @noTextLabel Слагането на празен b таг не помага - също така не ползвай b тагове. @labelFor @email td е клетка на таблица и като такава - трябва да е дете на таблица или ред в таблица. Също така не виждам таблични данни, така че не трябва да има таблица и подобни тагове. align=\"center\" е стар атрибут отпреди да се появи css - идеята е html да е съдържанието, а дали нещо е центрирано, вляво или вдясно - се решава от css. CSS: @dib @inputTypes @duplicate Първоначално си задал ширина 100%, после я променяш на 850px, като copy-paste-ваш кода за 2та вида input. Имаш backtick в първия блок за text - реално color атрибутът ти не работи поради тази причина, понеже кавичката се разглежда като част от името на атрибута. Също - ако имаш нещо с ширина 100% и добавиш padding - то ще стане повече от 100% понеже по default padding-ът е извън дефинираните размери - ако добавиш box-sizing: border-box ще промениш поведението да включва и padding + border. width и height на body са излишни. За центриране на формата можеш да и дадеш margin: auto. align: center не съществува в css - има text-align. overflow: hidden в момента скрива проблем, а не го премахва - в такива ситуации елиминирай проблема, а не го замазвай - в случая си задал 100% ширина и височина на body, но то има 8px margin по default - правейки 16 пиксела за скролиране и в двете посоки независимо от екрана. В html си написал formconatiner вместо formcontainer - затова стиловете не работят. Също така 4те стойности на border можеш да изброиш за border-width - само border е shorthand за width style color. width и height: auto не правят нищо в случая, width след това и си го override-нал 3 реда по-надолу. justify-content и align-items също ги имаш по 2 пъти, но те работят само за flex/grid - тях ще разгледаме на css част 2. margin-bottom бих казал, че също е излишно на #maincontainer в момента. cursor, margin, opacity, vertical-align - можеш да ги махнеш от .registrationlabel. @va Явно не лъжеш като казваш firstcss.css - няма проблем - още се учиш - на изпита (проекта) ще покажеш колко много си научил дотогава.', '2019-06-10 21:59:58'),
(214, 124, 1, 2, '10.00', 'IY', '[ 855286, 855287 ] Работили сте заедно - особено когато сте последни като факултетни номера и сте 2 поредни номера не знам как очаквахте да не забележим. Ще према, че Васка е източникът, понеже има по-малко грешки. При теб заглавието е по-ниско и по-широко, полетата са bold, а бутонът ти е отместен по неприятен начин. HTML: Добавила си title - браво. @closeCons Премахването на затварящия div таг обаче е лоша идея - ако искаш да премахнеш таг - махни и отварящия и затварящия. Класовете field са ок. CSS: @ffInherit В момента font-family и font-weight се повтарят 4 пъти - програмистите не е добре да се повтарят. Увеличаването на заглавието с 3 пиксела е лоша идея. Използването на класове е ок. @borderShorthand', '2019-06-10 21:59:58'),
(215, 125, 1, 2, '70.00', 'IY', '[ 855286, 855287 ] Работили сте заедно - особено когато сте последни като факултетни номера и сте 2 поредни номера не знам как очаквахте да не забележим. Ще према, че ти е източникът, понеже имаш по-малко грешки. Визуално си супер - само бутонът ти е отместен наляво (и е малко по-широк). HTML: @title Можеш да сложиш .header в .box. .box може да е section, а .header - header или h[123] таг. Формата има само един div като дете - следователно можеш да го махнеш. Вътрешните div-ове и label-и също са излишни - вместо това просто сложи display: block и margin на input. @noTextLabel CSS: Добре - явно разбирам защо ползваш толкова много div-ове - вместо обаче да разчиташ на много вложени div-ове - просто стилизирай нещата със разстоянията, които ти трябват (а не да имаш 3 div-а, за да получиш 15px padding). Също така подобни стилове на самия таг не е добра идея - той се ползва често на много места - няма да е само във тази форма - представи си че кажа - утре сложи формата посредата на някаква landing страница на продукт. .header в момента е div, така че ако не беше горния стил - нямаше да ти се налага да пренаписваш margin-bottom. @shorthand padding: 10px 5px е по-кракто от текущото изброяване. @fontShorthand @container @pxFraction Можеш да дадеш display: block и margin: 10px auto на бутона и полетата и много стилове и тагове щяха да станат ненужни. @bb @boxmodel', '2019-06-10 21:59:58'),
(216, 3, 1, 3, '0.70', 'NG', '0. Не е препоръчително да използваш Bootstrap. На проекта няма да имаш право да го ползваш. Избягвай смесването на HTML и  PHP на едно място.                                                                                                                                                    1. HTML - Използвай семантичен HTML. Избягвай използването на атрибути като min, max, maxlength и onclick. Учили сме как да обработваме събития с JS. Валидацията за максимална дължина на въведения текст в input полето също може да стане в JS и в PHP.  Таговете <scipt> и <style> по принцип се поставят в <head>.                                                                                             2. JS - Опитай се да използваш консистентно или само единични, или само двойни кавички, както и стриктно сравнение с \"===\".                                                      3. PHP - Хубаво е преди да започнеш каквато и да било обработка на данните, първо да проверяваш дали реално имаш изпратена заявка. Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Липсва валидация за непопълнени полета. Идеята беше съобщенията за грешки да бъдат изпратени от сървъра към потребителя, както и да се укаже какви точно грешки са открити.', '2019-06-10 22:00:09'),
(217, 4, 1, 3, '0.30', 'NG', '0. Избягвай смесването на HTML, CSS и PHP на едно място.  Идентирай си по-добре кода.                                                                                                                                          1. HTML - Използвай семантичен HTML.  Избягвай използването на атрибути като width, border, align, cellpadding, cellspacing, чието действие можеш да постигнеш със CSS.                                                                                                       2. PHP - Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen().   Опитай се да използваш консистентно навсякъде само един вид кавички, както и стриктно сравнение с \"===\". Липсва даденият масив. При изпращане на формата не се случва нищо.', '2019-06-10 22:00:09'),
(218, 75, 1, 3, '0.30', 'NG', '0. Дава грешки при изпълнение. Избягвай смесването на HTML и PHP на едно място. Идентирай си по-добре кода.                                                                          1. HTML - Използвай семантичен HTML. Избягвай използването на атрибути като required, min, max, maxlength, чието действие може да бъде постигнато и с JS и PHP. Хубаво е валидацията да става изцяло в back-end-a, а и такава беше идеята на домашното. Избягвай използването на атрибута style, чието действие можеш да постигнеш със CSS.                                                             2. PHP - Липсват валидация и дадения масив.', '2019-06-10 22:00:09'),
(219, 100, 1, 3, '0.10', 'NG', 'Идеята беше валидацията да става в PHP, а не в JS, както е при теб. Хубаво си ползвал БД, въпреки че тук не се изискваше да се използват, но можеше да предоставиш и код за конфигурация на БД, за да мога да я подкарам и при мен. Опитай се да си разделиш кода на отделни модули и да не смесваш на едно място HTML, JS, PHP. Идентирай си по-добре кода. При изпращане на правилно попълнена форма, изкарва грешки и нищо не се случва.                                                                                                                                            1. HTML - Използвай семантичен HTML. Използвай utf8 encoding.                                                                                    2. JS - Избягвай използването на alert.                                                                                    3. PHP - Хубаво е при обработка на заявки в PHP винаги първо да проверяваш дали имаш записано нещо в суперглобалната променлива $_POST и съответно дали има елементи в $_POST с очаквания ключ.                                                                           ', '2019-06-10 22:00:09'),
(220, 77, 1, 3, '0.80', 'NG', 'Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Като откриеш грешки при валидация, изкарвай само грешките, без попълнените данни. Липсва масивът със студенти, даден в условието, както и сортировка.', '2019-06-10 22:00:09'),
(221, 7, 1, 3, '0.70', 'NG', '1. HTML - Използвай семантичен HTML.В script тага използвай атрибута defer, за да избегнеш зареждането на скрипта преди парсването на HTML йерархията.                                                                                                                                   2. JS -  Не е препоръчително да използваш JQuery. Гледай в другите домашни и в проекта да не гo използваш.                                                                     3. PHP - Хубаво е при обработка на заявки в PHP винаги първо да проверяваш дали имаш записано нещо в суперглобалната променлива $_POST и съответно дали има елементи в $_POST с очаквания ключ. Очакваше се да се изведат всички открити грешки при валидация на полетата от формата, а не само една. Липсва проверка за непопълнени полета. Масивът не е сортиран. Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Опитай се да използваш консистентно или само единични, или само двойни кавички.', '2019-06-10 22:00:09'),
(222, 54, 1, 3, '0.80', 'NG', '1. HTML - Използвай семантичен HTML. Като стойност на атрибута action на тага form задай само името на php файла, който ще ти обработи данните от формата, тъй като е в същата директория и не е нужно да указваш целия път (по този начин се получава объркване и файлът не може да бъде намерен).   Табулирай си малко по-добре HTML йерархията. Липсва ти отварящ таг html.   В script тага използвай атрибута defer, за да избегнеш зареждането на скрипта преди парсването на HTML йерархията.                                                                                                                                                                                           2. JS - Методът open за отваряне на асинхронна връзка с AJAX към сървъра като втори параметър приема само пътя до скрипта, който ще ти обработи заявката. Не трябва да задаваш \"http://localhost\" преди това. Така адресът не може да бъде намерен и нищо не се случва. Не зачиствай формата, когато някое от полетата е невалидно. Не е много user friendly, когато излезе съобщение за невалидно поле, потребителят да трябва да попълва всичко наново.  При сравнение е по-добре да използваш т.нар. \"умно\" сравнение.                                                                                                                                               3. PHP - Хубаво е при обработка на заявки в PHP винаги първо да проверяваш дали имаш записано нещо в суперглобалната променлива $_POST и съответно дали има елементи в $_POST с очаквания ключ.Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Опитай се да използваш консистентно навсякъде само един вид кавички.', '2019-06-10 22:00:09'),
(223, 78, 1, 3, '0.60', 'NG', '0. Избягвай смесването на HTML и PHP на едно място.                                                      1. HTML - Използвай малко повече семантичен HTML. Submit бутона е по-добре да е input от тип submit.                                                                                                       2. JS - Идентирай си малко по-добре кода.                                                                               3. PHP - За да използваш типове, в началото трябва да напишеш declare(strict_types=1);. Хубаво е при обработка на заявки в PHP винаги първо да проверяваш дали имаш записано нещо в суперглобалната променлива $_POST. Липсва проверка за непопълнени полета. При изпращане на формата нищо не се случва.', '2019-06-10 22:00:09'),
(224, 8, 1, 3, '0.50', 'NG', '0. Предадено с 1 час закъснение. Опитай се да използваш консистентно навсякъде само един вид кавички.                                                                                                  1. HTML - Използвай семантичен HTML. Избягвай използването на атрибути като onsubmit, required и style.  В script тага използвай атрибута defer, за да избегнеш зареждането на скрипта преди парсването на HTML йерархията.                                                                                                                                       2. JS - Не е препоръчително да използваш JQuery. Гледай в другите домашни и в проекта да не гo използваш.  Не виждам смисъл от JS кода, който е в <script> тага.                                                                                                                           3. PHP - По-добре валидацията не я прави в самия конструктор на класа.  Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen().   Опитай се да използваш  стриктно сравнение с \"===\". Липсва даденият масив, както и валидация за непопълнени полета. Не се извеждат съобщения за открити грешки при валидация. Сортировката не се извършва по указания начин.', '2019-06-10 22:00:09'),
(225, 29, 1, 3, '0.30', 'NG', '1. HTML - Използвай семантичен HTML. Липсва атрибута method на формата, указващ какъв тип заявка се изпраща. Така по подразбиране изпращаш GET заявка, вместо POST. Submit бутона е по-добре да е input от тип submit.                                                                                                                                             2. PHP - Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen().   Опитай се да използваш консистентно навсякъде само един вид кавички, както и стриктно сравнение с \"===\".  Идентирай си малко по-добре кода.                            3. Понеже изпращаш GET заявка, а не POST, то след изпращане на формата нищо не се случва.                                                                                                                            4. Кодът ти доста прилича (поне PHP частта) на този на Елизка (61980). Извикваш метод test_input(), който никъде не си имплементирала.', '2019-06-10 22:00:09'),
(226, 30, 1, 3, '0.70', 'NG', '0. Избягвай смесването на HTML, CSS и PHP в един файл. По-добре ги раздели в два отделни, с цел постигане на модулност и по-лесна поддръжка в бъдеще. Опитай се да си идентираш по-добре кода.                                                                                                             1. HTML -   Използвай семантичен HTML.                                                                         2. PHP - Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen().   Опитай се да използваш консистентно навсякъде само един вид кавички, както и стриктно сравнение с \"===\".   Масивът не е сортиран. Не е много окей, когато откриеш грешка в някое от полетата, да добавяш невалидните данни към масива. Новите данни не са добавени към масива в правилния формат.                                                                                                                               ', '2019-06-10 22:00:09'),
(227, 55, 1, 3, '0.90', 'NG', '1. HTML - Избягвай използването на тагове като center, чието действие може да бъде постигнато със CSS. Освен това този таг вече е deprecated и се целим към използването на семантичен HTML.                                                     2. PHP - Избягвай смесването на HTML и PHP в един файл. По-добре ги раздели в два отделни, с цел постигане на модулност и по-лесна поддръжка в бъдеще.                                                                                                               3. Опитай се да си идентираш по-добре кода. Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen().   Не е много user friendly да зачистваш формата при изкарване на открити грешки при валиация.', '2019-06-10 22:00:09'),
(228, 31, 1, 3, '0.75', 'NG', '0. Валидацията при теб се случва в  HTML, а не в PHP. Опитай се да използваш консистентно навсякъде само един вид кавички, както и стриктно сравнение с \"===\".                                                                                                          1. HTML -  Името на PHP файла в атрибута action на формата ти е грешно. Избягвай използването на атрибути като required, min, max, maxlength, чието действие може да бъде постигнато и с JS и PHP. Хубаво е валидацията да става изцяло в back-end-a, а и такава беше идеята на домашното.   Опитай се да използваш малко повече семантичен HTML.      2. PHP -  Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen().             ', '2019-06-10 22:00:09'),
(229, 32, 1, 3, '0.80', 'NG', '1. Избягвай смесването на HTML и PHP в един файл. По-добре ги раздели в два отделни, с цел постигане на модулност и по-лесна поддръжка в бъдеще.                                                                                                                                           2. HTML - Използвай семантичен HTML.   Избягвай използването на alert.     3. PHP - При унищожаване на сесия освен session_unset() трябва да извикаш и session_destroy(). Хубаво е да проверяваш дали наистина имаш изпратена заявка.    Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen().                                                         ', '2019-06-10 22:00:09'),
(230, 33, 1, 3, '0.80', 'NG', '0. Избягвай смесването на HTML и JS в един файл. По-добре ги раздели в два отделни, с цел постигане на модулност и по-лесна поддръжка в бъдеще.                                                                                                                                                   1. HTML - Използвай семантичен HTML. Submit бутонът е по-добре да е input от тип submit.                                                                                                                           2. JS - Идентирай си малко по-добре кода.                                                                             3. PHP - Хубаво е преди да започнеш каквато и да било обработка на данните, първо да проверяваш дали реално имаш изпратена заявка. Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Опитай се да използваш консистентно навсякъде само един вид кавички.  Идентирай си малко по-добре кода.  ', '2019-06-10 22:00:09'),
(231, 9, 1, 3, '0.20', 'NG', '0. Формата ти е неактивна. Избягвай смесването на HTML и PHP на едно място.                                                                                                                                                             1. Използвай семантичен HTML. Деклараията в началото не ти е правилна. Имаш включен някакъв JS скрипт main.js, който го няма никъде като файл.  2. PHP - Не виждам смисъл да използваш клас, като всичките му данни са  public.  Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen().  Липсва проверка за непопълнени полета. Опитай се да използваш консистентно навсякъде само един вид кавички, както и стриктно сравнение с \" === \". Дори и да работеше формата, масивът нямаше да е сортиран по указания начин.', '2019-06-10 22:00:09'),
(232, 34, 1, 3, '0.70', 'NG', '0. Предадено с 15 мин. закъснение.                                                                                         1. HTML - Използвай семантичен HTML. Избягвай използването на атрибути като required, min, max, maxlength, чието действие може да бъде постигнато и с JS и PHP. Хубаво е валидацията да става изцяло в back-end-a, а и такава беше идеята на домашното.  При теб това става изцяло във front-end-a.                                                                                                                                     2. PHP - Опитай се да използваш консистентно навсякъде само един вид кавички, както и стриктно сравнение с \" === \". Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen().  Използвай малко по-смислени имена на променливите.', '2019-06-10 22:00:09'),
(233, 35, 1, 3, '1.00', 'NG', 'Използвай малко повече семантичен HTML. Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen().  Опитай се да използваш консистентно само един вид кавички, както и стриктно сравнение с \"===\".', '2019-06-10 22:00:09'),
(234, 101, 1, 3, '0.90', 'NG', '1. HTML -  В script тага използвай атрибута defer, за да избегнеш зареждането на скрипта преди парсването на HTML йерархията. Опитай се да използваш малко повече семантичен HTML. Избягвай използването на тага <br>.                                                                                                                                        2. JS -  Не е препоръчително да използваш JQuery. Гледай в другите домашни и в проекта да не гo използваш.                                                                      3.  Не зачиствай формата, когато някое от полетата е невалидно. Не е много user friendly, когато излезе съобщение за невалидно поле, потребителят да трябва да попълва всичко наново.   Опитай се да използваш консистентно само един вид кавички.                                                     ', '2019-06-10 22:00:09'),
(235, 36, 1, 3, '0.89', 'NG', '1. HTML - Използвай семантичен HTML. Избягвай използването на атрибути като maxlength, min, max, step, required, onclick, чието действие може да бъде получено и с JS. Учили сме как да обработваме събития с JS, така че е по-добре да го правиш в JS, а не с атрибут, на който да задаваш като стойност функция от JS скрипта. Maxlength, min, max и required в случая също са излишни, тъй като такъв тип валидация може да бъде направена както в JS, така и в PHP.                                                                                                                                                                                      2. PHP - Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen().  Липсва проверка за непопълнени полета.', '2019-06-10 22:00:09'),
(236, 102, 1, 3, '0.90', 'NG', '0. Идентирай си по-добре кода.                                                                                                     1. HTML - Използвай семантичен HTML.                                                                                     2. PHP - Опитай се да използваш консистентно навсякъде само един вид кавички, както и стриктно сравнение с \" === \". Вместо if($flag1 == TRUE && $flag2 == TRUE && $flag3 == TRUE), можеш да напишеш просто if($flag1 && $flag2 && $flag3).', '2019-06-10 22:00:09'),
(237, 79, 1, 3, '0.60', 'NG', '0. Избягвай смесването на HTML и PHP на едно място.                                                      1. HTML - Използвай семантичен HTML. В началото си пропуснал <!DOCTYPE html>. Избягвай използването на атрибут required и на таг <br>.                                                                                                                                                 2. PHP - При изпълнение дава грешки. Не е много окей да зачистваш формата, когато извеждаш съобщения за открити грешки при валидация. Когато унищожаваш сесия, освен session_unset(), е хубаво да извикаш и session_destroy().  Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen().  Липсва проверка за непопълнени полета. Опитай се да използваш консистентно навсякъде само един вид кавички, както и стриктно сравнение с \" === \". Липсва проверка за непопълнени полета.', '2019-06-10 22:00:09'),
(238, 103, 1, 3, '0.80', 'NG', '1. HTML - Използвай семантичен HTML. Избягвай използването на атрибути като onclick, чието действие можеш да постигнеш с eventListener в JS.                                                                                                                       2. JS -  Не е препоръчително да използваш JQuery. Гледай в другите домашни и в проекта да не гo използваш. Опитай се да си разбиеш кода на отделни методи, които да извикваш, за да стане малко по-четим и \"по-красиво\" написан.                                                                                                                             3. PHP - Хубаво е преди да започнеш каквато и да било обработка на данните, първо да проверяваш дали реално имаш изпратена заявка. Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Опитай се да използваш консистентно навсякъде само един вид кавички, както и стриктно сравнение с \" === \". ', '2019-06-10 22:00:09'),
(239, 10, 1, 3, '0.70', 'NG', '1. HTML - Използвай семантичен HTML. Идентирай си по-добре кода. Избягвай използването на атрибут required.                                                                       2. JS - URL адреса на php скрипта, към който изпращаш заявка, е само името на скрипта (относителния път, без localhost/...). Ajax методът е преписан от презентациите (можеше да си направиш своя модификация).  Опитай се да си разбиеш кода на отделни по-малки методи. Не е много препоръчително да имаш функции по 70 реда код.                                                          3. PHP - Хубаво е преди да започнеш каквато и да било обработка на данните, първо да проверяваш дали реално имаш изпратена заявка. Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Липсва валидация за непопълнени полета.', '2019-06-10 22:00:09'),
(240, 11, 1, 3, '0.95', 'NG', 'readfile(\"marks.html\"); - това е излишно. За взимане на дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Хубаво е да не зачистваш формата, когато откриеш невалидни полета, не е много user-friendly потребителят да трябва всеки път да трябва да си въвежда наново данните, когато е объркал някое от полетата.', '2019-06-10 22:00:09'),
(241, 57, 1, 3, '0.95', 'NG', '1. HTML -  Избягвай да използваш атрибути като onsubmit и required, чието действие можеш да постигнеш и с JS. В script тага използвай атрибута defer, за да избегнеш зареждането на скрипта преди парсването на HTML йерархията.                                                                                                                                   2. JS - Вместо да използваш атрибут onsubmit в HTML, на който да зададеш като стойност JS функция и да върнеш false, можеш да си селектираш submit бутона и да му закачиш click listener, в който да извикаш метода event.preventDefault(), с който игнорираш default-ното поведение на формата при натискане на submit бутона, и след това можеш да си изпратиш данните асинхронно към сървъра. Идеята беше сортирането да бъде направено в PHP скрипта. При сравнение е по-добре да използваш т.нар. \"умно\" сравнение.                                                                                                        3. PHP - Хубаво е при обработка на заявки в PHP винаги първо да проверяваш дали имаш записано нещо в суперглобалната променлива $_POST и съответно дали има елементи в $_POST с очаквания ключ. Опитай се да използваш консистентно само един вид кавички. Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). ', '2019-06-10 22:00:09'),
(242, 37, 1, 3, '0.90', 'NG', 'Опитай се да използваш консистентно навсякъде само един вид кавички, както и стриктно сравнение с \"===\". Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). С 62087 и 62101 имате идентично сортиране (разликата е само в имената на ключовете на масива $sort).', '2019-06-10 22:00:09'),
(243, 38, 1, 3, '0.80', 'NG', '1. HTML - Използвай малко повече семантичен HTML. Избягвай използването на атрибути като required, min, max, maxlength, чието действие може да бъде постигнато и с JS и PHP. Хубаво е валидацията да става изцяло в back-end-a, а и такава беше идеята на домашното.  При теб това става изцяло във front-end-a.                                                                                           2. PHP - Опитай се да използваш консистентно навсякъде само един вид кавички. Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). ', '2019-06-10 22:00:09'),
(244, 104, 1, 3, '0.50', 'NG', '1. HTML - Използвай семантичен HTML. Избягвай смесването на HTML и CSS на едно място. Избягвай използването на атрибути като required, чието действие може да бъде получено и с JS и PHP. При теб валидацията за непопълнени полета се случва в HTML, а не в PHP.                                                        2. PHP - Опитай се да използваш консистентно навсякъде само един вид кавички, както и стриктно сравнение с \"===\". Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Липсва проверка за непопълнение полета. Масивът не е сортиран по указания начин.                                                                                                          3. С 61081, 61980, 62080, 62098, 62111 имате едно към едно един и същи метод test_input().', '2019-06-10 22:00:09'),
(245, 58, 1, 3, '0.95', 'NG', '1. HTML - Използвай семантичен HTML. Избягвай да слагаш атрибути като max,min, required, onclick, чието действие може да бъде получено и с JS. Учили сме как да обработваме събития с JS, така че е по-добре да го правиш в JS, а не с атрибут, на който да задаваш като стойност функция от JS скрипта. Max, min и required в случая също са излишни, тъй като такъв тип валидация може да бъде направена както в JS, така и в PHP.                        2. PHP -  Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). ', '2019-06-10 22:00:09'),
(246, 60, 1, 3, '0.50', 'NG', '1. HTML - Използвай семантичен HTML. Стойността на атрибута action не ти е правила. Трябва да подадеш името на скрипта, който ще ти обработи заявката.                                                                                                                                                      2. PHP - Имаш пропуснати \";\". Хубаво е преди да започнеш каквато и да било обработка на данните, първо да проверяваш дали реално имаш изпратена заявка. Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Опитай се да използваш консистентно навсякъде само един вид кавички, както и стриктно сравнение с \" === \". Липсва даденият масив. Липсва проверка за непопълнени полета. При изпращане на формата всеки път се извежда едно и също съобщение с открити грешки. ', '2019-06-10 22:00:09'),
(247, 105, 1, 3, '0.80', 'NG', '1. HTML - Използвай семантичен HTML. Избягвай да слагаш атрибути като maxlength, min, max, step, required, onsubmit, чието действие може да бъде получено и с JS. Учили сме как да обработваме събития с JS, така че е по-добре да го правиш в JS, а не с атрибут, на който да задаваш като стойност функция от JS скрипта. Maxlength, min, max и required в случая също са излишни, тъй като такъв тип валидация може да бъде направена както в JS, така и в PHP.  В script тага използвай атрибута defer, за да избегнеш зареждането на скрипта преди парсването на HTML йерархията.                                                                                                                                        2. JS -  Не е препоръчително да използваш JQuery и alert. Гледай в другите домашни и в проекта да не ги използваш.   При сравнение е по-добре да използваш т.нар. \"умно\" сравнение.                                                                                3. PHP - Хубаво е при обработка на заявки в PHP винаги първо да проверяваш дали имаш записано нещо в суперглобалната променлива $_POST и съответно дали има елементи в $_POST с очаквания ключ. Сортирането не се случва по очаквания начин.Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). ', '2019-06-10 22:00:09'),
(248, 106, 1, 3, '0.80', 'NG', '0. Избягвай смесването на HTML, CSS и PHP в един файл. По-добре ги раздели в два отделни, с цел постигане на модулност и по-лесна поддръжка в бъдеще.                                                                                                               1. HTML - Използвай семантичен HTML. Избягвай използването на атрибути като required, чието действие може да бъде постигнато с JS или PHP.                                                                                                                                                  2. PHP - Опитай се да използваш консистентно навсякъде само един вид кавички. Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Липсва проверка за непопълнение полета.', '2019-06-10 22:00:09'),
(249, 80, 1, 3, '0.90', 'NG', 'Избягвай смесването на HTML и PHP в един файл. По-добре ги раздели в два отделни, с цел постигане на модулност и по-лесна поддръжка в бъдеще. Използвай семантичен HTML. Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Опитай се да използваш консистентно само един вид кавички, както и стрикто сравенение с \"===\".', '2019-06-10 22:00:09'),
(250, 61, 1, 3, '0.50', 'NG', '0. Опитай се да използваш консистентно навсякъде само един вид кавички.                                                                                                                                                                                                             1. HTML - Използвай семантичен HTML.                                                                                    2. JS - Избягвай смесването на JS и PHP на едно място. Така, както си го написала в момента, students ти е обект, а не масив, и няма как върху обект да извикаш map (map работи само с масиви).                                                            3. PHP -   Липсва даденият масив и сортировка. Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen().   Опитай се за сравнение да използваш стриктно сравнение с \"===\". При изпращане на формата дава грешки.                                                                    ', '2019-06-10 22:00:09'),
(251, 39, 1, 3, '0.80', 'NG', '0. В случая валидацията на формата се случва в HTML. Идеята беше да се направи в PHP скрипта.                                                                                                            1. HTML -  Избягвай да слагаш атрибути като maxlength, min, max, step, required, onsubmit, чието действие може да бъде получено и с JS. Учили сме как да обработваме събития с JS, така че е по-добре да го правиш в JS, а не с атрибут, на който да задаваш като стойност функция от JS скрипта. Maxlength, min, max и required в случая също са излишни, тъй като такъв тип валидация може да бъде направена както в JS, така и в PHP.                                                                                                                                                 2. JS - Избягвай използването на alert.                                                                             3. PHP - Хубаво е при обработка на заявки в PHP винаги първо да проверяваш дали имаш записано нещо в суперглобалната променлива $_POST и съответно дали има елементи в $_POST с очаквания ключ. Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Опитай се да използваш консистентно само един вид кавички. ', '2019-06-10 22:00:09'),
(252, 107, 1, 3, '0.80', 'NG', '0. Избягвай смесването на HTML и JS в един файл. По-добре ги раздели в два отделни, с цел постигане на модулност и по-лесна поддръжка в бъдеще.                                                                                                                                           1. HTML - Използвай малко повече семантичен HTML. В тага script използвай атрибут defer, за да може скрипта да бъде зареден, след като бъде парснато DOM дървото.                                                                                                       2. JS - Като първи параметър на метода ти ajax подай само името на PHP скрипта, който ще ти обработи заявката, без наклонената черта преди това.                                                                                                                                                              3. PHP - Хубаво е преди да започнеш каквато и да било обработка на данните, първо да проверяваш дали реално имаш изпратена заявка. Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Опитай се да използваш консистентно навсякъде само един вид кавички.', '2019-06-10 22:00:09'),
(253, 108, 1, 3, '0.80', 'NG', '0. Избягвай смесването на HTML и JS в един файл. По-добре ги раздели в два отделни, с цел постигане на модулност и по-лесна поддръжка в бъдеще.                                                                                                                                           1. HTML - Използвай семантичен HTML.                                                                           2. JS - Не е препоръчително да използваш JQuery. Гледай в другите домашни и в проекта да не ги използваш.                                                                     3. PHP - Хубаво е при обработка на заявки в PHP винаги първо да проверяваш дали имаш записано нещо в суперглобалната променлива $_POST и съответно дали има елементи в $_POST с очаквания ключ.  Опитай се да използваш консистентно само един вид кавички.', '2019-06-10 22:00:09'),
(254, 81, 1, 3, '0.70', 'NG', '1. HTML - Използвай семантичен HTML.                                                                              2. PHP - Хубаво е при обработка на заявки в PHP винаги първо да проверяваш дали имаш записано нещо в суперглобалната променлива $_POST и съответно дали има елементи в $_POST с очаквания ключ. Липсва проверка дали има въведени данни в полетата на формата. Липсва даденият масив. Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Данните, които са на кирилица, не се отпечатват добре. Подай като втори параметър на метода json_encode JSON_UNESCAPED_UNICODE, за да се изпринтят нещата на кирилица както трябва.  Изисква се сортиране в низходящ ред по оценка, а не по възходящ.  ', '2019-06-10 22:00:09'),
(255, 82, 1, 3, '0.70', 'NG', '0. Избягвай смесването на HTML и PHP на едно място.   Опитай се да използваш консистентно навсякъде само един вид кавички.                                                    1. HTML - Използвай семантичен HTML.                                                                                    2. PHP - Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Масивът не е сортиран по указания начин.  Не е много окей да зачистваш формата, когато извеждаш съобщения за открити грешки при валидация. Липсва дадения масив.', '2019-06-10 22:00:09'),
(256, 83, 1, 3, '0.95', 'NG', '1. JS -  Не е препоръчително да използваш JQuery. Гледай в другите домашни и в проекта да не гo използваш.                                                                      2. PHP -   Хубаво е преди да започнеш каквато и да било обработка на данните, първо да проверяваш дали реално имаш изпратена заявка. Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Опитай се да използваш консистентно навсякъде само един вид кавички. ', '2019-06-10 22:00:09');
INSERT INTO `mark` (`mark_id`, `student_id`, `category_id`, `stage`, `mark_value`, `author`, `comment`, `time_stamp`) VALUES
(257, 109, 1, 3, '0.90', 'NG', '1. HTML - Използвай семантичен HTML. Тагът script трябва да е или в head, или в края на body. Ако е в head, е хубаво да използваш атрибута defer. Избягвай използването на атрибути като onclick, чието действие можеш да постигнеш и с JS с eventListener.                                                                                         2. JS - Опитай се да си разбиваш кода на отделни методи, с цел преизползваемост, по-лесна поддръжка и по-добра четимост. Опитай се да използваш консистентно навсякъде само един вид кавички. Зачиствай си съобщенията за грешка, когато формата бъде изпратена наново.                        3. PHP - Хубаво е преди да започнеш каквато и да било обработка на данните, първо да проверяваш дали реално имаш изпратена заявка. Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen().', '2019-06-10 22:00:09'),
(258, 62, 1, 3, '0.80', 'NG', '0. Опитай се да използваш консистентно навсякъде само един вид кавички, а за сравнение да използваш стриктно сравнение с \"===\".                                        1. HTML - Използвай семантичен HTML. Избягвай използването на тага <br>.                                                                                                                                                       2. PHP - Хубаво е преди да почнеш да обработваш данните, първо да провериш дали реално имаш изпратена някаква заявка. Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen().', '2019-06-10 22:00:09'),
(259, 110, 1, 3, '0.95', 'NG', 'Опитай се да използваш консистентно навсякъде само един вид кавички, а за сравнение да използваш стриктно сравнение с \"===\". Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Submit бутонът е по-добре да е input от тип submit.   ', '2019-06-10 22:00:09'),
(260, 40, 1, 3, '0.65', 'NG', '0. - Опитай се да използваш консистентно навсякъде само един вид кавички, както и стриктно сравнение с \" === \".                                                               1. HTML - Използвай семантичен HTML. Избягвай използването на атрибути като required, min, max, maxlength, чието действие може да бъде постигнато и с JS и PHP. Хубаво е валидацията да става изцяло в back-end-a, а и такава беше идеята на домашното.                                                                           2. JS - Избягвай влагането на callback функции една в друга. По-добре ги разбий на отделни функции, чиито имена да подаваш като параметър на методите, които изискват callback функция като параметър. Избягвай използването на alert.   Щеше да е добре кода, който използваш за изпращане на асинхронна заявка с AJAX към сървъра, да ти е изнесен в отделен метод, на който само да подаваш url-a на сървъра, типа заявка и данните, които ще изпращаш. В момента на 2 места имаш написан един и същи код, което не е много окей.                                                                                                            3. PHP - Хубаво е преди да почнеш да обработваш данните, първо да провериш дали реално имаш изпратена някаква заявка. Не виждам никъде да изпращаш към потребителя съобщения за открити грешки. При теб реално валидацията на формата се случва в HTML, а не в PHP.', '2019-06-10 22:00:09'),
(261, 13, 1, 3, '0.55', 'NG', '0. Избягвай смесването на HTML и PHP на едно място.                                                       1. HTML - Използвай семантичен HTML.  Избягвай използването на атрибута required и тага br.                                                                                                             2. PHP - Изпращаш POST заявка, а после търсиш данни от GET заявка.  За взимане на дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Липсва проверка за непопълнени полета. След изпращане на формата с валидни данни, нищо не се случва. Не е много окей да зачистваш формата, когато извеждаш съобщения за открити грешки при валидация. Опитай се да използваш консистентно само един вид кавички, както и да използваш стриктно сравнение с \"===\". Липсва соритровка.', '2019-06-10 22:00:09'),
(262, 14, 1, 3, '0.85', 'NG', '0. Опитай се да използваш консистентно навсякъде само един вид кавички, както и да използваш стриктно сравнение с \"===\".                                                     1. HTML -  Използвай семантичен HTML.                                                                                                                                                                                            2. PHP - Хубаво е при обработка на заявки в PHP винаги първо да проверяваш дали имаш записано нещо в суперглобалната променлива $_POST и съответно дали има елементи в $_POST с очаквания ключ. За взимане на дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen().  Данните от дадения масив, които са на кирилица, не се отпечатват добре. Подай като втори параметър на метода json_encode JSON_UNESCAPED_UNICODE, за да се изпринтят нещата на кирилица както трябва. ', '2019-06-10 22:00:09'),
(263, 84, 1, 3, '0.80', 'NG', '0. Избягвай използването на Bootstrap и Jquery. В проекта няма да имаш право да ги използваш.                                                                                                            1. HTML - Използвай семантичен HTML. Избягвай използването на атрибути като required, min, max, maxlength, чието действие може да бъде постигнато и с JS и PHP. Хубаво е валидацията да става изцяло в back-end-a, а и такава беше идеята на домашното.                                                                           2. PHP - Масивът не е сортиран по указания начин. Опитай се навсякъде да използваш консистентно само един вид кавички. Вместо isset($_SESSION[\"students\"]) === false, можеш да напишеш !isset($_SESSION[\"students\"]). За взимане на дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Добре е накрая да си унищожиш сесията.', '2019-06-10 22:00:09'),
(264, 64, 1, 3, '0.65', 'NG', '1. HTML - Използвай семантичен HTML. Избягвай да слагаш атрибути като  required, onsubmit, чието действие може да бъде получено и с JS. Учили сме как да обработваме събития с JS, така че е по-добре да го правиш в JS, а не с атрибут, на който да задаваш като стойност функция от JS скрипта. Required в случая също е излишно, тъй като такъв тип валидация може да бъде направена както в JS, така и в PHP. В случая валидацията за празни полета при теб се случва с HTML. Идеята беше да се направи с PHP. В script тага използвай атрибута defer, за да избегнеш зареждането на скрипта преди парсването на HTML йерархията.                                                                                2. JS - Опитай се да използваш консистентно или само двойни, или само единични кавички.                                                                                                                          3. PHP - Хубаво е преди да започнеш каквато и да било обработка на данните, първо да проверяваш дали реално имаш изпратена заявка. Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Масивът не е сортиран по указания начин. Идеята беше да се извеждат съобщения за абсолютно всички открити грешки, а не само за една. Хубаво е да зачистваш съобщенията за грешки при повторно изпращане на формата.', '2019-06-10 22:00:09'),
(265, 41, 1, 3, '0.65', 'NG', '0. <script type=\"text/javascript\">\n      var a = [\"a\", \"b\"]\n      a.forEach(function(item){\n        console.log(item)\n      });\n    </script> - Не виждам смисъла на това парче код.  Избягвай смесването на HTML, JS и PHP на едно място. Идентирай си по-добре кода.                                                                                                 1. HTML - Използвай семантичен HTML.                                                                                     2. PHP - Хубаво е преди да започнеш каквато и да било обработка на данните, първо да проверяваш дали реално имаш изпратена заявка. Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Опитай се да използваш консистентно или само двойни, или само единични кавички. Масивът не е сортиран по указания начин.', '2019-06-10 22:00:09'),
(266, 85, 1, 3, '0.80', 'NG', '1. HTML - Използвай семантичен HTML. Избягвай да слагаш атрибути като  required, onsubmit, чието действие може да бъде получено и с JS. Учили сме как да обработваме събития с JS, така че е по-добре да го правиш в JS, а не с атрибут, на който да задаваш като стойност функция от JS скрипта. Required в случая също е излишно, тъй като такъв тип валидация може да бъде направена както в JS, така и в PHP. В случая валидацията за празни полета при теб се случва с HTML. Идеята беше да се направи с PHP. В script тага използвай атрибута defer, за да избегнеш зареждането на скрипта преди парсването на HTML йерархията. Избягвай използването на атрибута style, чието действие можеш да постигнеш със CSS.                                                                                                                                                     2. JS -  Хубаво е да проверяваш статуса на върнатия отговор от сървъра. Може да е възникнала някаква грешка и да не ти върне никакви данни.       3. PHP -  Избягвай смесването на HTML и PHP в един файл. По-добре ги раздели в два отделни, с цел постигане на модулност и по-лесна поддръжка в бъдеще. Опитай се да използваш консистентно или само двойни, или само единични кавички. Хубаво е да използваш навсякъде т.нар. \"умно\" сравнение.   Не зачиствай формата, когато някое от полетата е невалидно. Не е много user friendly, когато излезе съобщение за невалидно поле, потребителят да трябва да попълва всичко наново.Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Липсва даденият масив.', '2019-06-10 22:00:09'),
(267, 15, 1, 3, '0.60', 'NG', '1. Използвай семантичен HTML. Избягвай използването на атрибут required и на тага <br>.                                                                                                             2. PHP - Хубаво е при обработка на заявки в PHP винаги първо да проверяваш дали имаш записано нещо в суперглобалната променлива $_POST и съответно дали има елементи в $_POST с очаквания ключ. Липсва проверка за непопълнени полета и за дължината на името. Очакваше се да се изведат по-описателни съобщения за откритите грешки. При невалидно изпратена форма излизат грешки. Идентирай си по-добре кода.', '2019-06-10 22:00:09'),
(268, 42, 1, 3, '0.75', 'NG', '0. Идеята беше валидацията на формата да бъде направена в PHP скрипта и ако някое от полетата не е валидно, да бъде върнат масив със съобщения за откритите грешки в JSON формат. При теб валидацията се извършва в JS скрипта.                                                                                                              1. HTML - Използвай семантичен HTML. Избягвай да слагаш атрибути като maxlength, required, onclick и onmousedown, чието действие може да бъде получено и с JS. Учили сме как да обработваме събития с JS, така че е по-добре да го правиш в JS, а не с атрибут, на който да задаваш като стойност функция от JS скрипта. Maxlength и required в случая също са излишни, тъй като такъв тип валидация може да бъде направена както в JS, така и в PHP. В script тага използвай атрибута defer, за да избегнеш зареждането на скрипта преди парсването на HTML йерархията.                                                                                                                                                                                       2. JS -  Ключовете на обектите не е задължително да бъдат ограждани в кавички.  Хубаво е валидацията на формата винаги да става в PHP скрипта, с цел предотвратяване на атаки и хакване. Причината за това е, че JS кодът може да бъде достъпван от браузъра, за разлика от PHP кода.                                                                                                                                               3. PHP - Хубаво е при обработка на заявки в PHP винаги първо да проверяваш дали имаш записано нещо в суперглобалната променлива $_POST и съответно дали има елементи в $_POST с очаквания ключ.', '2019-06-10 22:00:09'),
(269, 16, 1, 3, '0.80', 'NG', '1. HTML - Използвай семантичен HTML. Избягвай използването на атрибути като maxlength, min, max, step, required, чието действие може да бъде получено и с JS и в PHP. При теб валидацията на формата се случва в HTML, а не в PHP, каквато беше идеята на задачата.                                                                       2. PHP - HTML структурата тук е излишна. Идентирай си по-добре кода. Опитай се да използваш консистентно навсякъде само един вид кавички. Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen().       ', '2019-06-10 22:00:09'),
(270, 17, 1, 3, '0.65', 'NG', '0. Избягвай смесването на HTML и PHP на едно място.  Опитай се да използваш консистентно навсякъде само един вид кавички.                                          1. HTML - Използвай семантичен HTML. Избягвай използването на атрибути като required, чието действие може да бъде постигнато и с JS и PHP.  Бутонът за изпращане на данните от формата към съсрвъра трябва да ти е input от тип submit. Така както си го написала, реално не изпращаш нищо към сървъра.                                                                                                                                 2. PHP - При сравнение по-добре използвай стриктно сравнение с \"===\". Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen().                                                             3. Валидацията ти доста прилича на тази на Йоанна (62008).', '2019-06-10 22:00:09'),
(271, 86, 1, 3, '0.80', 'NG', '0. Избягвай смесването на едно място на HTML и JS.  По-добре ги раздели в два отделни, с цел постигане на модулност и по-лесна поддръжка в бъдеще.                                                                                                                                                          1. Използвай семантичен HTML. Избягвай използването на атрибути като required, cellpadding, cellspacing, onclick, чието действие можеш да постигнеш с JS, PHP или CSS.                                                                                                                2. JS - Не е препоръчително да използваш JQuery. Гледай в другите домашни и в проекта да не ги използваш.                                                                      3. PHP -   Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen().  Опитай се да използваш консистентно навсякъде само един вид кавички, а за сравнение да използваш стриктно сравнение с \"===\". ', '2019-06-10 22:00:09'),
(272, 87, 1, 3, '0.85', 'NG', '0. Избягвай смесването на HTML и JS в един файл. По-добре ги раздели в два отделни, с цел постигане на модулност и по-лесна поддръжка в бъдеще.  Опитай се да използваш консистентно навсякъде само един вид кавички.                                                                                                                                            1. HTML - Използвай семантичен HTML.  Избягвай използването на тага <br>, чието действие можеш да постигнеш със CSS.                                                 2. JS - Не е препоръчително да използваш JQuery. Гледай в другите домашни и в проекта да не ги използваш.                                                                      3. PHP -   Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Препоръчително е да си огрждаш всички if-else блокове в къдрави скоби.                                                                                                  ', '2019-06-10 22:00:09'),
(273, 66, 1, 3, '0.80', 'NG', '0. Избягвай смесването на HTML и JS в един файл. По-добре ги раздели в два отделни, с цел постигане на модулност и по-лесна поддръжка в бъдеще.                                                                                                                                           1. HTML - Използвай семантичен HTML. Избягвай използването на атрибути като onclick, чието действие можеш да постигнеш JS, като използваш eventListener.                                                                                                                               2. JS - Не е препоръчително да използваш JQuery. Гледай в другите домашни и в проекта да не ги използваш.  Зачиствай изкараните съобщения за грешки при повторно изпращане на формата.                                                                   3. PHP - Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Опитай се да използваш консистентно само един вид кавички.', '2019-06-10 22:00:09'),
(274, 67, 1, 3, '0.85', 'NG', '1. HTML - Използвай малко повече семантичен HTML. Избягвай използването на тага <br>.                                                                                                             2. PHP - Опитай се да използваш консистентно навсякъде само един вид кавички.  Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Очакваше се да се изведат съобщения за абсолютно всички открити грешки, а не само за една.', '2019-06-10 22:00:09'),
(275, 43, 1, 3, '0.75', 'NG', '0. Избягвай смесването на HTML и PHP в един файл. По-добре ги раздели в два отделни, с цел постигане на модулност и по-лесна поддръжка в бъдеще.                                                                                                                                                     1. HTML - Използвай семантичен HTML.                                                                                       2. PHP -  Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Използвай стриктно сравнение с \"===\". Вместо if($nameCheck == true && $fnCheck == true), можеш да напишеш просто if($nameCheck && $fnCheck). Не зачиствай формата, когато някое от полетата е невалидно. Не е много user friendly, когато излезе съобщение за невалидно поле, потребителят да трябва да попълва всичко наново. ', '2019-06-10 22:00:09'),
(276, 68, 1, 3, '0.80', 'NG', '1. HTML - Избягвай използването на атрибути като maxlength, min, max, step, required, onsubmit, чието действие може да бъде получено и с JS и в PHP.  Избягвай използването на тага <br>.                                                                                                           2. PHP - Избягвай смесването на HTML и PHP в един файл. По-добре ги раздели в два отделни, с цел постигане на модулност и по-лесна поддръжка в бъдеще. Липсва даденият масив.  Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Опитай се да използваш само един вид кавички.                                                                                                                                                3. Опитай се да си идентираш по-добре кода.', '2019-06-10 22:00:09'),
(277, 88, 1, 3, '0.10', 'NG', 'Това, че си променил съобщенията за грешка и имената на някои методи и променливи и си разместил някои неща, не значи, че няма да си проличи, че си преписвал. Кодът ти е едно към едно като на Десислава (62079), дори и на външен вид. Считам, че тя е първоизточникът, тъй като е предала домашното си преди теб, а и имаш повече грешки от нея.', '2019-06-10 22:00:09'),
(278, 44, 1, 3, '0.90', 'NG', '1. HTML - Идентирай си по-добре кода. Вместо <section> във формата е по-добре да използваш <fieldset>.  Избягвай използването на атрибути като maxlength, min, max, step, required, чието действие може да бъде получено и с JS и в PHP. При теб валидацията на формата се случва в HTML, а не в PHP, каквато беше идеята на задачата.                                                                                                                  2. JS - Опитай се да използваш консистентно навсякъде само един вид кавички.                                                                                                                                                    3. PHP - Хубаво е в класа да имаш конструктор и там да извършиш инициализацията на масива. Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Подреди си по-добре кода.', '2019-06-10 22:00:09'),
(279, 18, 1, 3, '0.50', 'NG', '0. Избягвай смесването на HTML и PHP в един файл. По-добре ги раздели в  отделни файлове, с цел постигане на модулност и по-лесна поддръжка в бъдеще. При теб валидацията се случва в HTML, а не в PHP.                                                                                                                                             1. HTML - Избягвай използването на атрибути като maxlength, min, max, step, required, чието действие може да бъде получено и с JS и в PHP.                    2. PHP - Опитай се да използваш консистентно навсякъде само един вид кавички.  Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Подреди си по-добре кода.                                                                                                                                   3. Работата ти е доста подобна на тази на Кристиан (62049).', '2019-06-10 22:00:09'),
(280, 45, 1, 3, '0.65', 'NG', '1. HTML - Използвай семантичен HTML.  Избягвай използването на атрибути като min, max, required, maxlength, required, onsubmit, чието действие може да бъде получено и с JS. Учили сме как да обработваме събития с JS, така че е по-добре да го правиш в JS, а не с атрибут, на който да задаваш като стойност функция от JS скрипта. Maxlength, min, max и required в случая също са излишни, тъй като такъв тип валидация може да бъде направена както в JS, така и в PHP. В script тага използвай атрибута defer, за да избегнеш зареждането на скрипта преди парсването на HTML йерархията.                                                                                                                                            2. JS - Опитай се да си разбиеш кода на повече методи, за да стане по-лесно четим.                                                                                                                                             3. PHP - Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Използвай стриктно сравнение с \"===\".   Липсва дадения масив.                                                                                                          4. При изпращане на валидно попълнена форма, възниква грешка и нищо не се случва.', '2019-06-10 22:00:09'),
(281, 111, 1, 3, '0.00', 'NG', NULL, '2019-06-10 22:00:09'),
(282, 69, 1, 3, '0.90', 'NG', '1. HTML - Атрибутът action трябва да приема относителния или абсолютния път до скрипта, който ще ти обработва формата. В случая трябва или да има точка, преди наклонената черта, или въобще да няма наклонена черта пред името на скрипта. Избягвай използването на атрибута required и на тага br. Освен това aтрибутът required не приема никаква стойност.                                                                                                                                   2. PHP -  Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Опитай се да използваш консистентно само един вид кавички. Липсва проверка дали полетата на формата са празни. ', '2019-06-10 22:00:09'),
(283, 90, 1, 3, '0.75', 'NG', '1. Избягвай смесването на HTML, CSS и JS в един файл. По-добре ги раздели в  отделни файлове, с цел постигане на модулност и по-лесна поддръжка в бъдеще.                                                                                                                                           2. HTML - Използвай семантичен HTML.                                                                           3. PHP - Липсва проверка дали полетата на формата са празни. Хубаво е при обработка на заявки в PHP винаги първо да проверяваш дали имаш записано нещо в суперглобалната променлива $_POST и съответно дали има елементи в $_POST с очаквания ключ. Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Опитай се да използваш консистентно само един вид кавички.', '2019-06-10 22:00:09'),
(284, 112, 1, 3, '0.70', 'NG', '1. HTML -  Избягвай да слагаш атрибути като pattern, чието действие може да бъде получено и с JS и PHP. Идеята беше валидацията да се извърши в PHP скритпа. При теб се случва в HTML.                                                                                         2. PHP - Избягвай смесването на HTML и PHP в един файл. По-добре ги раздели в два отделни, с цел постигане на модулност и по-лесна поддръжка в бъдеще. Не е добре да изпращаш данни от форма с GET заявка. В такъв случай данните от формата се добавят към URL адреса като query параметри. При изпращане на данни от форма използваме POST заявки. Данните от дадения масив, които са на кирилица, не се отпечатват добре. Подай като втори параметър на метода json_encode JSON_UNESCAPED_UNICODE, за да се изпринтят нещата на кирилица както трябва.   Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Опитай се да използваш консистентно само един вид кавички.                                                                                                                                          3. Опитай се да си идентираш по-добре кода.', '2019-06-10 22:00:09'),
(285, 46, 1, 3, '0.85', 'NG', '0. Избягвай смесването на HTML и PHP на едно място.                                                       1. HTML - Използвай малко повече семантичен HTML. Избягвай използването на тага <br>.                                                                                                               2. PHP - Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Когато унищожаваш сесията, освен session_unset(), е хубаво да извикаш и session_destroy().', '2019-06-10 22:00:09'),
(286, 70, 1, 3, '1.00', 'NG', '1. HTML - В script тага използвай атрибута defer, за да избегнеш зареждането на скрипта преди парсването на HTML йерархията.                             2. JS - Не е препоръчително да използваш JQuery. Гледай в другите домашни и в проекта да не ги използваш.                                                                            3. PHP - Опитай се да използваш консистентно навсякъде само един вид кавички, а за сравнение да използваш стриктно сравнение с \"===\". ', '2019-06-10 22:00:09'),
(287, 113, 1, 3, '0.65', 'NG', '0. Избягвай смесването на HTML и PHP на едно място.  Опитай се да използваш консистентно навсякъде само един вид кавички. При стартиране дава грешки.                                                                                                         1. HTML - Използвай малко повече семантичен HTML. Избягвай използването на тага <br>.                                                                                                               2. PHP - Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Никъде не използваш върнатите от валидиращите функции стойности. Съответно никъде не показваш откритите грешки при валидация.  Данните, които са на кирилица, не се отпечатват добре. Подай като втори параметър на метода json_encode JSON_UNESCAPED_UNICODE, за да се изпринтят нещата на кирилица както трябва.  ', '2019-06-10 22:00:09'),
(288, 91, 1, 3, '0.85', 'NG', '1. Използвай семантичен HTML.                                                                                                 2. PHP - Не виждам смисъл да използваш клас, щом property-тата му са public, а не private, също така първоначалната им инициализация е излишна, тъй като по принцип инициализацията на данните на класа е прието да се извършва в конструктора. Освен това за конструктор е по-добре да изпозваш public function __construct(), тъй като начинът, по който си го написал, е deprecated в PHP 7. Опитай се да използваш консистентно навсякъде само един вид кавички, а за сравнение да използваш стриктно сравнение с \"===\". Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen().', '2019-06-10 22:00:09'),
(289, 47, 1, 3, '0.80', 'NG', '1. HTML - Използвай малко повече семантичен HTML. Section-a е по-добре да е <h1>, <legend> или <label>. Избягвай използването на атрибути като min, max, required, maxlength, required, чието действие може да бъде получено и с JS и с PHP.Submit бутонът е по-добре да е input от тип submit.    При теб валидацията се случва в HTML, а не в PHP, каквато беше и идеята на домашното.                                                                                                                                                  2. PHP - Опитай се да използваш консистентно навсякъде само един вид кавички. Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen().', '2019-06-10 22:00:09'),
(290, 20, 1, 3, '0.95', 'NG', '1. HTML - Използвай семантичен HTML. Избягвай използването на атрибут style, чието действие можеш да постигнеш и със CSS.                                            2. PHP - Добавяй си данните в сесията само на едно място. В останалите файлове при проверка за съществуване на сесия, ако няма такава, е по-логично да изведеш съобщение, че сесията е изтекла или нещо такова. При унищожаване на сесията винаги накрая освен session_unset() трябва да извикаш и session_destroy().                                                                                               3. Опитай се да използваш консистентно само един вид кавички.', '2019-06-10 22:00:09'),
(291, 114, 1, 3, '0.75', 'NG', '1. HTML - Използвай семантичен HTML. Избягвай използването на атрибути като pattern, чието действие може да бъде постигнато и с JS и PHP. Хубаво е валидацията на формата изцяло да става в PHP, a и като цяло такава беше идеята.                                                                                                                                              2. PHP - След добавяне на новите данни, масивът не е сортиран по указания начин. Опитай се да използваш консистентно само един вид кавички. При взимане на дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), отколкото strlen(). Вместо empty($arr) === false, можеш да използваш !empty($arr). ', '2019-06-10 22:00:09'),
(292, 92, 1, 3, '0.80', 'NG', '1. HTML - Използвай семантичен HTML. Избягвай използването на атрибути като onclick, чието действие може да бъде постигнато с eventListener в JS. В script тага използвай атрибута defer, за да избегнеш зареждането на скрипта преди парсването на HTML йерархията.                                                        2. JS - По-добре си създай обект, който да превърнеш в JSON, и след това подай полученият JSON стринг на метода send при изпращане на заявка към сървъра с AJAX.                                                                                                                   3. PHP - Идеята беше да се изведат абсолютно всички открити грешки при валидация, а не само една. Опитай се да използваш консистентно или само единични, или само двойни кавички. Сортирането на масива не се случва всеки път по очаквания начин.  Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen().                                                                                               4. Хубаво е да изчистваш съобщенията за грешки, когато формата бъде обработена успешно .', '2019-06-10 22:00:09'),
(293, 71, 1, 3, '0.70', 'NG', '0. Избягвай семсването на HTML и JS в един файл. При теб валидацията се случва в HTML, а не в PHP, каквато беше и идеята на домашното.                    1. HTML - Използвай семантичен HTML.  Избягвай използването на атрибути като min, max, required, maxlength, required, onsubmit, чието действие може да бъде получено и с JS. Учили сме как да обработваме събития с JS, така че е по-добре да го правиш в JS, а не с атрибут, на който да задаваш като стойност функция от JS скрипта. Maxlength, min, max и required в случая също са излишни, тъй като такъв тип валидация може да бъде направена както в JS, така и в PHP. Избягвай използването и на тага <br>, чието действие може да бъде постигнато със CSS.                                                                                                                                                     2. JS - Опитай се да използваш консистентно навсякъде само един вид кавички. Създаването на таблицата можеш да го направиш и с DOM.                   3. PHP - Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Липсва валидация за непопълнени полета от формата.', '2019-06-10 22:00:09'),
(294, 115, 1, 3, '0.80', 'NG', 'Използвай семантичен HTML. Избягвай използването на тага <br>. Избягвай смесването на HTML и PHP в един файл. Липсва проверка дали полетата на формата са празни. Хубаво е при обработка на заявки в PHP винаги първо да проверяваш дали имаш записано нещо в суперглобалната променлива $_POST и съответно дали има елементи в $_POST с очаквания ключ.Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Опитай се да използваш консистентно само един вид кавички, както и стриктно сравнение с \"===\".', '2019-06-10 22:00:09'),
(295, 48, 1, 3, '0.70', 'NG', '0. Избягвай смесването на HTML и PHP в един файл. При теб валидацията се случва в HTML, a не в PHP, каквато беше и идеята на домашното. Дори и да махна по-долу споменатите атрибути от input полетата, валидацията не минава, както се очаква.                                                                                                                 1. HTML -  Избягвай използването на атрибути като min, max, required, maxlength, required, чието действие може да бъде получено и с JS и с PHP.Submit бутонът е по-добре да е input от тип submit.                                             2. PHP - Опитай се да използваш консистентно навсякъде само един вид кавички, както и стриктно сравнение с \"===\". За взимане на дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), отколкото strlen().', '2019-06-10 22:00:09'),
(296, 93, 1, 3, '0.80', 'NG', '1. HTML - Опитай се да използваш малко повече семантичен HTML. Избягвай използването на тага <br/>, чието действие можеш да постигнеш и със CSS.                                                                                                                       2. PHP - Опитай се да използваш консистентно навсякъде само един вид кавички, както и стриктно сравнение с \"===\". За взимане на дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), отколкото strlen().                                                                                                                              3. Домашното ти е като на Иван (62050). Считам, че ти си първоизточникът, тъй като си предала по-рано, а и нямаш кой знае какви грешки, за разлика от него.', '2019-06-10 22:00:09'),
(297, 49, 1, 3, '0.85', 'NG', '1. HTML - Използвай семантичен HTML. При изкаравне на съобщенията за невалидни полети изчезва бутонът Добави.                                                                      2. Избягвай смесването на HTML, JS и PHP в един файл. По-добре ги раздели в отделни файлове, с цел постигане на модулност и по-лесна поддръжка в бъдеще. Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Опитай се да използваш консистентно само един вид кавички. С 61081, 61980, 62002, 62098, 62111 имате едно към едно един и същи метод test_input(). ', '2019-06-10 22:00:09'),
(298, 116, 1, 3, '0.80', 'NG', '1. HTML - Използвай семантичен HTML. Избягвай използването на атрибути като required, чието действие може да бъде постигнато с JS и PHP.                                                                                                                                                  2. PHP -   Избягвай смесването на HTML и PHP в един файл. По-добре ги раздели в отделни файлове, с цел постигане на модулност и по-лесна поддръжка в бъдеще.  Опитай се да използваш консистентно или само единични, или само двойни кавички, както и стриктно сравнение с \"===\". Липсва валидация за непопълнени данни.        ', '2019-06-10 22:00:09'),
(299, 22, 1, 3, '0.70', 'NG', '1. HTML - Използвай семантичен HTML. Submit бутонът е по-добре да е input от тип submit.                                                                                                                               2. PHP - HTML йерархията тук е напълно излишна. Идентирай си по-добре кода.  Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen().   Опитай се да използваш консистентно навсякъде само един вид кавички.                                       3. С 61999 и 62101 имате идентично сортиране (разликата е само в имената на ключовете на масива $sort).                     ', '2019-06-10 22:00:09'),
(300, 95, 1, 3, '0.60', 'NG', '0. Избягвай смесването на HTML и PHP на едно място.                                                      1. HTML - Използвай семантичен HTML. Избягвай използването на  таг <br>.                                                                                                                                                                 2. PHP -   Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen().   Опитай се да използваш консистентно навсякъде само един вид кавички, както и стриктно сравнение с \"===\".    Вместо if($isCorrect == true), можеш да напишеш само if($isCorrect).  Не е много окей да зачистваш формата, когато извеждаш съобщения за открити грешки при валидация. Липсва дадения масив.   Данните, които са на кирилица, не се отпечатват добре. Подай като втори параметър на метода json_encode JSON_UNESCAPED_UNICODE, за да се изпринтят нещата на кирилица както трябва.               ', '2019-06-10 22:00:09'),
(301, 96, 1, 3, '0.89', 'NG', '1. HTML - Използвай семантичен HTML. Избягвай смесването на HTML и JS в един файл. По-добре ги раздели в отделни файлове, с цел постигане на модулност и по-лесна поддръжка в бъдеще. Избягвай използването на атрибути като required, чието действие може да бъде постигнато с JS и PHP.                                                                                                                                                   2. PHP - Хубаво е винаги първо да проверяваш дали наистина имаш изпратена POST заявка.   Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen().                                                                                                                3. Опитай се да си идентираш по-добре кода и да използваш консистентно само един вид кавички.', '2019-06-10 22:00:09'),
(302, 72, 1, 3, '0.50', 'NG', '0. Идеята беше валидацията да става в PHP, а не в JS, както е при теб. Избягвай смесването на едно място на HTML , JS и PHP.                                                                                                                                            1. HTML - Използвай семантичен HTML. Атрибутите на елементите се разделят с празно пространство, а не със запетая. Избягвай използването на  атрибути като onsubmit, чието действие можеш да постигнеш и с JS, както и на тага <br>.                                                                                                                       2. JS - Избягвай използването на alert.                                                                                    3. PHP - Хубаво е при обработка на заявки в PHP винаги първо да проверяваш дали имаш записано нещо в суперглобалната променлива $_POST и съответно дали има елементи в $_POST с очаквания ключ. Опитай се да си идентираш по-добре кода. Опитай се да използваш консистентно или само единични, или само двойни кавички, както и стриктно сравнение с \"===\".                                                            ', '2019-06-10 22:00:09'),
(303, 50, 1, 3, '0.95', 'NG', 'Избягвай смесването на HTML и PHP в един файл. По-добре ги раздели в два отделни, с цел постигане на модулност и по-лесна поддръжка в бъдеще. Опитай се да си идентираш по-добре кода. След като unset-неш сесията е хубаво и да я destroy-неш.Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Опитай се да използваш консистентно само един вид кавички.', '2019-06-10 22:00:09'),
(304, 118, 1, 3, '0.10', 'NG', '0. Идентирай си по-добре кода.                                                                                               1. HTML - Използвай семантичен HTML.В началото си пропуснал <!DOCTYPE html>. Избягвай използването на тага <br>.                                                                         2. PHP - Данните от POST заявка се взимат от суперглобалната променлива $_POST. Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen().  Написаната сортировка няма да сортира масива по указания начин, дори и да имаше такъв.', '2019-06-10 22:00:09'),
(305, 23, 1, 3, '0.20', 'NG', 'Избягвай смесването на HTML и PHP в един файл. По-добре ги раздели в два отделни, с цел постигане на модулност и по-лесна поддръжка в бъдеще. Опитай се да си идентираш по-добре кода. Опитай се да използваш консистентно или само единични, или само двойни кавички, както и стриктно сравнение с \"===\".  Липсва проверка за непопълнени полета. Използвай семантичен HTML. Методът test_input() е едно към едно като на Елизка (61980). Домашното ти дава грешка при изпълнение.', '2019-06-10 22:00:09'),
(306, 51, 1, 3, '0.70', 'NG', '1. HTML - Използвай малко повече семантичен HTML. Избягвай използването на атрибути като maxlength, min, max, step, required, чието действие може да бъде получено и с JS и PHP. Избягвай използването на тага <span>. Submit бутона е по-добре да е input от тип submit.                                     2. PHP - Избягвай смесването на JS и PHP на едно място.    Опитай се да използваш консистентно или само единични, или само двойни кавички. Липсва проверка за непопълнени полета.  Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Масивът не е сортиран по указания начин.                                                                                                    3. При теб валидацията се случва в HTML, а не в PHP, каквато беше и идеята на домашното.                  ', '2019-06-10 22:00:09'),
(307, 120, 1, 3, '0.20', 'NG', '0. При изпращане на формата изкарва грешки и нищо не се случва.                1. HTML - В HTML не могат да се използват user-defined атрибути. За да изпратиш данни от някое input поле на сървъра, се използва атрибут name. Използвай семантичен HTML.                                                                                 2. PHP - Давай по-разбираеми имена на файловете. Не е много окей валидацията да я правиш директно в конструктора. В класа ArrayOfStudents липсва конструктор. Вместо !is_null($_SESSION), по-добре използвай !$_SESSION. Липсва даденият в условието масив.                                      3. С 61999 и 62087 имате идентично сортиране (разликата е само в имената на ключовете на масива $sort).', '2019-06-10 22:00:09'),
(308, 24, 1, 3, '0.60', 'NG', 'Избягвай смесването на HTML и PHP в един файл. По-добре ги раздели в два отделни, с цел постигане на модулност и по-лесна поддръжка в бъдеще. Опитай се да си идентираш по-добре кода. Липсва проверка за празни полета. Не зачиствай формата, когато някое от полетата е невалидно. Не е много user friendly, когато излезе съобщение за невалидно поле, потребителят да трябва да попълва всичко наново. Масивът не е сортиран. Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Опитай се да използваш консистентно само един вид кавички.', '2019-06-10 22:00:09'),
(309, 121, 1, 3, '0.90', 'NG', '0. В случая част от валидацията на формата се случва в HTML. Идеята беше да се направи изцяло в PHP скрипта.                                                                                                            1. HTML - Използвай семантичен HTML. Избягвай да слагаш атрибути като maxlength, min, max, step, required, чието действие може да бъде получено и с JS и PHP.                                                                                                              2. JS - Не е препоръчително да използваш JQuery. Гледай в другите домашни и в проекта да не ги използваш.                                                                                3. PHP - Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Опитай се да използваш консистентно само един вид кавички.                                                                   ', '2019-06-10 22:00:09'),
(310, 97, 1, 3, '0.75', 'NG', '0. Избягвай смесването на HTML, CSS и PHP на едно място.                                           1. HTML - Използвай семантичен HTML. Избягвай иползването на атрибут style.                                                                                                                                                               2. PHP - Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Не е много окей да зачистваш формата, когато извеждаш съобщения за открити грешки. Опитай се да използваш консистентно или само единични, или само двойни кавички.', '2019-06-10 22:00:09'),
(311, 25, 1, 3, '0.55', 'NG', '0. Предадено с 1 ден закъснение. Опитай се да си идентираш по-добре кода.                                                                                                                                                         1. HTML - Използвай семантичен HTML.  Избягвай използването на тага <br> и на атрибут required.                                                                                                               2. PHP -  Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Опитай се да използваш консистентно или само единични, или само двойни кавички. Масивът не е сортиран по указания начин. Очакваше се да се върнат съобщения с всички открити грешки, а не само с една. Данните, които са на кирилица, не се отпечатват добре. Подай като втори параметър на метода json_encode JSON_UNESCAPED_UNICODE, за да се изпринтят нещата на кирилица както трябва.  ', '2019-06-10 22:00:09'),
(312, 98, 1, 3, '0.20', 'NG', '0. Хубаво си ползвал БД, въпреки че тук не се изискваше да се използват, но можеше да предоставиш и код за конфигурация на БД, за да мога да я подкарам и при мен. Опитай се да си разделиш кода на отделни модули и да не смесваш на едно място HTML, CSS, PHP. Идентирай си по-добре кода. При изпращане на правилно попълнена форма нищо не се случва.                          1. HTML - Използвай семантичен HTML.                                                                                   2. PHP - За връзка с БД е препоръчително да се използва PDO, а не mysqli. В PHP нямаме ключова дума var. Имената на класовете обикновено се пишат с главна буква. Хубаво е да укажеш, че get методите ти са public. Липсва валидация за полето за име, както и за непопълнени полета. Липсва даденият масив. Хубаво е при обработка на заявки в PHP винаги първо да проверяваш дали имаш записано нещо в суперглобалната променлива $_POSTОпитай се да използваш консистентно или само единични, или само двойни кавички, както и стриктно сравнение с \"===\". Идентирай си по-добре кода.', '2019-06-10 22:00:09'),
(313, 122, 1, 3, '0.30', 'NG', '0. Избягвай смесването на HTML, JS и PHP на едно място. Идентирай си по-добре кода.                                                                                                                                          1. HTML - Използвай семантичен HTML.                                                                                     2. PHP - Масивът не е сортиран по указания начин. Не е много окей да зачистваш формата, когато връщаш съобщения за грешка. На JS кода въобще не му е мястото там, където си го написал, а да не говорим и че никак не е идентиран и променливите могат да имат много по-смислени имена.                                                                                                                                              3. Кодът ти доста прилича на този на Елизка(61980).', '2019-06-10 22:00:09');
INSERT INTO `mark` (`mark_id`, `student_id`, `category_id`, `stage`, `mark_value`, `author`, `comment`, `time_stamp`) VALUES
(314, 73, 1, 3, '0.30', 'NG', '0. Избягвай смесването на HTML, CSS и PHP на едно място. Опитай се да използваш консистентно или само единични, или само двойни кавички, както и стриктно сравнение с \"===\". Идентирай си по-добре кода.                       1. HTML - Използвай семантичен HTML.                                                                                 2. PHP - Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). Използвай \"по-четими\" имена на променливите. Масивът не е сортиран по указания начин. Като цяло кодът ти е доста подобен на този на Елизка (61980) и Петя (62052).', '2019-06-10 22:00:09'),
(315, 26, 1, 3, '0.50', 'NG', '0. Масивът не е сортиран по указания начин. Избягвай смесването на HTML и PHP на едно място. Идентирай си по-добре кода. Използвай \"по-четими\" имена на функции и променливи.                                                                                     1. HTML - Хубаво е да имаш цялата HTML структура, а не само body частта, както и да използваш семантичен HTML. Избягвай използването на тагове като <b>, чието действие можеш да постигнеш и със CSS.                                     2. PHP - Не виждам смисъл да използваш клас, като всички данни са ти public, а и нямаш нито конструктор, нито някакви методи за работа с данните на класа. Хубаво е винаги първо да проверяваш дали наистина имаш изпратена POST заявка, преди да вземеш данните от нея. Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen().', '2019-06-10 22:00:09'),
(316, 124, 1, 3, '0.50', 'NG', '1. HTML - Използвай семантичен HTML. Избягвай използването на атрибут required, чието действие можеш да постигнеш с JS и PHP.                                            2. PHP - Хубаво е винаги първо да проверяваш дали наистина имаш изпратена POST заявка.  Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen().   Опитай се да използваш консистентно или само единични, или само двойни кавички. Липсва проверка за непопълнени полета. Не виждам смисъл да използваш клас, като данните му са public.                                                                                                                                                      3. Логиката на кода ти доста се доближава до тази на Васка (855287).', '2019-06-10 22:00:09'),
(317, 125, 1, 3, '1.00', 'NG', 'Избягвай смесването на HTML и CSS в един файл.Когато взимаш дължината на стринг, който е на кирилица, е по-добре да използваш метода mb_strlen(), вместо strlen(). ', '2019-06-10 22:00:09'),
(318, 30, 1, 4, '60.00', 'PS', 'Prepared statements should be used (do not rely on validation only). Special chars (html, js ...) should be escaped (do not rely on validation only ). Password should be hashed (and salt should be generated). Missing endpoints. Wrong response.', '2019-06-10 22:00:19'),
(319, 82, 1, 4, '98.00', 'PS', 'Insecure salt. Weak hashing - password_hash(...) is preferred.', '2019-06-10 22:00:19'),
(320, 117, 1, 4, '133.00', 'PS', 'Weak hashing - password_hash(...) is preferred. Prepared statements are preferred. Register function is vulnerable(privilege escalation - by exploiting mysqli_insert_id() usage). No REST API. No users GET and user DELETE endpoints.', '2019-06-10 22:00:19'),
(321, 64, 1, 4, '110.00', 'PS', 'Special chars (html, js ...) should be escaped (do not rely on validation only ).', '2019-06-10 22:00:19'),
(322, 62, 1, 4, '200.00', 'PS', 'Special chars (html, js ...) should be escaped (do not rely on validation only ).', '2019-06-10 22:00:19'),
(323, 66, 1, 4, '110.00', 'PS', 'Special chars (html, js ...) should be escaped (do not rely on validation only ).', '2019-06-10 22:00:19'),
(324, 107, 1, 4, '200.00', 'PS', 'Special chars (html, js ...) should be escaped (do not rely on validation only ).', '2019-06-10 22:00:19'),
(325, 21, 1, 4, '100.00', 'PS', 'Special chars (html, js ...) should be escaped (do not rely on validation only ).', '2019-06-10 22:00:19'),
(326, 97, 1, 4, '100.00', 'PS', NULL, '2019-06-10 22:00:19'),
(327, 115, 1, 4, '148.00', 'PS', 'Wrong naming.  No salt. password_hash(...) is preferred. Special chars (html, js ...) should be escaped (do not rely on validation only ).', '2019-06-10 22:00:19'),
(328, 121, 1, 4, '100.00', 'PS', 'Wrong file extension. Absolute paths \"include_once \'C:\\xampp\\htdocs\\api\\database.php\'\" - Why?', '2019-06-10 22:00:19'),
(329, 44, 1, 4, '100.00', 'PS', 'Wrong naming. Wrong file extension.', '2019-06-10 22:00:19'),
(330, 72, 1, 4, '100.00', 'PS', 'Flat structure. No OOP design (even no basic code separation). No SQL scripts exported.', '2019-06-10 22:00:19'),
(331, 45, 1, 4, '100.00', 'PS', 'Special chars (html, js ...) should be escaped (do not rely on validation only ).', '2019-06-10 22:00:19'),
(332, 33, 1, 4, '200.00', 'PS', 'No SQL scripts exported. Special chars (html, js ...) should be escaped (do not rely on validation only ).', '2019-06-10 22:00:19'),
(333, 125, 1, 4, '60.00', 'PS', 'Wrong naming. Special chars (html, js ...) should be escaped (do not rely on validation only ). No delete endpoint. Duplicated code.', '2019-06-10 22:00:19'),
(334, 23, 1, 4, '80.00', 'PS', 'Wrong file extension. Prepared statements should be used (do not rely on validation only). Special chars (html, js ...) should be escaped (do not rely on validation only ). Weak hashing - password_hash(...) is preferred. No salt. Poor design.', '2019-06-10 22:00:19'),
(335, 49, 1, 4, '196.00', 'PS', '// include dirname(__FILE__).\"\\..\\common\\user.php\". Special chars (html, js ...) should be escaped (do not rely on validation only ). Wrong return type.', '2019-06-10 22:00:19'),
(336, 31, 1, 4, '98.00', 'PS', 'Standard SQL is preferred. Weak hashing - password_hash(...) is preferred. No salt.', '2019-06-10 22:00:19'),
(337, 39, 1, 4, '90.00', 'PS', 'Email not escaped (in SQL). Special chars (html, js ...) should be escaped (do not rely on validation only ). Encapsulation?', '2019-06-10 22:00:19'),
(338, 70, 1, 4, '200.00', 'PS', NULL, '2019-06-10 22:00:19'),
(339, 16, 1, 4, '98.00', 'PS', 'Weak hashing - password_hash(...) is preferred. No salt.', '2019-06-10 22:00:19'),
(340, 24, 1, 4, '98.00', 'PS', 'No OOP design. Duplicated code. Weak hashing - password_hash(...) is preferred. No salt.', '2019-06-10 22:00:19'),
(341, 79, 1, 4, '80.00', 'PS', 'Prepared statements should be used (do not rely on validation only). Special chars (html, js ...) should be escaped (do not rely on validation only ). Flat file structure.', '2019-06-10 22:00:19'),
(342, 54, 1, 4, '180.00', 'PS', 'Prepared statements should be used (do not rely on validation only). Special chars (html, js ...) should be escaped (do not rely on validation only ).Duplicated code.', '2019-06-10 22:00:19'),
(343, 7, 1, 4, '140.00', 'PS', 'Prepared statements should be used (do not rely on validation only). Why print_r(...) is used? Authorization?', '2019-06-10 22:00:19'),
(344, 14, 1, 4, '200.00', 'PS', 'Wrong response: {\"error\":\"Успешно излязохте от системата. \"}. Flat file structure.', '2019-06-10 22:00:19'),
(345, 40, 1, 4, '110.00', 'PS', 'Wrong naming. Special chars (html, js ...) should be escaped (do not rely on validation only ). ', '2019-06-10 22:00:19'),
(346, 12, 1, 4, '60.00', 'PS', 'Prepared statements should be used (do not rely on validation only). Special chars (html, js ...) should be escaped (do not rely on validation only ). Password should be hashed (and salt should be generated).', '2019-06-10 22:00:19'),
(347, 93, 1, 4, '70.00', 'PS', 'Prepared statements should be used (do not rely on validation only). Special chars (html, js ...) should be escaped (do not rely on validation only ). Endpoints?', '2019-06-10 22:00:19'),
(348, 51, 1, 4, '100.00', 'PS', NULL, '2019-06-10 22:00:19'),
(349, 105, 1, 4, '200.00', 'PS', NULL, '2019-06-10 22:00:19'),
(350, 88, 1, 4, '60.00', 'PS', 'Wrong naming. No salt. Prepared statements should be used (do not rely on validation only). Special chars (html, js ...) should be escaped (do not rely on validation only ). No users and delete endpoints.', '2019-06-10 22:00:19'),
(351, 43, 1, 4, '90.00', 'PS', 'Password should be hashed (and salt should be generated). No salt. Model name does not make sense.', '2019-06-10 22:00:19'),
(352, 110, 1, 4, '60.00', 'PS', 'Wrong file type. No endpoints - hardcoded static data.', '2019-06-10 22:00:19'),
(353, 55, 1, 4, '60.00', 'PS', 'No delete ednpoint. Default password should be hashed.', '2019-06-10 22:00:19'),
(354, 109, 1, 4, '100.00', 'PS', NULL, '2019-06-10 22:00:19'),
(355, 83, 1, 4, '100.00', 'PS', NULL, '2019-06-10 22:00:19'),
(356, 69, 1, 4, '90.00', 'PS', 'Prepared statements in delete endpoint? Special chars (html, js ...) should be escaped (do not rely on validation only ).', '2019-06-10 22:00:19'),
(357, 80, 1, 4, '100.00', 'PS', 'Special chars (html, js ...) should be escaped (do not rely on validation only ).', '2019-06-10 22:00:19'),
(358, 100, 1, 4, '100.00', 'PS', 'Wrong file type.', '2019-06-10 22:00:19'),
(359, 84, 1, 4, '80.00', 'PS', 'Default password should be hashed. Prepared statements should be used (do not rely on validation only). Special chars (html, js ...) should be escaped (do not rely on validation only ). No OOP design. Avoid usage of $GLOBALS.', '2019-06-10 22:00:19'),
(360, 87, 1, 4, '100.00', 'PS', 'Default password should be hashed.', '2019-06-10 22:00:19'),
(361, 78, 1, 4, '80.00', 'PS', 'Wrong naming. Prepared statements should be used (do not rely on validation only). Special chars (html, js ...) should be escaped (do not rely on validation only ).', '2019-06-10 22:00:19'),
(362, 68, 1, 4, '100.00', 'PS', 'Special chars (html, js ...) should be escaped (do not rely on validation only ).', '2019-06-10 22:00:19'),
(363, 85, 1, 4, '200.00', 'PS', 'Special chars (html, js ...) should be escaped (do not rely on validation only ).', '2019-06-10 22:00:19'),
(364, 4, 1, 4, '90.00', 'PS', 'Wrong file type. No OOP design.Prepared statements in delete endpoint? Special chars (html, js ...) should be escaped (do not rely on validation only ).', '2019-06-10 22:00:19'),
(365, 48, 1, 4, '100.00', 'PS', 'Flat file structure. Default password should be hashed.', '2019-06-10 22:00:19'),
(366, 71, 1, 4, '100.00', 'PS', 'Flat file structure.Special chars (html, js ...) should be escaped (do not rely on validation only ).', '2019-06-10 22:00:19'),
(367, 86, 1, 4, '180.00', 'PS', 'Prepared statements should be used (do not rely on validation only). Special chars (html, js ...) should be escaped (do not rely on validation only ).', '2019-06-10 22:00:19'),
(368, 11, 1, 4, '100.00', 'PS', 'No OOP design. Flat structure. Wrong API url - index.php instead of api.php. Default password should be hashed. Special chars (html, js ...) should be escaped (do not rely on validation only ).', '2019-06-10 22:00:19'),
(369, 9, 1, 4, '100.00', 'PS', 'Default password should be hashed. Encapsulatio? ', '2019-06-10 22:00:19'),
(370, 35, 1, 4, '100.00', 'PS', 'SQL schema should be provided. Default user should be created. Special chars (html, js ...) should be escaped (do not rely on validation only ).', '2019-06-10 22:00:20'),
(371, 46, 1, 4, '100.00', 'PS', 'Special chars (html, js ...) should be escaped (do not rely on validation only ).', '2019-06-10 22:00:20'),
(372, 122, 1, 4, '98.00', 'PS', 'Weak hashing. No salt. Why is html returned by endpoints? Default password should be hashed.', '2019-06-10 22:00:20'),
(373, 20, 1, 4, '183.00', 'PS', 'elseif(get_role_from_cookie() == \'User\'){error_set(\'You have no permissions!\'); } - Only Admin user should be able to delete users. No OOP design. Flat structure. Open-closed principle? Duplicated code. Single responsibility principle? ', '2019-06-10 22:00:20'),
(374, 17, 1, 4, '110.00', 'PS', 'Default password should be hashed.  Open-closed principle? Duplicated code. Single responsibility principle? ', '2019-06-10 22:00:20'),
(375, 41, 1, 4, '90.00', 'PS', 'Prepared statements in delete endpoint? Encapsulation?', '2019-06-10 22:00:20'),
(376, 18, 1, 4, '100.00', 'PS', 'Standard SQL is prefered. JSON_ENCODE? No OOP design. Flat structure.  Open-closed principle? Duplicated code. Single responsibility principle? Special chars (html, js ...) should be escaped (do not rely on validation only ). Paths?', '2019-06-10 22:00:20'),
(377, 58, 1, 4, '110.00', 'PS', 'Special chars (html, js ...) should be escaped (do not rely on validation only ). Default password should be hashed. ', '2019-06-10 22:00:20'),
(378, 10, 1, 4, '100.00', 'PS', 'Encapsulation? Special chars (html, js ...) should be escaped (do not rely on validation only ).', '2019-06-10 22:00:20'),
(379, 8, 1, 4, '160.00', 'PS', 'Prepared statements should be used (do not rely on validation only): \"SELECT * FROM users WHERE \'$email\' = email\".  Special chars (html, js ...) should be escaped (do not rely on validation only ). Paths? Wrong authorization: ', '2019-06-10 22:00:20'),
(380, 108, 1, 4, '200.00', 'PS', 'Special chars (html, js ...) should be escaped (do not rely on validation only ). Unexpected output:  echo \"Email: \" . $email;', '2019-06-10 22:00:20'),
(381, 90, 1, 4, '98.00', 'PS', 'Wrong naming. Special chars (html, js ...) should be escaped (do not rely on validation only ).  No OOP design. Flat structure.  Open-closed principle? Duplicated code. Single responsibility principle? Special chars (html, js ...) ', '2019-06-10 22:00:20'),
(382, 37, 1, 4, '200.00', 'PS', 'DAO? Illegal LIKE usage:  $sql = \"SELECT id, name, lastname, email, role, password FROM $this->table WHERE email LIKE :email;\"; Special chars (html, js ...) should be escaped (do not rely on validation only ). ', '2019-06-10 22:00:20'),
(383, 92, 1, 4, '80.00', 'PS', 'Encapsulation? Special chars (html, js ...) should be escaped (do not rely on validation only ). Global variables should be avoided. Prepared statements? ...  $query = \"INSERT INTO \" . $this->tableName . \"', '2019-06-10 22:00:20'),
(384, 38, 1, 4, '100.00', 'PS', 'Wrong file type. Default password salt? Special chars (html, js ...) should be escaped (do not rely on validation only ). ', '2019-06-10 22:00:20'),
(385, 116, 1, 4, '90.00', 'PS', 'No OOP desing. Password should be hashed (and salt should be generated).', '2019-06-10 22:00:20'),
(386, 106, 1, 4, '100.00', 'PS', 'Default password should be hashed. Encapsulation? DAO?', '2019-06-10 22:00:20'),
(387, 50, 1, 4, '100.00', 'PS', 'Only sources and database schema should be uploaded.', '2019-06-10 22:00:20'),
(388, 102, 1, 4, '78.00', 'PS', 'Wrong file type. No salt. Weak hashing - password_hash(...) is preferred. Special chars (html, js ...) should be escaped (do not rely on validation only ). Paths? No delete endpoint.', '2019-06-10 22:00:20'),
(389, 29, 1, 4, '60.00', 'PS', 'Wrong naming. Flat structure. No OOP design. Paths? Endpoints?', '2019-06-10 22:00:20'),
(390, 101, 1, 4, '200.00', 'PS', ' Open-closed principle? Single responsibility principle? SO: true (logout - POST is preferred)', '2019-06-10 22:00:20'),
(391, 47, 1, 4, '78.00', 'PS', 'Encapsulation? Special chars (html, js ...) should be escaped (do not rely on validation only ). Weak hashing. No salt. Prepared statements should be used (do not rely on validation only): ', '2019-06-10 22:00:20'),
(392, 57, 1, 4, '100.00', 'PS', 'Wrong file type. Wrong naming. Special chars (html, js ...) should be escaped (do not rely on validation only ).', '2019-06-10 22:00:20'),
(393, 67, 1, 4, '80.00', 'PS', 'Special chars (html, js ...) should be escaped (do not rely on validation only ). Paths? No OOP design. Flat structure. Prepared statements should be used (do not rely on validation only).', '2019-06-10 22:00:20'),
(394, 81, 1, 4, '98.00', 'PS', 'Weak hashing - password_hash(...) is preferred. No salt. Special chars (html, js ...) should be escaped (do not rely on validation only ).', '2019-06-10 22:00:20'),
(395, 42, 1, 4, '80.00', 'PS', 'Special chars (html, js ...) should be escaped (do not rely on validation only ). No OOP design. Flat structure. Prepared statements should be used (do not rely on validation only).', '2019-06-10 22:00:20'),
(396, 73, 1, 4, '88.00', 'PS', 'Weak hashing - password_hash(...) is preferred. No salt. Prepared statements in delete endpoint?  Format?  Open-closed principle? Single responsibility principle? Absolute paths: include_once \'E:\\XAMP\\XAMPcontinue\\htdocs\\DB.php\' ', '2019-06-10 22:00:20'),
(397, 96, 1, 4, '88.00', 'PS', 'Wrong file type.Special chars (html, js ...) should be escaped (do not rely on validation only ). No OOP design. Flat structure.  Weak hashing - password_hash(...) is preferred. No salt. Default password is not hashed.', '2019-06-10 22:00:20'),
(398, 100, 1, 5, '100.00', 'MG', NULL, '2019-06-10 22:00:29'),
(399, 4, 1, 5, '10.00', 'MG', 'jquery', '2019-06-10 22:00:29'),
(400, 103, 1, 5, '90.00', 'MG', 'code style', '2019-06-10 22:00:29'),
(401, 31, 1, 5, '95.00', 'MG', NULL, '2019-06-10 22:00:29'),
(402, 33, 1, 5, '70.00', 'MG', 'no error info', '2019-06-10 22:00:29'),
(403, 78, 1, 5, '80.00', 'MG', 'no preventDefault', '2019-06-10 22:00:29'),
(404, 84, 1, 5, '100.00', 'MG', NULL, '2019-06-10 22:00:29'),
(405, 62, 1, 5, '95.00', 'MG', 'only 1 error shown', '2019-06-10 22:00:29'),
(406, 9, 1, 5, '100.00', 'MG', NULL, '2019-06-10 22:00:29'),
(407, 70, 1, 5, '100.00', 'MG', NULL, '2019-06-10 22:00:29'),
(408, 91, 1, 5, '90.00', 'MG', 'code style', '2019-06-10 22:00:29'),
(409, 8, 1, 5, '100.00', 'MG', NULL, '2019-06-10 22:00:29'),
(410, 10, 1, 5, '100.00', 'MG', NULL, '2019-06-10 22:00:29'),
(411, 110, 1, 5, '90.00', 'MG', 'only general error message shown', '2019-06-10 22:00:29'),
(412, 101, 1, 5, '100.00', 'MG', NULL, '2019-06-10 22:00:29'),
(413, 109, 1, 5, '95.00', 'MG', 'mayvbe wrong data structure for errors', '2019-06-10 22:00:29'),
(414, 90, 1, 5, '0.00', 'MG', 'same as 62089', '2019-06-10 22:00:29'),
(415, 47, 1, 5, '90.00', 'MG', 'code style', '2019-06-10 22:00:29'),
(416, 24, 1, 5, '70.00', 'MG', 'he did not need that jquery ', '2019-06-10 22:00:29'),
(417, 18, 1, 5, '100.00', 'MG', NULL, '2019-06-10 22:00:29'),
(418, 41, 1, 5, '100.00', 'MG', NULL, '2019-06-10 22:00:29'),
(419, 15, 1, 5, '100.00', 'MG', NULL, '2019-06-10 22:00:29'),
(420, 72, 1, 5, '50.00', 'MG', 'jquery again', '2019-06-10 22:00:29'),
(421, 87, 1, 5, '100.00', 'MG', NULL, '2019-06-10 22:00:29'),
(422, 71, 1, 5, '100.00', 'MG', NULL, '2019-06-10 22:00:29'),
(423, 66, 1, 5, '70.00', 'MG', 'jquery', '2019-06-10 22:00:29'),
(424, 115, 1, 5, '70.00', 'MG', 'jquery', '2019-06-10 22:00:29'),
(425, 64, 1, 5, '95.00', 'MG', 'message element added on every submit', '2019-06-10 22:00:29'),
(426, 32, 1, 5, '60.00', 'MG', 'could send form before user is ready', '2019-06-10 22:00:29'),
(427, 22, 1, 5, '96.00', 'MG', 'some edge cases missed for class attributes', '2019-06-10 22:00:29'),
(428, 59, 1, 5, '0.00', 'MG', NULL, '2019-06-10 22:00:29'),
(429, 96, 1, 5, '0.00', 'MG', 'same as 62063', '2019-06-10 22:00:29'),
(430, 79, 1, 5, '95.00', 'MG', 'only 1 error shown', '2019-06-10 22:00:29'),
(431, 54, 1, 5, '100.00', 'MG', NULL, '2019-06-10 22:00:29'),
(432, 108, 1, 5, '100.00', 'MG', NULL, '2019-06-10 22:00:29'),
(433, 12, 1, 5, '90.00', 'MG', 'only general error message shown', '2019-06-10 22:00:29'),
(434, 48, 1, 5, '50.00', 'MG', 'does not work properly', '2019-06-10 22:00:29'),
(435, 116, 1, 5, '10.00', 'MG', 'jquery', '2019-06-10 22:00:29'),
(436, 7, 1, 5, '10.00', 'MG', 'jquery', '2019-06-10 22:00:29'),
(437, 45, 1, 5, '100.00', 'MG', NULL, '2019-06-10 22:00:29'),
(438, 82, 1, 5, '70.00', 'MG', 'jquery', '2019-06-10 22:00:29'),
(439, 89, 1, 5, '95.00', 'MG', 'only 1 error shown', '2019-06-10 22:00:29'),
(440, 55, 1, 5, '100.00', 'MG', NULL, '2019-06-10 22:00:29'),
(441, 20, 1, 5, '90.00', 'MG', 'code style', '2019-06-10 22:00:29'),
(442, 107, 1, 5, '100.00', 'MG', NULL, '2019-06-10 22:00:29'),
(443, 121, 1, 5, '10.00', 'MG', 'jquery', '2019-06-10 22:00:29'),
(444, 38, 1, 5, '100.00', 'MG', NULL, '2019-06-10 22:00:29'),
(445, 42, 1, 5, '100.00', 'MG', NULL, '2019-06-10 22:00:29'),
(446, 120, 1, 5, '10.00', 'MG', 'no js', '2019-06-10 22:00:29'),
(447, 57, 1, 5, '95.00', 'MG', 'only 1 error shown', '2019-06-10 22:00:29'),
(448, 105, 1, 5, '70.00', 'MG', 'jquery', '2019-06-10 22:00:29'),
(449, 58, 1, 5, '100.00', 'MG', NULL, '2019-06-10 22:00:29'),
(450, 35, 1, 5, '95.00', 'MG', 'only 1 error shown', '2019-06-10 22:00:29'),
(451, 50, 1, 5, '10.00', 'MG', 'jquery', '2019-06-10 22:00:29'),
(452, 44, 1, 5, '90.00', 'MG', 'code style', '2019-06-10 22:00:29'),
(453, 14, 1, 5, '85.00', 'MG', 'some code style and not waiting for document to load', '2019-06-10 22:00:29'),
(454, 97, 1, 5, '100.00', 'MG', NULL, '2019-06-10 22:00:29'),
(455, 111, 1, 5, '100.00', 'MG', NULL, '2019-06-10 22:00:29'),
(456, 80, 1, 5, '100.00', 'MG', NULL, '2019-06-10 22:00:29'),
(457, 37, 1, 5, '100.00', 'MG', NULL, '2019-06-10 22:00:29'),
(458, 11, 1, 5, '50.00', 'MG', 'does not work properly', '2019-06-10 22:00:29'),
(459, 17, 1, 5, '50.00', 'MG', 'jquery used, also not clearing old error messages', '2019-06-10 22:00:29'),
(460, 77, 1, 5, '100.00', 'MG', NULL, '2019-06-10 22:00:29'),
(461, 95, 1, 5, '80.00', 'MG', 'not clearing old error messages', '2019-06-10 22:00:29'),
(462, 51, 1, 5, '85.00', 'MG', 'some selectors missing for showing errors', '2019-06-10 22:00:29'),
(463, 30, 1, 5, '10.00', 'MG', 'jquery and alert', '2019-06-10 22:00:29'),
(464, 46, 1, 5, '10.00', 'MG', 'jquery', '2019-06-10 22:00:29'),
(465, 49, 1, 5, '70.00', 'MG', 'jquery', '2019-06-10 22:00:29'),
(466, 67, 1, 5, '80.00', 'MG', 'code structured for only general error message show', '2019-06-10 22:00:29'),
(467, 92, 1, 5, '80.00', 'MG', 'only 1 error shown, also used absolute url for submit', '2019-06-10 22:00:29'),
(468, 68, 1, 5, '100.00', 'MG', NULL, '2019-06-10 22:00:29'),
(469, 63, 1, 5, '55.00', 'MG', 'form cannot be submitted', '2019-06-10 22:00:29'),
(470, 34, 1, 5, '70.00', 'MG', 'smart, but not showing the errors correctly', '2019-06-10 22:00:29'),
(471, 61, 1, 5, '70.00', 'MG', 'jquery', '2019-06-10 22:00:29'),
(472, 23, 1, 5, '80.00', 'MG', 'code structured for only general error message show', '2019-06-10 22:00:29'),
(473, 83, 1, 5, '100.00', 'MG', NULL, '2019-06-10 22:00:29'),
(474, 69, 1, 5, '90.00', 'MG', 'code style', '2019-06-10 22:00:29'),
(475, 102, 1, 5, '100.00', 'MG', NULL, '2019-06-10 22:00:29'),
(476, 86, 1, 5, '100.00', 'MG', NULL, '2019-06-10 22:00:29'),
(477, 73, 1, 5, '90.00', 'MG', 'code formatting', '2019-06-10 22:00:29'),
(478, 122, 1, 5, '60.00', 'MG', 'could send form before user is ready', '2019-06-10 22:00:29'),
(479, 125, 1, 5, '50.00', 'MG', 'form is submitted even when invalid, errors are not cleaned when form is valid', '2019-06-10 22:00:29');

-- --------------------------------------------------------

--
-- Table structure for table `student`
--

CREATE TABLE `student` (
  `student_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `fn` int(11) NOT NULL,
  `student_group` int(11) NOT NULL,
  `speciality` varchar(255) NOT NULL,
  `time_stamp` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `student`
--

INSERT INTO `student` (`student_id`, `user_id`, `fn`, `student_group`, `speciality`, `time_stamp`) VALUES
(1, 3, 61824, 1, 'СИ(рб) - 2016', '2019-06-10 21:58:56'),
(2, 4, 61872, 1, 'СИ(рб) - 2016', '2019-06-10 21:58:56'),
(3, 5, 61875, 1, 'СИ(рб) - 2016', '2019-06-10 21:58:56'),
(4, 6, 61878, 1, 'СИ(рб) - 2016', '2019-06-10 21:58:56'),
(5, 7, 61909, 1, 'СИ(рб) - 2016', '2019-06-10 21:58:57'),
(6, 8, 61928, 1, 'СИ(рб) - 2016', '2019-06-10 21:58:57'),
(7, 9, 61974, 1, 'СИ(рб) - 2016', '2019-06-10 21:58:57'),
(8, 10, 61978, 1, 'СИ(рб) - 2016', '2019-06-10 21:58:57'),
(9, 11, 61985, 1, 'СИ(рб) - 2016', '2019-06-10 21:58:57'),
(10, 12, 61996, 1, 'СИ(рб) - 2016', '2019-06-10 21:58:57'),
(11, 13, 61997, 1, 'СИ(рб) - 2016', '2019-06-10 21:58:58'),
(12, 14, 62000, 1, 'СИ(рб) - 2016', '2019-06-10 21:58:58'),
(13, 15, 62031, 1, 'СИ(рб) - 2016', '2019-06-10 21:58:58'),
(14, 16, 62033, 1, 'СИ(рб) - 2016', '2019-06-10 21:58:58'),
(15, 17, 62040, 1, 'СИ(рб) - 2016', '2019-06-10 21:58:58'),
(16, 18, 62042, 1, 'СИ(рб) - 2016', '2019-06-10 21:58:58'),
(17, 19, 62043, 1, 'СИ(рб) - 2016', '2019-06-10 21:58:59'),
(18, 20, 62052, 1, 'СИ(рб) - 2016', '2019-06-10 21:58:59'),
(19, 21, 62053, 1, 'СИ(рб) - 2016', '2019-06-10 21:58:59'),
(20, 22, 62072, 1, 'СИ(рб) - 2016', '2019-06-10 21:58:59'),
(21, 23, 62082, 1, 'СИ(рб) - 2016', '2019-06-10 21:58:59'),
(22, 24, 62087, 1, 'СИ(рб) - 2016', '2019-06-10 21:58:59'),
(23, 25, 62098, 1, 'СИ(рб) - 2016', '2019-06-10 21:59:00'),
(24, 26, 62104, 1, 'СИ(рб) - 2016', '2019-06-10 21:59:00'),
(25, 27, 62108, 1, 'СИ(рб) - 2016', '2019-06-10 21:59:00'),
(26, 28, 855280, 1, 'СИ(рб) - 2016', '2019-06-10 21:59:00'),
(27, 29, 61894, 2, 'СИ(рб) - 2016', '2019-06-10 21:59:00'),
(28, 30, 61913, 2, 'СИ(рб) - 2016', '2019-06-10 21:59:00'),
(29, 31, 61979, 2, 'СИ(рб) - 2016', '2019-06-10 21:59:01'),
(30, 32, 61980, 2, 'СИ(рб) - 2016', '2019-06-10 21:59:01'),
(31, 33, 61982, 2, 'СИ(рб) - 2016', '2019-06-10 21:59:01'),
(32, 34, 61983, 2, 'СИ(рб) - 2016', '2019-06-10 21:59:01'),
(33, 35, 61984, 2, 'СИ(рб) - 2016', '2019-06-10 21:59:01'),
(34, 36, 61986, 2, 'СИ(рб) - 2016', '2019-06-10 21:59:01'),
(35, 37, 61987, 2, 'СИ(рб) - 2016', '2019-06-10 21:59:02'),
(36, 38, 61989, 2, 'СИ(рб) - 2016', '2019-06-10 21:59:02'),
(37, 39, 61999, 2, 'СИ(рб) - 2016', '2019-06-10 21:59:02'),
(38, 40, 62001, 2, 'СИ(рб) - 2016', '2019-06-10 21:59:02'),
(39, 41, 62010, 2, 'СИ(рб) - 2016', '2019-06-10 21:59:02'),
(40, 42, 62029, 2, 'СИ(рб) - 2016', '2019-06-10 21:59:03'),
(41, 43, 62036, 2, 'СИ(рб) - 2016', '2019-06-10 21:59:03'),
(42, 44, 62041, 2, 'СИ(рб) - 2016', '2019-06-10 21:59:03'),
(43, 45, 62048, 2, 'СИ(рб) - 2016', '2019-06-10 21:59:03'),
(44, 46, 62051, 2, 'СИ(рб) - 2016', '2019-06-10 21:59:03'),
(45, 47, 62058, 2, 'СИ(рб) - 2016', '2019-06-10 21:59:04'),
(46, 48, 62065, 2, 'СИ(рб) - 2016', '2019-06-10 21:59:04'),
(47, 49, 62071, 2, 'СИ(рб) - 2016', '2019-06-10 21:59:04'),
(48, 50, 62078, 2, 'СИ(рб) - 2016', '2019-06-10 21:59:04'),
(49, 51, 62080, 2, 'СИ(рб) - 2016', '2019-06-10 21:59:04'),
(50, 52, 62096, 2, 'СИ(рб) - 2016', '2019-06-10 21:59:04'),
(51, 53, 62100, 2, 'СИ(рб) - 2016', '2019-06-10 21:59:05'),
(52, 54, 61439, 3, 'СИ(рб) - 2016', '2019-06-10 21:59:05'),
(53, 55, 61737, 3, 'СИ(рб) - 2016', '2019-06-10 21:59:05'),
(54, 56, 61976, 3, 'СИ(рб) - 2016', '2019-06-10 21:59:05'),
(55, 57, 61981, 3, 'СИ(рб) - 2016', '2019-06-10 21:59:05'),
(56, 58, 61993, 3, 'СИ(рб) - 2016', '2019-06-10 21:59:06'),
(57, 59, 61998, 3, 'СИ(рб) - 2016', '2019-06-10 21:59:06'),
(58, 60, 62003, 3, 'СИ(рб) - 2016', '2019-06-10 21:59:06'),
(59, 61, 62004, 3, 'СИ(рб) - 2016', '2019-06-10 21:59:06'),
(60, 62, 62005, 3, 'СИ(рб) - 2016', '2019-06-10 21:59:06'),
(61, 63, 62009, 3, 'СИ(рб) - 2016', '2019-06-10 21:59:06'),
(62, 64, 62023, 3, 'СИ(рб) - 2016', '2019-06-10 21:59:07'),
(63, 65, 62027, 3, 'СИ(рб) - 2016', '2019-06-10 21:59:07'),
(64, 66, 62035, 3, 'СИ(рб) - 2016', '2019-06-10 21:59:07'),
(65, 67, 62037, 3, 'СИ(рб) - 2016', '2019-06-10 21:59:07'),
(66, 68, 62046, 3, 'СИ(рб) - 2016', '2019-06-10 21:59:07'),
(67, 69, 62047, 3, 'СИ(рб) - 2016', '2019-06-10 21:59:07'),
(68, 70, 62049, 3, 'СИ(рб) - 2016', '2019-06-10 21:59:08'),
(69, 71, 62062, 3, 'СИ(рб) - 2016', '2019-06-10 21:59:08'),
(70, 72, 62067, 3, 'СИ(рб) - 2016', '2019-06-10 21:59:08'),
(71, 73, 62075, 3, 'СИ(рб) - 2016', '2019-06-10 21:59:08'),
(72, 74, 62095, 3, 'СИ(рб) - 2016', '2019-06-10 21:59:08'),
(73, 75, 62111, 3, 'СИ(рб) - 2016', '2019-06-10 21:59:08'),
(74, 76, 855273, 3, 'СИ(рб) - 2016', '2019-06-10 21:59:08'),
(75, 77, 61906, 4, 'СИ(рб) - 2016', '2019-06-10 21:59:09'),
(76, 78, 61944, 4, 'СИ(рб) - 2016', '2019-06-10 21:59:09'),
(77, 79, 61973, 4, 'СИ(рб) - 2016', '2019-06-10 21:59:09'),
(78, 80, 61977, 4, 'СИ(рб) - 2016', '2019-06-10 21:59:09'),
(79, 81, 61991, 4, 'СИ(рб) - 2016', '2019-06-10 21:59:09'),
(80, 82, 62008, 4, 'СИ(рб) - 2016', '2019-06-10 21:59:09'),
(81, 83, 62016, 4, 'СИ(рб) - 2016', '2019-06-10 21:59:09'),
(82, 84, 62017, 4, 'СИ(рб) - 2016', '2019-06-10 21:59:10'),
(83, 85, 62021, 4, 'СИ(рб) - 2016', '2019-06-10 21:59:10'),
(84, 86, 62034, 4, 'СИ(рб) - 2016', '2019-06-10 21:59:10'),
(85, 87, 62038, 4, 'СИ(рб) - 2016', '2019-06-10 21:59:10'),
(86, 88, 62044, 4, 'СИ(рб) - 2016', '2019-06-10 21:59:10'),
(87, 89, 62045, 4, 'СИ(рб) - 2016', '2019-06-10 21:59:10'),
(88, 90, 62050, 4, 'СИ(рб) - 2016', '2019-06-10 21:59:11'),
(89, 91, 62061, 4, 'СИ(рб) - 2016', '2019-06-10 21:59:11'),
(90, 92, 62063, 4, 'СИ(рб) - 2016', '2019-06-10 21:59:11'),
(91, 93, 62070, 4, 'СИ(рб) - 2016', '2019-06-10 21:59:11'),
(92, 94, 62074, 4, 'СИ(рб) - 2016', '2019-06-10 21:59:11'),
(93, 95, 62079, 4, 'СИ(рб) - 2016', '2019-06-10 21:59:12'),
(94, 96, 62081, 4, 'СИ(рб) - 2016', '2019-06-10 21:59:12'),
(95, 97, 62088, 4, 'СИ(рб) - 2016', '2019-06-10 21:59:12'),
(96, 98, 62089, 4, 'СИ(рб) - 2016', '2019-06-10 21:59:12'),
(97, 99, 62106, 4, 'СИ(рб) - 2016', '2019-06-10 21:59:12'),
(98, 100, 62109, 4, 'СИ(рб) - 2016', '2019-06-10 21:59:12'),
(99, 101, 61571, 5, 'СИ(рб) - 2016', '2019-06-10 21:59:12'),
(100, 102, 61971, 5, 'СИ(рб) - 2016', '2019-06-10 21:59:13'),
(101, 103, 61988, 5, 'СИ(рб) - 2016', '2019-06-10 21:59:13'),
(102, 104, 61990, 5, 'СИ(рб) - 2016', '2019-06-10 21:59:13'),
(103, 105, 61992, 5, 'СИ(рб) - 2016', '2019-06-10 21:59:13'),
(104, 106, 62002, 5, 'СИ(рб) - 2016', '2019-06-10 21:59:13'),
(105, 107, 62006, 5, 'СИ(рб) - 2016', '2019-06-10 21:59:13'),
(106, 108, 62007, 5, 'СИ(рб) - 2016', '2019-06-10 21:59:14'),
(107, 109, 62012, 5, 'СИ(рб) - 2016', '2019-06-10 21:59:14'),
(108, 110, 62013, 5, 'СИ(рб) - 2016', '2019-06-10 21:59:14'),
(109, 111, 62022, 5, 'СИ(рб) - 2016', '2019-06-10 21:59:14'),
(110, 112, 62024, 5, 'СИ(рб) - 2016', '2019-06-10 21:59:14'),
(111, 113, 62059, 5, 'СИ(рб) - 2016', '2019-06-10 21:59:14'),
(112, 114, 62064, 5, 'СИ(рб) - 2016', '2019-06-10 21:59:15'),
(113, 115, 62069, 5, 'СИ(рб) - 2016', '2019-06-10 21:59:15'),
(114, 116, 62073, 5, 'СИ(рб) - 2016', '2019-06-10 21:59:15'),
(115, 117, 62076, 5, 'СИ(рб) - 2016', '2019-06-10 21:59:15'),
(116, 118, 62083, 5, 'СИ(рб) - 2016', '2019-06-10 21:59:15'),
(117, 119, 62090, 5, 'СИ(рб) - 2016', '2019-06-10 21:59:16'),
(118, 120, 62097, 5, 'СИ(рб) - 2016', '2019-06-10 21:59:16'),
(119, 121, 62099, 5, 'СИ(рб) - 2016', '2019-06-10 21:59:16'),
(120, 122, 62101, 5, 'СИ(рб) - 2016', '2019-06-10 21:59:16'),
(121, 123, 62105, 5, 'СИ(рб) - 2016', '2019-06-10 21:59:16'),
(122, 124, 62110, 5, 'СИ(рб) - 2016', '2019-06-10 21:59:16'),
(123, 125, 855274, 5, 'СИ(рб) - 2016', '2019-06-10 21:59:17'),
(124, 126, 855286, 5, 'СИ(рб) - 2016', '2019-06-10 21:59:17'),
(125, 127, 855287, 5, 'СИ(рб) - 2016', '2019-06-10 21:59:17');

-- --------------------------------------------------------

--
-- Table structure for table `user`
--

CREATE TABLE `user` (
  `user_id` int(11) NOT NULL,
  `email` varchar(255) NOT NULL,
  `name` varchar(255) NOT NULL,
  `lastname` varchar(255) NOT NULL,
  `password` varchar(2048) NOT NULL,
  `role_id` int(11) NOT NULL DEFAULT '2',
  `gender_id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `user`
--

INSERT INTO `user` (`user_id`, `email`, `name`, `lastname`, `password`, `role_id`, `gender_id`) VALUES
(1, 'silvia@fmi.uni-sofia.bg', 'Силвия', 'Иванова', '$2y$10$UJSvSzHdHL162F8pY2Ssl.oSlD8vx3gS2TnzYdmHQt1jajZ9nyUR.', 1, 2),
(2, 'ivan@fmi.uni-sofia.bg', 'Иван', 'Иванов', '$2y$10$UJSvSzHdHL162F8pY2Ssl.oSlD8vx3gS2TnzYdmHQt1jajZ9nyUR.', 1, 1),
(3, 'fn61824@fmi.uni-sofia.bg', 'Димитър', 'Жоров', '$2y$10$jXMH2Bsag4Z6edEzW9SgB.CQmwADdr0M4tE1YQzlR2DISULSWtz3.', 2, 1),
(4, 'fn61872@fmi.uni-sofia.bg', 'Петя', 'Таскова', '$2y$10$Pd28F3wn1PbQ6A3Dm2.KP.qRviRZjQXIKwO1i4NXLeidZgxHwkzxK', 2, 1),
(5, 'fn61875@fmi.uni-sofia.bg', 'Александър', 'Йорданов', '$2y$10$ctoXQaXrSlcZdfcYY6FyNOThtoJeUy3N812uaFDJF/nERcsNUfGoK', 2, 1),
(6, 'fn61878@fmi.uni-sofia.bg', 'Лъчезар', 'Миленов', '$2y$10$.HobUJzNOi85keg/2YYNkewZp7ap./TCH7SWdUHtfYMRlthqm7W0.', 2, 1),
(7, 'fn61909@fmi.uni-sofia.bg', 'Иван', 'Георгиев', '$2y$10$d.eVAqGBYuiPSREmUQQz9.7KbRy.rP/9zDfN.QsPB74oOWoPL4WpW', 2, 1),
(8, 'fn61928@fmi.uni-sofia.bg', 'Върбан', 'Юриев', '$2y$10$XBaAhHS4tvsMnlJlQaFs1.J1XbpQNrdltaqdw1KJ8EXzLSaNzwASq', 2, 1),
(9, 'fn61974@fmi.uni-sofia.bg', 'Елена', 'Руменова', '$2y$10$gd4ZHMB2efD4QOm/Nbl1UubavKEw5W4J519QYcUCsJPqj6T5CugRC', 2, 1),
(10, 'fn61978@fmi.uni-sofia.bg', 'Радослав', 'Ангелов', '$2y$10$2fR32qGarZt6uB8rZOnxx.5tQEGUK3xXEUXw6nEgpjAkGuEg7dTQe', 2, 1),
(11, 'fn61985@fmi.uni-sofia.bg', 'Надежда', 'Ивелинова', '$2y$10$fqnSm6bBL13Rb56haf6k8.YCGbgaxvq4XD2ExCsGzUq2sXER3gA4y', 2, 1),
(12, 'fn61996@fmi.uni-sofia.bg', 'Пламен', 'Георгиев', '$2y$10$PGltefnpcnxcTTBnMkHY8uN.lvh/rxZayIlVQNYQh8icVfRtzuWee', 2, 1),
(13, 'fn61997@fmi.uni-sofia.bg', 'Мира', 'Мирославова', '$2y$10$qZSoeoxTRr5AhKOQ6OP7buq6LWBPBzRiSftXqZGGGw8cdxwtdWOhK', 2, 1),
(14, 'fn62000@fmi.uni-sofia.bg', 'Илиян', 'Георгиев', '$2y$10$IDyd/ca3/EqBXtwmLU1Y4ORJxr0KTJgmfF5jJDClZduUTqTOmMi5S', 2, 1),
(15, 'fn62031@fmi.uni-sofia.bg', 'Ивета', 'Димитрова', '$2y$10$Z9WMpnufiCGDBfsq1u/bJeDiNTfZTsl6rSHmyl15Ma/8iM9gL.YPa', 2, 1),
(16, 'fn62033@fmi.uni-sofia.bg', 'Галин', 'Тонев', '$2y$10$eaNVzpGFErpQxl2fGOvsgexnm1AVoQ0Wz5HxUoJkWyZ.E.QOclTNO', 2, 1),
(17, 'fn62040@fmi.uni-sofia.bg', 'Константин', 'Пламенов', '$2y$10$h2l7jJ1U1urh0oDLeEh73OT0Anfxq63P2s1xryPXTTslinOrjneYa', 2, 1),
(18, 'fn62042@fmi.uni-sofia.bg', 'Георги', 'Венциславов', '$2y$10$9La7iTx5H1OuNXEzsB4q.eix2Kdk1TdqeiBOifrlET98MrN/RfHJG', 2, 1),
(19, 'fn62043@fmi.uni-sofia.bg', 'Ния', 'Димитрова', '$2y$10$w5VflP3VXT.VhprrTLJugeE0USYoRnblZOU8vpuzSKpJWJHsfiE86', 2, 1),
(20, 'fn62052@fmi.uni-sofia.bg', 'Петя', 'Желязкова', '$2y$10$yT8VLjvVYleI8AycCPhW3.ofS5Kwsjh1pVwWQZuuzI8dBqGNL8Afm', 2, 1),
(21, 'fn62053@fmi.uni-sofia.bg', 'Костадин', 'Илиянов', '$2y$10$lPc7EHvwOp1RXHDXcieXYOmApsOtbWRhY1jxer/vOaoUwcKq2.89m', 2, 1),
(22, 'fn62072@fmi.uni-sofia.bg', 'Николай', 'Кирилов', '$2y$10$Bsl4S655UUkD43jrjY0QD.N44J/p2ts//ngfvRmAOlpI9xKrtpiRe', 2, 1),
(23, 'fn62082@fmi.uni-sofia.bg', 'Биляна', 'Василева', '$2y$10$tXqXHE2OZRItFXi2fu7PWu3iXFVqkbMdFbePnkMtZs7/3PhITIisa', 2, 1),
(24, 'fn62087@fmi.uni-sofia.bg', 'Василена', 'Красимирова', '$2y$10$K0J.nJ9BaZrLDdDsmam9WeW5j5J5gqSn8iv/e/Jmo6aS5wsykPyXu', 2, 1),
(25, 'fn62098@fmi.uni-sofia.bg', 'Велизар', 'Димитров', '$2y$10$Zp2EZkaHrYF7PgDPDNVf.Ol4Sp8oQEE9F/wczWq0nTQYEgD/p7KAW', 2, 1),
(26, 'fn62104@fmi.uni-sofia.bg', 'Данаил', 'Стефанов', '$2y$10$CH8ZchgZZySJAY5LhdwRHuvpkhCgx5Yv1fyts2xEL2k5PsOAXKDpC', 2, 1),
(27, 'fn62108@fmi.uni-sofia.bg', 'Шериф', 'Саами', '$2y$10$Sk5ODTkUREIIMbQyhLpvoOrIrVjnWs3dNnRCNfO4HR6mYCh6sarR.', 2, 1),
(28, 'fn855280@fmi.uni-sofia.bg', 'Борис', 'Арсов', '$2y$10$avccCRGU/DpHZIdAfmjiuO.gD19RxE.Hd4gAFRFc/fM1xkz7mraP6', 2, 1),
(29, 'fn61894@fmi.uni-sofia.bg', 'Камен', 'Димитров', '$2y$10$vJemWXmeRWn0PBdimt.Oje9UH.BsmBX9hpuXHi4Rf.37IeptyKWNa', 2, 1),
(30, 'fn61913@fmi.uni-sofia.bg', 'Цветелин', 'Веселинов', '$2y$10$JYiaGq0nXfTdAD5gtXe3RuaIcH37thnCgKgA00/8qPX0yBV8W4DRi', 2, 1),
(31, 'fn61979@fmi.uni-sofia.bg', 'Стефка', 'Владимирова', '$2y$10$auujClFMHoUhFHt0OkvrSewBvGn46QDy0xSfh/rvDcg8ZQWasQ6v2', 2, 1),
(32, 'fn61980@fmi.uni-sofia.bg', 'Елизка', 'Ерхатова', '$2y$10$VHP5VPW8gU2bJsG9R86L.O9oFz/AXieEK2wdVIPygjBufVC7Aj2lS', 2, 1),
(33, 'fn61982@fmi.uni-sofia.bg', 'Габриела', 'Даниелова', '$2y$10$vG8aWcgVPFPYuoE8b5mYlOpF9tAtXDc73r4mRr6Qh2.pJY4ZR3koO', 2, 1),
(34, 'fn61983@fmi.uni-sofia.bg', 'Георги', 'Иванов', '$2y$10$ge0a9g6Z/Bz1p0B8XJRei./BkvwLq3biRrVuZkno/EmgtqZ4Fley.', 2, 1),
(35, 'fn61984@fmi.uni-sofia.bg', 'Валери', 'Димов', '$2y$10$8vb73IRX4yqJdrZGzBzBPOIujlYck1ESVoActc78zawoG5/gDvU7a', 2, 1),
(36, 'fn61986@fmi.uni-sofia.bg', 'Силвия', 'Стаменова', '$2y$10$Refku/sVsXkfqCJf6YdFdOOOsw65xwKu0p2x2KbiGEKK0WwNYL6ey', 2, 1),
(37, 'fn61987@fmi.uni-sofia.bg', 'Никол', 'Светозарова', '$2y$10$FEDczqqN4uGRpLiul/g7WuOULvZ9aWXF0QsNtQ0bjwcrfn..eP/yO', 2, 1),
(38, 'fn61989@fmi.uni-sofia.bg', 'Стилян', 'Павелов', '$2y$10$CIh8WkZ/Yjf.RSIeVDUf5.olQ4/AbJylANAp21sP43P5m5lJ.9tFC', 2, 1),
(39, 'fn61999@fmi.uni-sofia.bg', 'Силвия', 'Тодорова', '$2y$10$yjy.K9cSj8ZkE0GDdFoMKudrT9R87j3eDtzKmZSps2MV1erljeuim', 2, 1),
(40, 'fn62001@fmi.uni-sofia.bg', 'Слави', 'Валериев', '$2y$10$JhwrrHrzi8hFcFSSGHKD6.c.6BAdP8BWjho3ycNfjSeUi7aTZNTyS', 2, 1),
(41, 'fn62010@fmi.uni-sofia.bg', 'Даниела', 'Иванова', '$2y$10$yCaSepCP9SmOh3tNNzdslOCHQyjASIHuYPgUvFqJfsafMPVG.QF/a', 2, 1),
(42, 'fn62029@fmi.uni-sofia.bg', 'Валентин', 'Станимиров', '$2y$10$9.6Q/YHkoj7Iy6wturogFeUYmEWAPfrNcvoWUj/u95sCtk7ptZ.OW', 2, 1),
(43, 'fn62036@fmi.uni-sofia.bg', 'Павел', 'Иванов', '$2y$10$c7bdjjxo7E99uWesuM1M3.nl9eVbiQKqgTdCgHiHhfgpG9RpWckQC', 2, 1),
(44, 'fn62041@fmi.uni-sofia.bg', 'Цветомир', 'Мирославов', '$2y$10$W5RBea2f5VvkulN5E5mZVu9LSYHp09cgPXgwYVH.PpYeNAwQ7Ga5G', 2, 1),
(45, 'fn62048@fmi.uni-sofia.bg', 'Иван', 'Димитров', '$2y$10$077hLcPvV5N/FXzthXr5z.jDKpVL7WTVNDjgdaqX9bP5Fp3W5MhQu', 2, 1),
(46, 'fn62051@fmi.uni-sofia.bg', 'Боян', 'Василев', '$2y$10$ovXN3opXSR.fP89zWxFNNOgvrKlnjNd0uD0XDJgGDUHKvJ1uMQLNm', 2, 1),
(47, 'fn62058@fmi.uni-sofia.bg', 'Денис', 'Славейков', '$2y$10$Sj1PAV9WfzWtkTpTDcbmX.ajBFPSFRdkI2QxTq1AoV1WoMLZcPMy6', 2, 1),
(48, 'fn62065@fmi.uni-sofia.bg', 'Никола', 'Здравков', '$2y$10$vHnV5xsAvbRQWG4bbQqJn.zSzxPQrJqBL89dNUh9ZrRM/J7wnZm9q', 2, 1),
(49, 'fn62071@fmi.uni-sofia.bg', 'Сузан', 'Бисерова', '$2y$10$4i4oLC5yg26PF971QFRbCOrO0SSZzxkXhzg8lyaxypg.eJOAzkfbi', 2, 1),
(50, 'fn62078@fmi.uni-sofia.bg', 'Мартин', 'Антонов', '$2y$10$LFxz5BF4B3Q.Gjxm4zUOAe8Nq4Ftg.pp.swRAKi4Zh8I26dwfNRYS', 2, 1),
(51, 'fn62080@fmi.uni-sofia.bg', 'Виктория', 'Иванова', '$2y$10$6AW6C9mxfcSl29h5V1kxpeOa4ngmcT1jabHmyedWqzPWOVdFQLRWG', 2, 1),
(52, 'fn62096@fmi.uni-sofia.bg', 'Стефан', 'Христов', '$2y$10$N0IWjYRl/RFpHq/hVcZK9.8rBDCfnDXxl3rw8m0kiSCKzOFXRUvBW', 2, 1),
(53, 'fn62100@fmi.uni-sofia.bg', 'Емил', 'Емилов', '$2y$10$1lzd75bkeXuSjStSwgo6C.nyk38ClB2mxKUmWCNaTXckYn0qdDTYS', 2, 1),
(54, 'fn61439@fmi.uni-sofia.bg', 'Искрен', 'Емилов', '$2y$10$8yJ1zsX391RDS2BCTW.yxOFg9PQvtj1nkmu3mIvYd9wMYhgYcmvSC', 2, 1),
(55, 'fn61737@fmi.uni-sofia.bg', 'Тихомир', 'Емилов', '$2y$10$0ZQ2jRBgO3t69o1NeSrhU.c3bwoMC46y9GrAYau9iWNlC3qToEUFm', 2, 1),
(56, 'fn61976@fmi.uni-sofia.bg', 'Димитър', 'Радославов', '$2y$10$hxo9M1STsBn8mfMi8MnErevea1rej.0Qt0WJIVPS0Bo4AadI2KQwu', 2, 1),
(57, 'fn61981@fmi.uni-sofia.bg', 'Иво', 'Славчов', '$2y$10$Ll9ynA3UbW/6.P5lTMNzBu1fCN85YL7mrMzEUFv0QZ/tNGqLxdvoe', 2, 1),
(58, 'fn61993@fmi.uni-sofia.bg', 'Иван', 'Недялков', '$2y$10$u48F7OmqyBZnnHh5otpUHeJuRFkDW6mDRt3JK0emux1tcDokehptu', 2, 1),
(59, 'fn61998@fmi.uni-sofia.bg', 'Тинка', 'Сашева', '$2y$10$zvDihJeUD8eonNkwPIuTSu/5B0fvCLlMMLdc.N3Ncw/qr.IbM7lVW', 2, 1),
(60, 'fn62003@fmi.uni-sofia.bg', 'Петя', 'Георгиева', '$2y$10$g249knkifvJT8tur0joZtucUciYq368847CcgSW23mnAY6825VBHS', 2, 1),
(61, 'fn62004@fmi.uni-sofia.bg', 'Виктор', 'Живков', '$2y$10$yD3ob5sHVZ5kiv7nqi1A3uytygLga0IUlUFB5iJZCYjou0oPU3vRS', 2, 1),
(62, 'fn62005@fmi.uni-sofia.bg', 'Костадин', 'Йорданов', '$2y$10$qQbplE6VxBju68vP6K2qMOdfuOCK3pYqC33/RXuJKkHooa5/Uutn2', 2, 1),
(63, 'fn62009@fmi.uni-sofia.bg', 'Деница', 'Драгомирова', '$2y$10$A0Mvj8TLc4YzsFkp6OSYAegOdu/8.QibZaQthk0ao3KxHHXNhmZVq', 2, 1),
(64, 'fn62023@fmi.uni-sofia.bg', 'Александър', 'Мариов', '$2y$10$IkxjeOv0.yTgLMfCJU5TMuZZOHiWFLqUh4hmb/.Zy6bhwuXAWTibK', 2, 1),
(65, 'fn62027@fmi.uni-sofia.bg', 'Ния', 'Руменова', '$2y$10$dzHjjmPEZ2ad0HyfDntYc.mNdcxk7Czsbv5Hw3Hy/h4HWJI7nCi5S', 2, 1),
(66, 'fn62035@fmi.uni-sofia.bg', 'Александра', 'Александрова', '$2y$10$C5BB9g6lqLJWrl9ukGAmc.0A9VZV5lfUY6qG7J/la0J6XAdXZ.YwC', 2, 1),
(67, 'fn62037@fmi.uni-sofia.bg', 'Денис', 'Дениславов', '$2y$10$foxwxAl2r4hnvMSUuNqpUuNkKOeOoEq4H8Y07pMkZaz7qfOYzI7mK', 2, 1),
(68, 'fn62046@fmi.uni-sofia.bg', 'Ангел', 'Тодоров', '$2y$10$FWQf7/pW8zOPQhJ04pfu2u7P7LcFSGwi6QzzYXI1dvp0aH9HprV5C', 2, 1),
(69, 'fn62047@fmi.uni-sofia.bg', 'Тодор', 'Насков', '$2y$10$ICbVMs1Xkdq497P99hmoe.F9BctDa8.psfJh6Jmh2mDicu3YdzJ/K', 2, 1),
(70, 'fn62049@fmi.uni-sofia.bg', 'Кристиан', 'Красимиров', '$2y$10$h5DQc2rAl4IuDr05moleRes3TmA.m9Y64FO2vfQtuiB8ebeKSMTa2', 2, 1),
(71, 'fn62062@fmi.uni-sofia.bg', 'Йоана', 'Иванова', '$2y$10$VUXEUd6QGpDiO6avapQ4.O17BTK/TSKsXhGCO4Jft/0AW2D64I88C', 2, 1),
(72, 'fn62067@fmi.uni-sofia.bg', 'Георги', 'Мартинов', '$2y$10$Tw95bv3RX15TynP9ILGz3.QWkBQdhLEnp.GaHxPsXikdKMn5Drv26', 2, 1),
(73, 'fn62075@fmi.uni-sofia.bg', 'Мартина', 'Александрова', '$2y$10$4jp7Pw29mkiRafEw/GMeGOApkZr/lRvJnSpUHW2Ye4iQY2jjzTsz2', 2, 1),
(74, 'fn62095@fmi.uni-sofia.bg', 'Валентин', 'Йорданов', '$2y$10$tYEkPXFnKZ2Ps94UaQ0rJ.rfKPoAzpDL0TSsB9w8K8YZvPvdg9RTi', 2, 1),
(75, 'fn62111@fmi.uni-sofia.bg', 'Юлиян', 'Петров', '$2y$10$2egIbZACk4SEdMinz5rTkulJsCRT48M76zSjVdzM4RzSZ2SE1.ZjS', 2, 1),
(76, 'fn855273@fmi.uni-sofia.bg', 'Милхад', 'Карче', '$2y$10$i9nwBkSRlxBpoPBM3TaMEuts2UEcBaK/OZm1FFvn.kkDU6yCJ4eZW', 2, 1),
(77, 'fn61906@fmi.uni-sofia.bg', 'Кремена', 'Иванова', '$2y$10$PiGOcqDjtJ4c9VomAvGikOaZNMRtOYlX4BVzMxMmGjBuD4QjrHxRK', 2, 1),
(78, 'fn61944@fmi.uni-sofia.bg', 'Иван', 'Атанасов', '$2y$10$eJtbLR8g92uun2yHc.xJlelPp4j7LCbP3eiIahXnMKogbMlX1H6nG', 2, 1),
(79, 'fn61973@fmi.uni-sofia.bg', 'Нено', 'Венциславов', '$2y$10$1kj2pTbuRWlqUipSuOMZVOC4dAHLvBrvDHbqGEar8Vmq99IxRpau.', 2, 1),
(80, 'fn61977@fmi.uni-sofia.bg', 'Кирил', 'Николаев', '$2y$10$KNZg8N.7noXd3xbGbk8ESeRIfF3u.jQ5B6k.yr8wKNOyaueIGYGB6', 2, 1),
(81, 'fn61991@fmi.uni-sofia.bg', 'Данаил', 'Николаев', '$2y$10$sg4aIa8Z74vQ7octtGCD8.LGrFXi4b/HVWHe7LcppPwOa8UT9fgx.', 2, 1),
(82, 'fn62008@fmi.uni-sofia.bg', 'Йоанна', 'Петрова', '$2y$10$Y0sx90hzDzD.AtZCxK2SvuI5sbQImPeusKdvTkRhO2VLdr9NYDRyy', 2, 1),
(83, 'fn62016@fmi.uni-sofia.bg', 'Христо', 'Кирилов', '$2y$10$OJTyjaV.hrMsF50WjGRZt.hwPHVrZ62HRgKfVj6YNiBEKkkAY5qbW', 2, 1),
(84, 'fn62017@fmi.uni-sofia.bg', 'Августина', 'Георгиева', '$2y$10$UviaxxZRbr5LEJLJa0mjmuzRwM/rpuwOVTkwJkQdYSHGmHR9f8iAu', 2, 1),
(85, 'fn62021@fmi.uni-sofia.bg', 'Йоана', 'Юриева', '$2y$10$qMIGdeo844MbqTQ1vtO4GerI9zXeSHnEWkYlpB8SpPBh8HVJt7Je6', 2, 1),
(86, 'fn62034@fmi.uni-sofia.bg', 'Калоян', 'Пламенов', '$2y$10$kcWOOGyioI2wSllZp0CBve4S43hvzxCT2MaXeSSZ68DZMc2KtrVja', 2, 1),
(87, 'fn62038@fmi.uni-sofia.bg', 'Кристиан', 'Георгиев', '$2y$10$oY6lu82u4vD6zm1wf5lnLuAFAsrb0uoi/1wU3SnIcouBDNcVgWJaq', 2, 1),
(88, 'fn62044@fmi.uni-sofia.bg', 'Милен', 'Цецов', '$2y$10$Vu.C/u1VkBKI/54gY4MOwufyPieNiqInsoGV8v42RuciOS3nEU53C', 2, 1),
(89, 'fn62045@fmi.uni-sofia.bg', 'Калоян', 'Красимиров', '$2y$10$4hViL0yZTIzRDofe2u7ZmuhYltaWrbCwJcsBEDfnFfELZudPCetkG', 2, 1),
(90, 'fn62050@fmi.uni-sofia.bg', 'Иван', 'Ганчев', '$2y$10$5XOG74RgKl4KWyIADl4ZzuyRZaWwvMTUUIHbjp53fF8fvyf/tyuRS', 2, 1),
(91, 'fn62061@fmi.uni-sofia.bg', 'Огнянка', 'Емилова', '$2y$10$EiV/y8KEgJ/l3RzuEj7YJupw5Deb5YiIQ08qcmc94TuN93E02G/VO', 2, 1),
(92, 'fn62063@fmi.uni-sofia.bg', 'Свилен', 'Орлинов', '$2y$10$YRLgPjHa4QCs9aJCltSQouefwFGrfO/Jw7xJOdTc64QyzyQ4h.chG', 2, 1),
(93, 'fn62070@fmi.uni-sofia.bg', 'Любослав', 'Михайлов', '$2y$10$0ibVzh3IS2O3ALJvOVycD.t5NcnhrqWUpp9ArY07UQoBtDOR8XguK', 2, 1),
(94, 'fn62074@fmi.uni-sofia.bg', 'Симона', 'Мартинова', '$2y$10$X3i8EMcbeXRz6CwWoXaf9.NMGEYThW8M4pfj7MlEZbOijW7RJFYoK', 2, 1),
(95, 'fn62079@fmi.uni-sofia.bg', 'Десислава', 'Николаева', '$2y$10$f.ZSTznbVirPtxyGj.sWcusrwC1SG6jm2sM.A/a/15u2D797/qJYu', 2, 1),
(96, 'fn62081@fmi.uni-sofia.bg', 'Виктория', 'Светославова', '$2y$10$EM6D3X1Kr3Z9ZNFFKV5P..HR4LYBLr.Szc/jXZW6q2AIxshhtn0Qm', 2, 1),
(97, 'fn62088@fmi.uni-sofia.bg', 'Радостина', 'Христова', '$2y$10$SxhRpy7.TJqLK84DIOgNyelYPSEhQUF7X0OhcuiZW4fQmGqB77dku', 2, 1),
(98, 'fn62089@fmi.uni-sofia.bg', 'Юнер', 'Басри', '$2y$10$QdNMbwa9YIIsbnUHYJmE5uamXLiGY7s731QavjjGjIhMT/3a9VVcq', 2, 1),
(99, 'fn62106@fmi.uni-sofia.bg', 'Богдан', 'Дечков', '$2y$10$Oh2EDs0XicA2zCGqGW1YseIgy5DClheXcl0Cl2G1nfBdeIM6F7IdO', 2, 1),
(100, 'fn62109@fmi.uni-sofia.bg', 'Стефан', 'Емилов', '$2y$10$h5aC137oiFNYkEFHWIl7MuFvS5hIVj4Q8Fz.kFcc6yRoyBjixGeTW', 2, 1),
(101, 'fn61571@fmi.uni-sofia.bg', 'Илиян', 'Бисеров', '$2y$10$sObbhpk4EEdBnt5B/obcJ.vpMVik6nbnLKLjlgcXi3nlKypDUkT4C', 2, 1),
(102, 'fn61971@fmi.uni-sofia.bg', 'Калоян', 'Ивайлов', '$2y$10$40.JUEOU4FBRA3FiBHh7UeBdXCE1mkBvar3AuwTPRrIr9x3pnVZgi', 2, 1),
(103, 'fn61988@fmi.uni-sofia.bg', 'Стоян', 'Стайков', '$2y$10$dq5PGpF8YDX9p/7SYXZN/eIBjyVLMsVadxhfrWOu6XULIH2PPZ.X6', 2, 1),
(104, 'fn61990@fmi.uni-sofia.bg', 'Стефан', 'Николаев', '$2y$10$kI8slF19.yEg0yCZ8mbRRuhmh2SAn0/9eaN1IANi5LotERcl8ohk2', 2, 1),
(105, 'fn61992@fmi.uni-sofia.bg', 'Елица', 'Красимирова', '$2y$10$8qP1Oo5eAPUcBm1Lcz7bluAInIRv77YJw8H8idp31EU0lDBtiI/Ly', 2, 1),
(106, 'fn62002@fmi.uni-sofia.bg', 'Росица', 'Христова', '$2y$10$YP1rmhtKRhVlH1lWiacZderTvki8cEjlYq8n3PB/Pd.i4PP/4XyfG', 2, 1),
(107, 'fn62006@fmi.uni-sofia.bg', 'Здравко', 'Иванов', '$2y$10$39nRRtR97I4g1RRkn3DfauPSu7ajf2tqAO0LjqGkG1vWXUqgygd3O', 2, 1),
(108, 'fn62007@fmi.uni-sofia.bg', 'Станислава', 'Димитрова', '$2y$10$qRVM5wTsi3IP1eZQzA.b1eiybxBXla.T5OXrwcvNNKY9pIypqAYdi', 2, 1),
(109, 'fn62012@fmi.uni-sofia.bg', 'Ангел', 'Николаев', '$2y$10$kZzuePL8IFm7jLg5NOay6.AhP2iNiO3AqLGPlDLd9GtoMGvk1m5RG', 2, 1),
(110, 'fn62013@fmi.uni-sofia.bg', 'Рая', 'Диянова', '$2y$10$AyeId2IDoDIx.BlZZ3O.e.m1UktyGOLPAErLdleMUy7NXaxPxgJLq', 2, 1),
(111, 'fn62022@fmi.uni-sofia.bg', 'Йоана', 'Атанасова', '$2y$10$wzX4XFn1zB4BMbSwraPAKuLg96U89l7tgSsdMt6ZrOUwYi5O7Qjly', 2, 1),
(112, 'fn62024@fmi.uni-sofia.bg', 'Ивелина', 'Павлова', '$2y$10$tIdPS6rVzrD3OPhjM3kvr.aHdznIdn0MLDlRUWqI2WgeKdaA8GT1W', 2, 1),
(113, 'fn62059@fmi.uni-sofia.bg', 'Симона', 'Михайлова', '$2y$10$anHddAYZjdWiqr5JaNI16eqaZdZ.bnqKI0G3EiUWfM6vlDxmdFvWS', 2, 1),
(114, 'fn62064@fmi.uni-sofia.bg', 'Стефан', 'Стефанов', '$2y$10$lqfRkdhLAiv.53uz1qSOouPDtzsejPKkntEjaWfcdZLribJ6anJrq', 2, 1),
(115, 'fn62069@fmi.uni-sofia.bg', 'Стоил', 'Юлиянов', '$2y$10$Jbzb1xMFrF/k0SnJL8CN2OHAuR4BzNJKgqfX7ihKpy26WorV7ubpe', 2, 1),
(116, 'fn62073@fmi.uni-sofia.bg', 'Вероника', 'Галинова', '$2y$10$OCaaI84//z3EAux.KuUy8uZogrWbNYTWFSjkgLI1uP/GfOM3IcCxi', 2, 1),
(117, 'fn62076@fmi.uni-sofia.bg', 'Борис', 'Свиленов', '$2y$10$923JykWR3832ORHyo3WUAOmHIQkZ1ZgQt6yRrAxp.m0p1JeJeYkKK', 2, 1),
(118, 'fn62083@fmi.uni-sofia.bg', 'Станимир', 'Цветанов', '$2y$10$axlSqqFiVtGG.gUaZHCX9e.DZdgJ9Lss2FiMoP1q0qq9X9TY1aBD2', 2, 1),
(119, 'fn62090@fmi.uni-sofia.bg', 'Алекс', 'Юриев', '$2y$10$8DsoxFhYyFipy887qm2HdOv9aS5lmXdpLmsMZAOqunfvzW9AZYCVK', 2, 1),
(120, 'fn62097@fmi.uni-sofia.bg', 'Кирил', 'Яворов', '$2y$10$S.1zBeRk7t5uqz/Th2WSyOV8jffuFxp2PnK4HrFqt0SIUMUL320FG', 2, 1),
(121, 'fn62099@fmi.uni-sofia.bg', 'Димо', 'Костадинов', '$2y$10$rKqnbjhjhZ8YatzQd48pC.aN6dB.k/jxr8ZKNRezYtP8MK5/zrIje', 2, 1),
(122, 'fn62101@fmi.uni-sofia.bg', 'Георги', 'Василев', '$2y$10$gHjiOWJCvrXxcmk8oSbA6eLBFXrw08CXv/HZCNGYpgsKmD24Y2rwi', 2, 1),
(123, 'fn62105@fmi.uni-sofia.bg', 'Боряна', 'Бойкова', '$2y$10$sxJhQ70/KHxKfFNS2MlhZuXfFYmZAsxR27U3xYf8EfDTKvUwnMhu.', 2, 1),
(124, 'fn62110@fmi.uni-sofia.bg', 'Никола', 'Николов', '$2y$10$.eeVcutr10wVVOCta4fB7e8Vk9OQGaUJu2tbwNF1Y5o5GLganWC26', 2, 1),
(125, 'fn855274@fmi.uni-sofia.bg', 'Горан', 'Траянов', '$2y$10$k4e9RajlgNEhg0u21FdEI.fSoMucRAU069wEpV7c1FO1AgkTw7Uua', 2, 1),
(126, 'fn855286@fmi.uni-sofia.bg', 'Лиляна', 'Стойева', '$2y$10$9UgZtKPhc7PFvbAguZMcbu1yLoUew2sDP/Dpp7PsIyH82D1aKnaQy', 2, 1),
(127, 'fn855287@fmi.uni-sofia.bg', 'Васка', 'Кичукова', '$2y$10$pFvHTD/VhC0yk4WvY3HVh.yt26usf05G8LXGpEbA5ciJT7G4JwlxG', 2, 1);

-- --------------------------------------------------------

--
-- Table structure for table `user_role`
--

CREATE TABLE `user_role` (
  `role_id` int(11) NOT NULL,
  `roleName` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Dumping data for table `user_role`
--

INSERT INTO `user_role` (`role_id`, `roleName`) VALUES
(1, 'Учител'),
(2, 'Студент');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `category`
--
ALTER TABLE `category`
  ADD PRIMARY KEY (`category_id`);

--
-- Indexes for table `chart`
--
ALTER TABLE `chart`
  ADD PRIMARY KEY (`chart_id`);

--
-- Indexes for table `gender`
--
ALTER TABLE `gender`
  ADD PRIMARY KEY (`gender_id`);

--
-- Indexes for table `mark`
--
ALTER TABLE `mark`
  ADD PRIMARY KEY (`mark_id`),
  ADD UNIQUE KEY `unique_index` (`student_id`,`category_id`,`stage`),
  ADD KEY `category_constrain` (`category_id`);

--
-- Indexes for table `student`
--
ALTER TABLE `student`
  ADD PRIMARY KEY (`student_id`),
  ADD UNIQUE KEY `user_id` (`user_id`);

--
-- Indexes for table `user`
--
ALTER TABLE `user`
  ADD PRIMARY KEY (`user_id`),
  ADD UNIQUE KEY `email` (`email`),
  ADD KEY `role_constraint` (`role_id`),
  ADD KEY `gender_id` (`gender_id`);

--
-- Indexes for table `user_role`
--
ALTER TABLE `user_role`
  ADD PRIMARY KEY (`role_id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `category`
--
ALTER TABLE `category`
  MODIFY `category_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;

--
-- AUTO_INCREMENT for table `chart`
--
ALTER TABLE `chart`
  MODIFY `chart_id` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `gender`
--
ALTER TABLE `gender`
  MODIFY `gender_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;

--
-- AUTO_INCREMENT for table `mark`
--
ALTER TABLE `mark`
  MODIFY `mark_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=480;

--
-- AUTO_INCREMENT for table `student`
--
ALTER TABLE `student`
  MODIFY `student_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=126;

--
-- AUTO_INCREMENT for table `user`
--
ALTER TABLE `user`
  MODIFY `user_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=128;

--
-- AUTO_INCREMENT for table `user_role`
--
ALTER TABLE `user_role`
  MODIFY `role_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;

--
-- Constraints for dumped tables
--

--
-- Constraints for table `mark`
--
ALTER TABLE `mark`
  ADD CONSTRAINT `category_constrain` FOREIGN KEY (`category_id`) REFERENCES `category` (`category_id`),
  ADD CONSTRAINT `student_constraint` FOREIGN KEY (`student_id`) REFERENCES `student` (`student_id`);

--
-- Constraints for table `student`
--
ALTER TABLE `student`
  ADD CONSTRAINT `user_constraint` FOREIGN KEY (`user_id`) REFERENCES `user` (`user_id`);

--
-- Constraints for table `user`
--
ALTER TABLE `user`
  ADD CONSTRAINT `gender_constraint` FOREIGN KEY (`gender_id`) REFERENCES `gender` (`gender_id`),
  ADD CONSTRAINT `role_constraint` FOREIGN KEY (`role_id`) REFERENCES `user_role` (`role_id`);
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
